module App.PropertyManager.Util where

import Interface.RoleManager.UserRole.Permission
import Interface.Common.Types (PropertyKey(..))
import Interface.Common.Util (fetchAndRemove)
import Interface.PropertyManager.Property.Common (GarageType, LandType, ViableConstructionTypes, ResidenceType, Parking, Orientation, WarehouseType)

import Interface.PropertyManager.Property.ApartmentProperty.ApartmentProperty qualified as ApartmentProperty (R(..), UpdateApartment(..) ,SetCid(..))
import Interface.PropertyManager.Property.LandProperty.LandProperty qualified as LandProperty(R(..), UpdateLand(..), SetCid(..))
import Interface.PropertyManager.Property.ResidenceProperty.ResidenceProperty qualified as ResidenceProperty (R(..), UpdateResidence(..), SetCid(..))
import Interface.PropertyManager.Property.GarageProperty.GarageProperty qualified as GarageProperty (R(..), UpdateGarage(..), SetCid(..))
import Interface.PropertyManager.Property.WarehouseProperty.WarehouseProperty qualified as WarehouseProperty (R(..), UpdateWarehouse(..), SetCid(..))

import Interface.PropertyManager.Choices.RequestCreateApartmentProperty qualified as RequestCreateApartmentProperty (I, View(..))
import Interface.PropertyManager.Choices.RequestCreateLandProperty qualified as RequestCreateLandProperty (I, View(..))
import Interface.PropertyManager.Choices.RequestCreateResidenceProperty qualified as RequestCreateResidenceProperty (I, View(..))
import Interface.PropertyManager.Choices.RequestCreateGarageProperty qualified as RequestCreateGarageProperty (I, View(..))
import Interface.PropertyManager.Choices.RequestCreateWarehouseProperty qualified as RequestCreateWarehouseProperty (I, View(..))

import App.Util qualified as UserUtil (hasPermission)
import App.Credential.Credential
import App.PropertyManager.Model

import Interface.PropertyManager.Property.ApartmentProperty.Factory qualified as ApartmentProperty(Factory(..), Create(..))
import Interface.PropertyManager.Property.LandProperty.Factory qualified as LandProperty(Factory(..), Create(..))
import Interface.PropertyManager.Property.ResidenceProperty.Factory qualified as ResidenceProperty(Factory(..), Create(..))
import Interface.PropertyManager.Property.GarageProperty.Factory qualified as GarageProperty(Factory(..), Create(..))
import Interface.PropertyManager.Property.WarehouseProperty.Factory qualified as WarehouseProperty(Factory(..), Create(..))

import Daml.Finance.Interface.Types.Common.Types (Id(..), InstrumentKey(..), PartiesMap)

data CreateApartmentPropertyRequest = CreateApartmentPropertyRequest
  with
    operator: Party
    user: Party
    id: Id
    apartmentInstrument: InstrumentKey
    apartmentPrice : Decimal
    propertyAddress: Text
    propertyPostalCode : Text
    propertyDistrict : Text
    propertyCounty : Text
    grossArea: Decimal
    usableArea: Decimal
    bedrooms: Int
    bathrooms: Int
    floor: Int
    parkingSpaces: Int
    elevator: Bool
    buildDate: Date
    installedEquipment: Text
    additionalInformation: Text
    description: Text
    photoReferences: [Text]
    observers : PartiesMap
    permission: Permission
    apartmentPropertyFactoryCid: ContractId ApartmentProperty.Factory 

requestCreateApartmentPropertyAux : CreateApartmentPropertyRequest -> Update (ContractId RequestCreateApartmentProperty.I)
requestCreateApartmentPropertyAux request = do
  (_, credential) <-  fetchByKey @Credential (request.operator, request.user)
  permission <- UserUtil.hasPermission credential.roles request.permission
  assertMsg "You do not have permission to the creation of a Apartment Property" permission 
  toInterfaceContractId <$> create RequestCreateApartmentProperty with 
      operator = request.operator
      user = request.user
      id = request.id
      apartmentInstrument = request.apartmentInstrument
      apartmentPrice = request.apartmentPrice
      propertyAddress = request.propertyAddress
      propertyPostalCode = request.propertyPostalCode 
      propertyDistrict = request.propertyDistrict
      propertyCounty = request.propertyCounty
      grossArea = request.grossArea
      usableArea = request.usableArea
      bedrooms = request.bedrooms
      bathrooms = request.bathrooms
      floor = request.floor
      parkingSpaces = request.parkingSpaces
      elevator = request.elevator
      buildDate = request.buildDate
      installedEquipment = request.installedEquipment
      additionalInformation = request.additionalInformation
      description = request.description
      photoReferences = request.photoReferences
      observers = request.observers

data CreateApartmentProperty = CreateApartmentProperty
  with
    operator : Party
    user : Party
    createApartmentPropertyRequest: ContractId RequestCreateApartmentProperty.I
    apartmentPropertyFactoryCid: ContractId ApartmentProperty.Factory 

createApartmentPropertyAux : CreateApartmentProperty -> Update (InstrumentKey, PropertyKey)
createApartmentPropertyAux request = do
  RequestCreateApartmentProperty.View{id,apartmentInstrument,apartmentPrice,propertyAddress,propertyPostalCode,propertyDistrict,propertyCounty,grossArea,usableArea,bedrooms,bathrooms,floor,parkingSpaces,elevator,buildDate,installedEquipment,additionalInformation,description,photoReferences,observers} <- view <$> fetchAndRemove request.createApartmentPropertyRequest
  let apartmentProperty = PropertyKey with operator = request.operator, user = request.user, id = id
  exercise request.apartmentPropertyFactoryCid ApartmentProperty.Create with instrument = apartmentInstrument, propertyKey = apartmentProperty, ..
  pure (apartmentInstrument,apartmentProperty)

data UpdateApartment = UpdateApartment
  with
    operator: Party
    user: Party
    propertyKey: PropertyKey
    newApartmentPrice: Decimal
    newApartmentPropertyAddress: Text
    newApartmentPropertyPostalCode : Text
    newApartmentPropertyDistrict : Text
    newApartmentPropertyCounty : Text
    newApartmentGrossArea: Decimal
    newApartmentUsableArea: Decimal
    newApartmentBedrooms: Int
    newApartmentBathrooms: Int
    newApartmentFloor: Int
    newApartmentParkingSpaces: Int
    newApartmentElevator: Bool
    newApartmentBuildDate: Date
    newApartmentInstalledEquipment: Text
    newApartmentAdditionalInformation: Text 
    newApartmentDescription: Text
    newApartmentPhotoReferences: [Text]

updateApartmentAux: UpdateApartment -> Update ()
updateApartmentAux request = do
  (refCid, ref) <- fetchByKey @ApartmentProperty.R (request.propertyKey)
  cid <- exercise ref.cid ApartmentProperty.UpdateApartment with 
    newApartmentPrice = request.newApartmentPrice,
      newApartmentPropertyAddress = request.newApartmentPropertyAddress,
      newApartmentPropertyPostalCode= request.newApartmentPropertyPostalCode,
      newApartmentPropertyDistrict= request.newApartmentPropertyDistrict,
      newApartmentPropertyCounty= request.newApartmentPropertyCounty,
      newApartmentGrossArea= request.newApartmentGrossArea,
      newApartmentUsableArea= request.newApartmentUsableArea,
      newApartmentBedrooms= request.newApartmentBedrooms,
      newApartmentBathrooms= request.newApartmentBathrooms,
      newApartmentFloor= request.newApartmentFloor,
      newApartmentParkingSpaces= request.newApartmentParkingSpaces,
      newApartmentElevator= request.newApartmentElevator,
      newApartmentBuildDate= request.newApartmentBuildDate,
      newApartmentInstalledEquipment= request.newApartmentInstalledEquipment,
      newApartmentAdditionalInformation= request.newApartmentAdditionalInformation,
      newApartmentDescription= request.newApartmentDescription,
      newApartmentPhotoReferences= request.newApartmentPhotoReferences
  exercise refCid ApartmentProperty.SetCid with newCid = cid
  pure()

----------------------------------------------------------

data CreateLandPropertyRequest = CreateLandPropertyRequest
  with
    operator: Party
    user: Party
    id: Id
    landInstrument : InstrumentKey
    landPrice : Decimal
    propertyAddress: Text
    propertyPostalCode : Text
    propertyDistrict : Text
    propertyCounty : Text
    landType: LandType
    totalLandArea: Decimal
    minimumSurfaceForSale: Decimal
    buildableArea: Decimal
    buildableFloors: Int
    accessByRoad: Bool
    installedEquipment: Text
    viableConstructionTypes: [ViableConstructionTypes]
    additionalInformation: Text
    description: Text
    photoReferences: [Text]
    observers : PartiesMap
    permission: Permission

requestCreateLandPropertyAux : CreateLandPropertyRequest -> Update (ContractId RequestCreateLandProperty.I)
requestCreateLandPropertyAux request = do
  (_, credential) <-  fetchByKey @Credential (request.operator, request.user)
  permission <- UserUtil.hasPermission credential.roles request.permission
  assertMsg "You do not have permission to request the creation of a Land Property" permission 
  toInterfaceContractId <$> create RequestCreateLandProperty with 
    operator = request.operator
    user = request.user
    id = request.id
    landInstrument = request.landInstrument
    landPrice = request.landPrice
    propertyAddress = request.propertyAddress
    propertyPostalCode= request.propertyPostalCode
    propertyDistrict= request.propertyDistrict
    propertyCounty= request.propertyCounty
    landType= request.landType
    totalLandArea= request.totalLandArea
    minimumSurfaceForSale= request.minimumSurfaceForSale
    buildableArea= request.buildableArea
    buildableFloors= request.buildableFloors
    accessByRoad= request.accessByRoad
    installedEquipment= request.installedEquipment
    viableConstructionTypes= request.viableConstructionTypes
    additionalInformation= request.additionalInformation
    description= request.description
    photoReferences = request.photoReferences
    observers = request.observers

data CreateLandProperty = CreateLandProperty
  with
    operator : Party
    user : Party
    createLandPropertyRequest: ContractId RequestCreateLandProperty.I
    landPropertyFactoryCid: ContractId LandProperty.Factory 

createLandPropertyAux : CreateLandProperty -> Update (InstrumentKey, PropertyKey)
createLandPropertyAux request = do
  RequestCreateLandProperty.View{id,landInstrument,landPrice,propertyAddress,propertyPostalCode,propertyDistrict,propertyCounty,landType,totalLandArea,minimumSurfaceForSale,buildableArea,buildableFloors,accessByRoad,installedEquipment,viableConstructionTypes,additionalInformation,description,photoReferences,observers} <- view <$> fetchAndRemove request.createLandPropertyRequest
  let landProperty = PropertyKey with operator = request.operator, user = request.user, id = id
  exercise request.landPropertyFactoryCid LandProperty.Create with instrument = landInstrument, propertyKey = landProperty, ..
  pure (landInstrument,landProperty)

data UpdateLand = UpdateLand
  with
    operator: Party
    user: Party
    propertyKey: PropertyKey
    newLandPrice: Decimal
    newLandPropertyAddress: Text
    newLandPropertyPostalCode : Text
    newLandPropertyDistrict : Text
    newLandPropertyCounty : Text
    newLandType: LandType
    newLandTotalArea: Decimal
    newLandMinimumSurfaceForSale: Decimal
    newLandBuildableArea: Decimal
    newLandBuildableFloors: Int
    newLandAccessByRoad: Bool
    newLandInstalledEquipment: Text
    newLandViableConstructionTypes: [ViableConstructionTypes]
    newLandAdditionalInformation: Text 
    newLandDescription: Text
    newLandPhotoReferences: [Text]

updateLandAux: UpdateLand -> Update ()
updateLandAux request = do
  (refCid, ref) <- fetchByKey @LandProperty.R (request.propertyKey)
  cid <- exercise ref.cid LandProperty.UpdateLand with 
      newLandPrice = request.newLandPrice,
        newLandPropertyAddress = request.newLandPropertyAddress,
        newLandPropertyPostalCode = request.newLandPropertyPostalCode,
        newLandPropertyDistrict = request.newLandPropertyDistrict,
        newLandPropertyCounty = request.newLandPropertyCounty,
        newLandType = request.newLandType,
        newLandTotalArea = request.newLandTotalArea,
        newLandMinimumSurfaceForSale = request.newLandMinimumSurfaceForSale,
        newLandBuildableArea = request.newLandBuildableArea,
        newLandBuildableFloors = request.newLandBuildableFloors,
        newLandAccessByRoad = request.newLandAccessByRoad,
        newLandInstalledEquipment = request.newLandInstalledEquipment,
        newLandViableConstructionTypes = request.newLandViableConstructionTypes,
        newLandAdditionalInformation = request.newLandAdditionalInformation,
        newLandDescription = request.newLandDescription,
        newLandPhotoReferences = request.newLandPhotoReferences

  exercise refCid LandProperty.SetCid with newCid = cid
  pure()

----------------------------------------------------------

data CreateResidencePropertyRequest = CreateResidencePropertyRequest
  with
    operator: Party
    user: Party
    id: Id
    residenceInstrument : InstrumentKey
    residencePrice : Decimal
    propertyAddress: Text
    propertyPostalCode : Text
    propertyDistrict : Text
    propertyCounty : Text
    grossArea: Decimal
    usableArea: Decimal
    bedrooms: Int
    bathrooms: Int
    floors: Int
    residenceType: ResidenceType
    backyard: Text --m^2, frontwards, backwards...
    parking: Parking
    buildDate: Date
    orientation: Orientation
    installedEquipment: Text
    additionalInformation: Text 
    description: Text
    photoReferences: [Text]
    observers : PartiesMap
    permission: Permission

requestCreateResidencePropertyAux : CreateResidencePropertyRequest -> Update (ContractId RequestCreateResidenceProperty.I)
requestCreateResidencePropertyAux request = do
  (_, credential) <-  fetchByKey @Credential (request.operator, request.user)
  permission <- UserUtil.hasPermission credential.roles request.permission
  assertMsg "You do not have permission to request the creation of a Residence Property" permission 
  toInterfaceContractId <$> create RequestCreateResidenceProperty with 
    operator = request.operator
    user = request.user
    id = request.id
    residenceInstrument = request.residenceInstrument
    residencePrice = request.residencePrice
    propertyAddress = request.propertyAddress
    propertyPostalCode= request.propertyPostalCode
    propertyDistrict= request.propertyDistrict
    propertyCounty= request.propertyCounty
    grossArea = request.grossArea
    usableArea = request.usableArea
    bedrooms = request.bedrooms
    bathrooms = request.bathrooms
    floors = request.floors
    residenceType = request.residenceType
    backyard = request.backyard
    parking = request.parking
    buildDate = request.buildDate
    orientation = request.orientation
    installedEquipment = request.installedEquipment
    additionalInformation = request.additionalInformation
    description = request.description
    photoReferences = request.photoReferences
    observers = request.observers

data CreateResidenceProperty = CreateResidenceProperty
  with
    operator : Party
    user : Party
    createResidencePropertyRequest: ContractId RequestCreateResidenceProperty.I
    residencePropertyFactoryCid: ContractId ResidenceProperty.Factory 

createResidencePropertyAux : CreateResidenceProperty -> Update (InstrumentKey, PropertyKey)
createResidencePropertyAux request = do
  RequestCreateResidenceProperty.View{id,residenceInstrument,residencePrice,propertyAddress,propertyPostalCode,propertyDistrict,propertyCounty,grossArea,usableArea,bedrooms,bathrooms,floors,residenceType,backyard,parking,buildDate,orientation,installedEquipment,additionalInformation,description,photoReferences,observers} <- view <$> fetchAndRemove request.createResidencePropertyRequest
  let residenceProperty = PropertyKey with operator = request.operator, user = request.user, id = id
  exercise request.residencePropertyFactoryCid ResidenceProperty.Create with instrument = residenceInstrument, propertyKey = residenceProperty, ..
  pure (residenceInstrument, residenceProperty)

data UpdateResidence = UpdateResidence
  with
    operator: Party
    user: Party
    propertyKey: PropertyKey
    newResidencePrice : Decimal
    newResidencePropertyAddress : Text
    newResidencePropertyPostalCode : Text
    newResidencePropertyDistrict : Text
    newResidencePropertyCounty : Text
    newResidenceGrossArea : Decimal
    newResidenceUsableArea : Decimal
    newResidenceBedrooms : Int
    newResidenceBathrooms : Int
    newResidenceFloors : Int
    newResidenceType : ResidenceType
    newResidenceBackyard : Text
    newResidenceParking : Parking
    newResidenceBuildDate : Date
    newResidenceOrientation : Orientation
    newResidenceInstalledEquipment : Text
    newResidenceAdditionalInformation : Text
    newResidenceDescription : Text
    newResidencePhotoReferences : [Text]

updateResidenceAux: UpdateResidence -> Update ()
updateResidenceAux request = do
  (refCid, ref) <- fetchByKey @ResidenceProperty.R (request.propertyKey)
  cid <- exercise ref.cid ResidenceProperty.UpdateResidence with 
    newResidencePrice = request.newResidencePrice,
      newResidencePropertyAddress= request.newResidencePropertyAddress,
      newResidencePropertyPostalCode= request.newResidencePropertyPostalCode,
      newResidencePropertyDistrict= request.newResidencePropertyDistrict,
      newResidencePropertyCounty= request.newResidencePropertyCounty,
      newResidenceGrossArea= request.newResidenceGrossArea,
      newResidenceUsableArea= request.newResidenceUsableArea,
      newResidenceBedrooms= request.newResidenceBedrooms,
      newResidenceBathrooms= request.newResidenceBathrooms,
      newResidenceFloors = request.newResidenceFloors,
      newResidenceType = request.newResidenceType,
      newResidenceBackyard = request.newResidenceBackyard,
      newResidenceParking = request.newResidenceParking,
      newResidenceBuildDate = request.newResidenceBuildDate,
      newResidenceOrientation = request.newResidenceOrientation,
      newResidenceInstalledEquipment = request.newResidenceInstalledEquipment,
      newResidenceAdditionalInformation = request.newResidenceAdditionalInformation,
      newResidenceDescription = request.newResidenceDescription,
      newResidencePhotoReferences  = request.newResidencePhotoReferences
  exercise refCid ResidenceProperty.SetCid with newCid = cid
  pure()

------------------------------------------------------------------------------

data CreateGaragePropertyRequest = CreateGaragePropertyRequest
  with
    operator: Party
    user: Party
    id: Id
    garageInstrument : InstrumentKey
    garagePrice : Decimal
    propertyAddress: Text
    propertyPostalCode : Text
    propertyDistrict : Text
    propertyCounty : Text
    garageArea: Decimal
    garageType: GarageType
    vehicleCapacity: Int
    installedEquipment: Text
    additionalInformation: Text
    description: Text
    photoReferences: [Text]
    observers : PartiesMap
    permission: Permission

requestCreateGaragePropertyAux : CreateGaragePropertyRequest -> Update (ContractId RequestCreateGarageProperty.I)
requestCreateGaragePropertyAux request = do
  (_, credential) <-  fetchByKey @Credential (request.operator, request.user)
  permission <- UserUtil.hasPermission credential.roles request.permission
  assertMsg "You do not have permission to request the creation of a Garage Property" permission 
  toInterfaceContractId <$> create RequestCreateGarageProperty with 
    operator = request.operator
    user = request.user
    id = request.id
    garageInstrument = request.garageInstrument
    garagePrice = request.garagePrice
    propertyAddress = request.propertyAddress
    propertyPostalCode= request.propertyPostalCode
    propertyDistrict= request.propertyDistrict
    propertyCounty= request.propertyCounty
    garageArea = request.garageArea
    garageType = request.garageType
    vehicleCapacity = request.vehicleCapacity
    installedEquipment = request.installedEquipment
    additionalInformation = request.additionalInformation
    description = request.description
    photoReferences = request.photoReferences
    observers = request.observers

data CreateGarageProperty = CreateGarageProperty
  with
    operator : Party
    user : Party
    createGaragePropertyRequest: ContractId RequestCreateGarageProperty.I
    garagePropertyFactoryCid: ContractId GarageProperty.Factory 

createGaragePropertyAux : CreateGarageProperty -> Update (InstrumentKey, PropertyKey)
createGaragePropertyAux request = do
  RequestCreateGarageProperty.View{id,garageInstrument,garagePrice,propertyAddress,propertyPostalCode,propertyDistrict,propertyCounty,garageArea,garageType, vehicleCapacity,installedEquipment,additionalInformation,description,photoReferences,observers} <- view <$> fetchAndRemove request.createGaragePropertyRequest
  let garageProperty = PropertyKey with operator = request.operator, user = request.user, id = id
  exercise request.garagePropertyFactoryCid GarageProperty.Create with instrument = garageInstrument, propertyKey = garageProperty, ..
  pure (garageInstrument, garageProperty)

data UpdateGarage = UpdateGarage
  with
    operator: Party
    user: Party
    propertyKey: PropertyKey
    newGaragePrice: Decimal
    newGaragePropertyAddress: Text
    newGaragePropertyPostalCode : Text
    newGaragePropertyDistrict : Text
    newGaragePropertyCounty : Text
    newGarageArea: Decimal
    newGarageType: GarageType
    newGarageVehicleCapacity: Int
    newGarageInstalledEquipment: Text
    newGarageAdditionalInformation: Text 
    newGarageDescription: Text
    newGaragePhotoReferences: [Text]

updateGarageAux: UpdateGarage -> Update ()
updateGarageAux request = do
  (refCid, ref) <- fetchByKey @GarageProperty.R (request.propertyKey)
  cid <- exercise ref.cid GarageProperty.UpdateGarage with 
    newGaragePrice = request.newGaragePrice,
      newGaragePropertyAddress = request.newGaragePropertyAddress,
      newGaragePropertyPostalCode = request.newGaragePropertyPostalCode,
      newGaragePropertyDistrict = request.newGaragePropertyDistrict,
      newGaragePropertyCounty = request.newGaragePropertyCounty,
      newGarageArea = request.newGarageArea,
      newGarageType = request.newGarageType,
      newGarageVehicleCapacity = request.newGarageVehicleCapacity,
      newGarageInstalledEquipment = request.newGarageInstalledEquipment,
      newGarageAdditionalInformation = request.newGarageAdditionalInformation,
      newGarageDescription = request.newGarageDescription,
      newGaragePhotoReferences = request.newGaragePhotoReferences
  exercise refCid GarageProperty.SetCid with newCid = cid
  pure()

----------------------------------------------------------

data CreateWarehousePropertyRequest = CreateWarehousePropertyRequest
  with
    operator: Party
    user: Party
    id: Id
    warehouseInstrument: InstrumentKey
    warehousePrice : Decimal
    propertyAddress: Text
    propertyPostalCode : Text
    propertyDistrict : Text
    propertyCounty : Text
    warehouseType: WarehouseType 
    grossArea: Decimal
    usableArea: Decimal
    floors: Int
    buildDate: Date
    installedEquipment: Text
    additionalInformation: Text
    description: Text
    photoReferences: [Text]
    observers : PartiesMap
    permission: Permission

requestCreateWarehousePropertyAux : CreateWarehousePropertyRequest -> Update (ContractId RequestCreateWarehouseProperty.I)
requestCreateWarehousePropertyAux request = do
  (_, credential) <-  fetchByKey @Credential (request.operator, request.user)
  permission <- UserUtil.hasPermission credential.roles request.permission
  assertMsg "You do not have permission to request the creation of a Warehouse Property" permission 
  toInterfaceContractId <$> create RequestCreateWarehouseProperty with 
    operator = request.operator
    user = request.user
    id = request.id
    warehouseInstrument = request.warehouseInstrument
    warehousePrice = request.warehousePrice
    propertyAddress = request.propertyAddress
    propertyPostalCode= request.propertyPostalCode
    propertyDistrict= request.propertyDistrict
    propertyCounty= request.propertyCounty
    warehouseType = request.warehouseType
    grossArea = request.grossArea
    usableArea = request.usableArea
    floors = request.floors
    buildDate = request.buildDate
    installedEquipment = request.installedEquipment
    additionalInformation = request.additionalInformation
    description = request.description
    photoReferences = request.photoReferences
    observers = request.observers

data CreateWarehouseProperty = CreateWarehouseProperty
  with
    operator : Party
    user : Party
    createWarehousePropertyRequest: ContractId RequestCreateWarehouseProperty.I
    warehousePropertyFactoryCid: ContractId WarehouseProperty.Factory 

createWarehousePropertyAux : CreateWarehouseProperty -> Update (InstrumentKey, PropertyKey)
createWarehousePropertyAux request = do
  RequestCreateWarehouseProperty.View{id,warehouseInstrument,warehousePrice,propertyAddress,propertyPostalCode,propertyDistrict,propertyCounty,warehouseType,grossArea,usableArea,floors,buildDate,installedEquipment,additionalInformation,description,photoReferences,observers} <- view <$> fetchAndRemove request.createWarehousePropertyRequest
  let warehouseProperty = PropertyKey with operator = request.operator, user = request.user, id = id
  exercise request.warehousePropertyFactoryCid WarehouseProperty.Create with instrument = warehouseInstrument, propertyKey = warehouseProperty, ..
  pure (warehouseInstrument, warehouseProperty)

data UpdateWarehouse = UpdateWarehouse
  with
    operator: Party
    user: Party
    propertyKey: PropertyKey
    newWarehousePrice : Decimal
    newWarehousePropertyAddress : Text
    newWarehousePropertyPostalCode : Text
    newWarehousePropertyDistrict : Text
    newWarehousePropertyCounty : Text
    newWarehouseType : WarehouseType
    newWarehouseGrossArea : Decimal
    newWarehouseUsableArea : Decimal
    newWarehouseFloors : Int
    newWarehouseBuildDate : Date
    newWarehouseInstalledEquipment : Text
    newWarehouseAdditionalInformation : Text
    newWarehouseDescription : Text
    newWarehousePhotoReferences : [Text]

updateWarehouseAux: UpdateWarehouse -> Update ()
updateWarehouseAux request = do
  (refCid, ref) <- fetchByKey @WarehouseProperty.R (request.propertyKey)
  cid <- exercise ref.cid WarehouseProperty.UpdateWarehouse with 
    newWarehousePrice = request.newWarehousePrice,
      newWarehousePropertyAddress = request.newWarehousePropertyAddress,
      newWarehousePropertyPostalCode = request.newWarehousePropertyPostalCode,
      newWarehousePropertyDistrict = request.newWarehousePropertyDistrict,
      newWarehousePropertyCounty = request.newWarehousePropertyCounty,
      newWarehouseType = request.newWarehouseType,
      newWarehouseGrossArea = request.newWarehouseGrossArea,
      newWarehouseUsableArea = request.newWarehouseUsableArea,
      newWarehouseFloors = request.newWarehouseFloors,
      newWarehouseBuildDate = request.newWarehouseBuildDate,
      newWarehouseInstalledEquipment = request.newWarehouseInstalledEquipment,
      newWarehouseAdditionalInformation = request.newWarehouseAdditionalInformation,
      newWarehouseDescription = request.newWarehouseDescription,
      newWarehousePhotoReferences = request.newWarehousePhotoReferences
  exercise refCid WarehouseProperty.SetCid with newCid = cid
  pure()
