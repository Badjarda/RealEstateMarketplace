module App.PropertyManager.Util where

import Interface.RoleManager.UserRole.Permission
import Interface.Common.Types (PropertyKey(..))
import Interface.Common.Util (fetchAndRemove)
import Interface.PropertyManager.Property.Common (GarageType, LandType, ViableConstructionTypes, ResidenceType, Parking, Orientation, WarehouseType)

import Interface.PropertyManager.Property.ApartmentProperty.ApartmentProperty qualified as ApartmentProperty (R(..), SetApartmentInstrumentKey(..), GetApartmentPrice(..), SetApartmentPrice(..),SetApartmentPropertyAddress(..), SetApartmentPropertyPostalCode(..), SetApartmentPropertyDistrict(..), SetApartmentPropertyCounty(..), SetApartmentGrossArea(..), SetApartmentUsableArea(..), SetApartmentBedrooms(..), SetApartmentBathrooms(..), SetApartmentFloor(..), SetApartmentParkingSpaces(..), SetApartmentElevator(..), SetApartmentBuildDate(..), SetApartmentInstalledEquipment(..), SetApartmentAdditionalInformation(..), SetApartmentDescription(..), SetCid(..))
import Interface.PropertyManager.Property.LandProperty.LandProperty qualified as LandProperty(R(..), SetLandInstrumentKey(..), SetLandPrice(..), SetLandPropertyAddress(..), SetLandPropertyPostalCode(..), SetLandPropertyDistrict(..), SetLandPropertyCounty(..), SetLandType(..), SetTotalLandArea(..), SetLandMinimumSurfaceForSale(..), SetLandBuildableArea(..), SetLandBuildableFloors(..), SetLandAccessByRoad(..), SetLandViableConstructionTypes(..), SetLandInstalledEquipment(..), SetLandAdditionalInformation(..), SetLandDescription(..), SetCid(..))
import Interface.PropertyManager.Property.ResidenceProperty.ResidenceProperty qualified as ResidenceProperty (R(..), SetResidenceInstrumentKey(..), SetResidencePrice(..), SetResidencePropertyAddress(..), SetResidencePropertyPostalCode(..), SetResidencePropertyDistrict(..), SetResidencePropertyCounty(..), SetResidenceGrossArea(..), SetResidenceUsableArea(..), SetResidenceBedrooms(..), SetResidenceBathrooms(..), SetResidenceFloors(..), SetResidenceType(..), SetResidenceBackyard(..), SetResidenceParking(..), SetResidenceBuildDate(..), SetResidenceOrientation(..), SetResidenceInstalledEquipment(..), SetResidenceAdditionalInformation(..), SetResidenceDescription(..), SetCid(..))
import Interface.PropertyManager.Property.GarageProperty.GarageProperty qualified as GarageProperty (R(..), SetGarageInstrumentKey(..), SetGaragePrice(..), SetGaragePropertyAddress(..), SetGaragePropertyPostalCode(..), SetGaragePropertyDistrict(..), SetGaragePropertyCounty(..), SetGarageArea(..), SetGarageType(..), SetVehicleCapacity(..), SetGarageInstalledEquipment(..), SetGarageAdditionalInformation(..), SetGarageDescription(..), SetCid(..))
import Interface.PropertyManager.Property.WarehouseProperty.WarehouseProperty qualified as WarehouseProperty (R(..), SetWarehouseInstrumentKey(..), SetWarehousePrice(..), SetWarehousePropertyAddress(..), SetWarehousePropertyPostalCode(..), SetWarehousePropertyDistrict(..), SetWarehousePropertyCounty(..), SetWarehouseType(..), SetWarehouseGrossArea(..), SetWarehouseUsableArea(..), SetWarehouseFloors(..), SetWarehouseBuildDate(..), SetWarehouseInstalledEquipment(..), SetWarehouseAdditionalInformation(..), SetWarehouseDescription(..),SetCid(..))

import Interface.PropertyManager.Choices.RequestCreateApartmentProperty qualified as RequestCreateApartmentProperty (I, View(..))
import Interface.PropertyManager.Choices.RequestCreateLandProperty qualified as RequestCreateLandProperty (I, View(..))
import Interface.PropertyManager.Choices.RequestCreateResidenceProperty qualified as RequestCreateResidenceProperty (I, View(..))
import Interface.PropertyManager.Choices.RequestCreateGarageProperty qualified as RequestCreateGarageProperty (I, View(..))
import Interface.PropertyManager.Choices.RequestCreateWarehouseProperty qualified as RequestCreateWarehouseProperty (I, View(..))

import App.Util qualified as UserUtil (hasPermission)
import App.Credential.Credential
import App.PropertyManager.Model

import Interface.PropertyManager.Property.ApartmentProperty.Factory qualified as ApartmentProperty(Factory(..), Create(..))
import Interface.PropertyManager.Property.LandProperty.Factory qualified as LandProperty(Factory(..), Create(..))
import Interface.PropertyManager.Property.ResidenceProperty.Factory qualified as ResidenceProperty(Factory(..), Create(..))
import Interface.PropertyManager.Property.GarageProperty.Factory qualified as GarageProperty(Factory(..), Create(..))
import Interface.PropertyManager.Property.WarehouseProperty.Factory qualified as WarehouseProperty(Factory(..), Create(..))

import Daml.Finance.Interface.Types.Common.Types (Id(..), InstrumentKey(..), PartiesMap)

data CreateApartmentPropertyRequest = CreateApartmentPropertyRequest
  with
    operator: Party
    user: Party
    id: Id
    apartmentInstrument: InstrumentKey
    apartmentPrice : Decimal
    propertyAddress: Text
    propertyPostalCode : Text
    propertyDistrict : Text
    propertyCounty : Text
    grossArea: Decimal
    usableArea: Decimal
    bedrooms: Int
    bathrooms: Int
    floor: Int
    parkingSpaces: Int
    elevator: Bool
    buildDate: Date
    installedEquipment: Text
    additionalInformation: Text
    description: Text
    observers : PartiesMap
    permission: Permission
    apartmentPropertyFactoryCid: ContractId ApartmentProperty.Factory 

requestCreateApartmentPropertyAux : CreateApartmentPropertyRequest -> Update (ContractId RequestCreateApartmentProperty.I)
requestCreateApartmentPropertyAux request = do
  (_, credential) <-  fetchByKey @Credential (request.operator, request.user)
  permission <- UserUtil.hasPermission credential.roles request.permission
  assertMsg "You do not have permission to the creation of a Apartment Property" permission 
  toInterfaceContractId <$> create RequestCreateApartmentProperty with 
      operator = request.operator
      user = request.user
      id = request.id
      apartmentInstrument = request.apartmentInstrument
      apartmentPrice = request.apartmentPrice
      propertyAddress = request.propertyAddress
      propertyPostalCode = request.propertyPostalCode 
      propertyDistrict = request.propertyDistrict
      propertyCounty = request.propertyCounty
      grossArea = request.grossArea
      usableArea = request.usableArea
      bedrooms = request.bedrooms
      bathrooms = request.bathrooms
      floor = request.floor
      parkingSpaces = request.parkingSpaces
      elevator = request.elevator
      buildDate = request.buildDate
      installedEquipment = request.installedEquipment
      additionalInformation = request.additionalInformation
      description = request.description
      observers = request.observers

data CreateApartmentProperty = CreateApartmentProperty
  with
    operator : Party
    user : Party
    createApartmentPropertyRequest: ContractId RequestCreateApartmentProperty.I
    apartmentPropertyFactoryCid: ContractId ApartmentProperty.Factory 

createApartmentPropertyAux : CreateApartmentProperty -> Update (InstrumentKey, PropertyKey)
createApartmentPropertyAux request = do
  RequestCreateApartmentProperty.View{id,apartmentInstrument,apartmentPrice,propertyAddress,propertyPostalCode,propertyDistrict,propertyCounty,grossArea,usableArea,bedrooms,bathrooms,floor,parkingSpaces,elevator,buildDate,installedEquipment,additionalInformation,description,observers} <- view <$> fetchAndRemove request.createApartmentPropertyRequest
  let apartmentProperty = PropertyKey with operator = request.operator, user = request.user, id = id
  exercise request.apartmentPropertyFactoryCid ApartmentProperty.Create with instrument = apartmentInstrument, propertyKey = apartmentProperty, ..
  pure (apartmentInstrument,apartmentProperty)

data UpdateApartmentInstrumentKey = UpdateApartmentInstrumentKey
  with
    operator: Party
    user: Party
    propertyKey: PropertyKey
    newApartmentInstrumentKey: InstrumentKey

updateApartmentInstrumentKeyAux: UpdateApartmentInstrumentKey -> Update ()
updateApartmentInstrumentKeyAux request = do
  (refCid, ref) <- fetchByKey @ApartmentProperty.R (request.propertyKey)
  cid <- exercise ref.cid ApartmentProperty.SetApartmentInstrumentKey with newApartmentInstrumentKey = request.newApartmentInstrumentKey
  exercise refCid ApartmentProperty.SetCid with newCid = cid
  pure()

data UpdateApartmentPrice = UpdateApartmentPrice
  with
    operator: Party
    user: Party
    propertyKey: PropertyKey
    newApartmentPrice: Decimal

updateApartmentPriceAux: UpdateApartmentPrice -> Update ()
updateApartmentPriceAux request = do
  (refCid, ref) <- fetchByKey @ApartmentProperty.R (request.propertyKey)
  cid <- exercise ref.cid ApartmentProperty.SetApartmentPrice with newApartmentPrice = request.newApartmentPrice
  price <- exercise ref.cid ApartmentProperty.GetApartmentPrice
  exercise refCid ApartmentProperty.SetCid with newCid = cid
  pure()

data UpdateApartmentPropertyAddress = UpdateApartmentPropertyAddress
  with
    operator: Party
    user: Party
    propertyKey: PropertyKey
    newApartmentPropertyAddress: Text

updateApartmentPropertyAdressAux: UpdateApartmentPropertyAddress -> Update ()
updateApartmentPropertyAdressAux request = do
  (refCid, ref) <- fetchByKey @ApartmentProperty.R (request.propertyKey)
  cid <- exercise ref.cid ApartmentProperty.SetApartmentPropertyAddress with newApartmentPropertyAddress = request.newApartmentPropertyAddress
  exercise refCid ApartmentProperty.SetCid with newCid = cid
  pure()

data UpdateApartmentPropertyPostalCode = UpdateApartmentPropertyPostalCode
  with
    operator: Party
    user: Party
    propertyKey: PropertyKey
    newApartmentPropertyPostalCode: Text

updateApartmentPropertyPostalCodeAux: UpdateApartmentPropertyPostalCode -> Update ()
updateApartmentPropertyPostalCodeAux request = do
  (refCid, ref) <- fetchByKey @ApartmentProperty.R (request.propertyKey)
  cid <- exercise ref.cid ApartmentProperty.SetApartmentPropertyPostalCode with newApartmentPropertyPostalCode = request.newApartmentPropertyPostalCode
  exercise refCid ApartmentProperty.SetCid with newCid = cid
  pure()

data UpdateApartmentPropertyDistrict = UpdateApartmentPropertyDistrict
  with
    operator: Party
    user: Party
    propertyKey: PropertyKey
    newApartmentPropertyDistrict: Text

updateApartmentPropertyDistrictAux: UpdateApartmentPropertyDistrict -> Update ()
updateApartmentPropertyDistrictAux request = do
  (refCid, ref) <- fetchByKey @ApartmentProperty.R (request.propertyKey)
  cid <- exercise ref.cid ApartmentProperty.SetApartmentPropertyDistrict with newApartmentPropertyDistrict = request.newApartmentPropertyDistrict
  exercise refCid ApartmentProperty.SetCid with newCid = cid
  pure()

data UpdateApartmentPropertyCounty = UpdateApartmentPropertyCounty
  with
    operator: Party
    user: Party
    propertyKey: PropertyKey
    newApartmentPropertyCounty: Text

updateApartmentPropertyCountyAux: UpdateApartmentPropertyCounty -> Update ()
updateApartmentPropertyCountyAux request = do
  (refCid, ref) <- fetchByKey @ApartmentProperty.R (request.propertyKey)
  cid <- exercise ref.cid ApartmentProperty.SetApartmentPropertyCounty with newApartmentPropertyCounty = request.newApartmentPropertyCounty
  exercise refCid ApartmentProperty.SetCid with newCid = cid
  pure()


data UpdateApartmentGrossArea = UpdateApartmentGrossArea
  with
    operator: Party
    user: Party
    propertyKey: PropertyKey
    newApartmentGrossArea: Decimal

updateApartmentGrossAreaAux: UpdateApartmentGrossArea -> Update ()
updateApartmentGrossAreaAux request = do
  (refCid, ref) <- fetchByKey @ApartmentProperty.R (request.propertyKey)
  cid <- exercise ref.cid ApartmentProperty.SetApartmentGrossArea with newApartmentGrossArea = request.newApartmentGrossArea
  exercise refCid ApartmentProperty.SetCid with newCid = cid
  pure()

data UpdateApartmentUsableArea = UpdateApartmentUsableArea
  with
    operator: Party
    user: Party
    propertyKey: PropertyKey
    newApartmentUsableArea: Decimal

updateApartmentUsableAreaAux: UpdateApartmentUsableArea -> Update ()
updateApartmentUsableAreaAux request = do
  (refCid, ref) <- fetchByKey @ApartmentProperty.R (request.propertyKey)
  cid <- exercise ref.cid ApartmentProperty.SetApartmentUsableArea with newApartmentUsableArea = request.newApartmentUsableArea
  exercise refCid ApartmentProperty.SetCid with newCid = cid
  pure()

data UpdateApartmentBedrooms = UpdateApartmentBedrooms
  with
    operator: Party
    user: Party
    propertyKey: PropertyKey
    newApartmentBedrooms: Int

updateApartmentBedroomsAux: UpdateApartmentBedrooms -> Update ()
updateApartmentBedroomsAux request = do
  (refCid, ref) <- fetchByKey @ApartmentProperty.R (request.propertyKey)
  cid <- exercise ref.cid ApartmentProperty.SetApartmentBedrooms with newApartmentBedrooms = request.newApartmentBedrooms
  exercise refCid ApartmentProperty.SetCid with newCid = cid
  pure()

data UpdateApartmentBathrooms = UpdateApartmentBathrooms
  with
    operator: Party
    user: Party
    propertyKey: PropertyKey
    newApartmentBathrooms: Int

updateApartmentBathroomsAux: UpdateApartmentBathrooms -> Update ()
updateApartmentBathroomsAux request = do
  (refCid, ref) <- fetchByKey @ApartmentProperty.R (request.propertyKey)
  cid <- exercise ref.cid ApartmentProperty.SetApartmentBathrooms with newApartmentBathrooms = request.newApartmentBathrooms
  exercise refCid ApartmentProperty.SetCid with newCid = cid
  pure()

data UpdateApartmentFloor = UpdateApartmentFloor
  with
    operator: Party
    user: Party
    propertyKey: PropertyKey
    newApartmentFloor: Int

updateApartmentFloorAux: UpdateApartmentFloor -> Update ()
updateApartmentFloorAux request = do
  (refCid, ref) <- fetchByKey @ApartmentProperty.R (request.propertyKey)
  cid <- exercise ref.cid ApartmentProperty.SetApartmentFloor with newApartmentFloor = request.newApartmentFloor
  exercise refCid ApartmentProperty.SetCid with newCid = cid
  pure()

data UpdateApartmentParkingSpaces = UpdateApartmentParkingSpaces
  with
    operator: Party
    user: Party
    propertyKey: PropertyKey
    newApartmentParkingSpaces: Int

updateApartmentParkingSpacesAux: UpdateApartmentParkingSpaces -> Update ()
updateApartmentParkingSpacesAux request = do
  (refCid, ref) <- fetchByKey @ApartmentProperty.R (request.propertyKey)
  cid <- exercise ref.cid ApartmentProperty.SetApartmentParkingSpaces with newApartmentParkingSpaces = request.newApartmentParkingSpaces
  exercise refCid ApartmentProperty.SetCid with newCid = cid
  pure()

data UpdateApartmentElevator = UpdateApartmentElevator
  with
    operator: Party
    user: Party
    propertyKey: PropertyKey
    newApartmentElevator: Bool

updateApartmentElevatorAux: UpdateApartmentElevator -> Update ()
updateApartmentElevatorAux request = do
  (refCid, ref) <- fetchByKey @ApartmentProperty.R (request.propertyKey)
  cid <- exercise ref.cid ApartmentProperty.SetApartmentElevator with newApartmentElevator = request.newApartmentElevator
  exercise refCid ApartmentProperty.SetCid with newCid = cid
  pure()

data UpdateApartmentBuildDate = UpdateApartmentBuildDate
  with
    operator: Party
    user: Party
    propertyKey: PropertyKey
    newApartmentBuildDate: Date

updateApartmentBuildDateAux: UpdateApartmentBuildDate -> Update ()
updateApartmentBuildDateAux request = do
  (refCid, ref) <- fetchByKey @ApartmentProperty.R (request.propertyKey)
  cid <- exercise ref.cid ApartmentProperty.SetApartmentBuildDate with newApartmentBuildDate = request.newApartmentBuildDate
  exercise refCid ApartmentProperty.SetCid with newCid = cid
  pure()

data UpdateApartmentInstalledEquipment = UpdateApartmentInstalledEquipment
  with
    operator: Party
    user: Party
    propertyKey: PropertyKey
    newApartmentInstalledEquipment: Text

updateApartmentInstalledEquipmentAux: UpdateApartmentInstalledEquipment -> Update ()
updateApartmentInstalledEquipmentAux request = do
  (refCid, ref) <- fetchByKey @ApartmentProperty.R (request.propertyKey)
  cid <- exercise ref.cid ApartmentProperty.SetApartmentInstalledEquipment with newApartmentInstalledEquipment = request.newApartmentInstalledEquipment
  exercise refCid ApartmentProperty.SetCid with newCid = cid
  pure()

data UpdateApartmentAdditionalInformation = UpdateApartmentAdditionalInformation
  with
    operator: Party
    user: Party
    propertyKey: PropertyKey
    newApartmentAdditionalInformation: Text

updateApartmentAdditionalInformationAux: UpdateApartmentAdditionalInformation -> Update ()
updateApartmentAdditionalInformationAux request = do
  (refCid, ref) <- fetchByKey @ApartmentProperty.R (request.propertyKey)
  cid <- exercise ref.cid ApartmentProperty.SetApartmentAdditionalInformation with newApartmentAdditionalInformation = request.newApartmentAdditionalInformation
  exercise refCid ApartmentProperty.SetCid with newCid = cid
  pure()

data UpdateApartmentDescription = UpdateApartmentDescription
  with
    operator: Party
    user: Party
    propertyKey: PropertyKey
    newApartmentDescription: Text

updateApartmentDescriptionAux: UpdateApartmentDescription -> Update ()
updateApartmentDescriptionAux request = do
  (refCid, ref) <- fetchByKey @ApartmentProperty.R (request.propertyKey)
  cid <- exercise ref.cid ApartmentProperty.SetApartmentDescription with newApartmentDescription = request.newApartmentDescription
  exercise refCid ApartmentProperty.SetCid with newCid = cid
  pure()

----------------------------------------------------------

data CreateLandPropertyRequest = CreateLandPropertyRequest
  with
    operator: Party
    user: Party
    id: Id
    landInstrument : InstrumentKey
    landPrice : Decimal
    propertyAddress: Text
    propertyPostalCode : Text
    propertyDistrict : Text
    propertyCounty : Text
    landType: LandType
    totalLandArea: Decimal
    minimumSurfaceForSale: Decimal
    buildableArea: Decimal
    buildableFloors: Int
    accessByRoad: Bool
    installedEquipment: Text
    viableConstructionTypes: [ViableConstructionTypes]
    additionalInformation: Text
    description: Text
    observers : PartiesMap
    permission: Permission

requestCreateLandPropertyAux : CreateLandPropertyRequest -> Update (ContractId RequestCreateLandProperty.I)
requestCreateLandPropertyAux request = do
  (_, credential) <-  fetchByKey @Credential (request.operator, request.user)
  permission <- UserUtil.hasPermission credential.roles request.permission
  assertMsg "You do not have permission to request the creation of a Land Property" permission 
  toInterfaceContractId <$> create RequestCreateLandProperty with 
    operator = request.operator
    user = request.user
    id = request.id
    landInstrument = request.landInstrument
    landPrice = request.landPrice
    propertyAddress = request.propertyAddress
    propertyPostalCode= request.propertyPostalCode
    propertyDistrict= request.propertyDistrict
    propertyCounty= request.propertyCounty
    landType= request.landType
    totalLandArea= request.totalLandArea
    minimumSurfaceForSale= request.minimumSurfaceForSale
    buildableArea= request.buildableArea
    buildableFloors= request.buildableFloors
    accessByRoad= request.accessByRoad
    installedEquipment= request.installedEquipment
    viableConstructionTypes= request.viableConstructionTypes
    additionalInformation= request.additionalInformation
    description= request.description
    observers = request.observers

data CreateLandProperty = CreateLandProperty
  with
    operator : Party
    user : Party
    createLandPropertyRequest: ContractId RequestCreateLandProperty.I
    landPropertyFactoryCid: ContractId LandProperty.Factory 

createLandPropertyAux : CreateLandProperty -> Update (InstrumentKey, PropertyKey)
createLandPropertyAux request = do
  RequestCreateLandProperty.View{id,landInstrument,landPrice,propertyAddress,propertyPostalCode,propertyDistrict,propertyCounty,landType,totalLandArea,minimumSurfaceForSale,buildableArea,buildableFloors,accessByRoad,installedEquipment,viableConstructionTypes,additionalInformation,description,observers} <- view <$> fetchAndRemove request.createLandPropertyRequest
  let landProperty = PropertyKey with operator = request.operator, user = request.user, id = id
  exercise request.landPropertyFactoryCid LandProperty.Create with instrument = landInstrument, propertyKey = landProperty, ..
  pure (landInstrument,landProperty)

data UpdateLandInstrumentKey = UpdateLandInstrumentKey
  with
    operator: Party
    user: Party
    propertyKey: PropertyKey
    newLandInstrumentKey: InstrumentKey

updateLandInstrumentKeyAux: UpdateLandInstrumentKey -> Update ()
updateLandInstrumentKeyAux request = do
  (refCid, ref) <- fetchByKey @LandProperty.R (request.propertyKey)
  cid <- exercise ref.cid LandProperty.SetLandInstrumentKey with newLandInstrumentKey = request.newLandInstrumentKey
  exercise refCid LandProperty.SetCid with newCid = cid
  pure()

data UpdateLandPrice = UpdateLandPrice
  with
    operator: Party
    user: Party
    propertyKey: PropertyKey
    newLandPrice: Decimal

updateLandPriceAux: UpdateLandPrice -> Update ()
updateLandPriceAux request = do
  (refCid, ref) <- fetchByKey @LandProperty.R (request.propertyKey)
  cid <- exercise ref.cid LandProperty.SetLandPrice with newLandPrice = request.newLandPrice
  exercise refCid LandProperty.SetCid with newCid = cid
  pure()

data UpdateLandPropertyAddress = UpdateLandPropertyAddress
  with
    operator: Party
    user: Party
    propertyKey: PropertyKey
    newLandPropertyAddress: Text

updateLandPropertyAdressAux: UpdateLandPropertyAddress -> Update ()
updateLandPropertyAdressAux request = do
  (refCid, ref) <- fetchByKey @LandProperty.R (request.propertyKey)
  cid <- exercise ref.cid LandProperty.SetLandPropertyAddress with newLandPropertyAddress = request.newLandPropertyAddress
  exercise refCid LandProperty.SetCid with newCid = cid
  pure()

data UpdateLandPropertyPostalCode = UpdateLandPropertyPostalCode
  with
    operator: Party
    user: Party
    propertyKey: PropertyKey
    newLandPropertyPostalCode: Text

updateLandPropertyPostalCodeAux: UpdateLandPropertyPostalCode -> Update ()
updateLandPropertyPostalCodeAux request = do
  (refCid, ref) <- fetchByKey @LandProperty.R (request.propertyKey)
  cid <- exercise ref.cid LandProperty.SetLandPropertyPostalCode with newLandPropertyPostalCode = request.newLandPropertyPostalCode
  exercise refCid LandProperty.SetCid with newCid = cid
  pure()

data UpdateLandPropertyDistrict = UpdateLandPropertyDistrict
  with
    operator: Party
    user: Party
    propertyKey: PropertyKey
    newLandPropertyDistrict: Text

updateLandPropertyDistrictAux: UpdateLandPropertyDistrict -> Update ()
updateLandPropertyDistrictAux request = do
  (refCid, ref) <- fetchByKey @LandProperty.R (request.propertyKey)
  cid <- exercise ref.cid LandProperty.SetLandPropertyDistrict with newLandPropertyDistrict = request.newLandPropertyDistrict
  exercise refCid LandProperty.SetCid with newCid = cid
  pure()

data UpdateLandPropertyCounty = UpdateLandPropertyCounty
  with
    operator: Party
    user: Party
    propertyKey: PropertyKey
    newLandPropertyCounty: Text

updateLandPropertyCountyAux: UpdateLandPropertyCounty -> Update ()
updateLandPropertyCountyAux request = do
  (refCid, ref) <- fetchByKey @LandProperty.R (request.propertyKey)
  cid <- exercise ref.cid LandProperty.SetLandPropertyCounty with newLandPropertyCounty = request.newLandPropertyCounty
  exercise refCid LandProperty.SetCid with newCid = cid
  pure()

data UpdateLandType = UpdateLandType
  with
    operator: Party
    user: Party
    propertyKey: PropertyKey
    newLandType: LandType

updateLandTypeAux: UpdateLandType -> Update ()
updateLandTypeAux request = do
  (refCid, ref) <- fetchByKey @LandProperty.R (request.propertyKey)
  cid <- exercise ref.cid LandProperty.SetLandType with newLandType = request.newLandType
  exercise refCid LandProperty.SetCid with newCid = cid
  pure()

data UpdateTotalLandArea = UpdateTotalLandArea
  with
    operator: Party
    user: Party
    propertyKey: PropertyKey
    newTotalLandArea: Decimal

updateTotalLandAreaAux: UpdateTotalLandArea -> Update ()
updateTotalLandAreaAux request = do
  (refCid, ref) <- fetchByKey @LandProperty.R (request.propertyKey)
  cid <- exercise ref.cid LandProperty.SetTotalLandArea with newTotalLandArea = request.newTotalLandArea
  exercise refCid LandProperty.SetCid with newCid = cid
  pure()

data UpdateLandMinimumSurfaceForSale = UpdateLandMinimumSurfaceForSale
  with
    operator: Party
    user: Party
    propertyKey: PropertyKey
    newLandMinimumSurfaceForSale: Decimal

updateLandMinimumSurfaceForSaleAux: UpdateLandMinimumSurfaceForSale -> Update ()
updateLandMinimumSurfaceForSaleAux request = do
  (refCid, ref) <- fetchByKey @LandProperty.R (request.propertyKey)
  cid <- exercise ref.cid LandProperty.SetLandMinimumSurfaceForSale with newMinimumSurfaceForSale = request.newLandMinimumSurfaceForSale
  exercise refCid LandProperty.SetCid with newCid = cid
  pure()

data UpdateLandBuildableArea = UpdateLandBuildableArea
  with
    operator: Party
    user: Party
    propertyKey: PropertyKey
    newLandBuildableArea: Decimal

updateLandBuildableAreaAux: UpdateLandBuildableArea -> Update ()
updateLandBuildableAreaAux request = do
  (refCid, ref) <- fetchByKey @LandProperty.R (request.propertyKey)
  cid <- exercise ref.cid LandProperty.SetLandBuildableArea with newBuildableArea = request.newLandBuildableArea
  exercise refCid LandProperty.SetCid with newCid = cid
  pure()

data UpdateLandBuildableFloors = UpdateLandBuildableFloors
  with
    operator: Party
    user: Party
    propertyKey: PropertyKey
    newLandBuildableFloors: Int

updateLandBuildableFloorsAux: UpdateLandBuildableFloors -> Update ()
updateLandBuildableFloorsAux request = do
  (refCid, ref) <- fetchByKey @LandProperty.R (request.propertyKey)
  cid <- exercise ref.cid LandProperty.SetLandBuildableFloors with newBuildableFloors = request.newLandBuildableFloors
  exercise refCid LandProperty.SetCid with newCid = cid
  pure()

data UpdateLandAccessByRoad = UpdateLandAccessByRoad
  with
    operator: Party
    user: Party
    propertyKey: PropertyKey
    newLandAccessByRoad: Bool

updateLandAccessByRoadAux: UpdateLandAccessByRoad -> Update ()
updateLandAccessByRoadAux request = do
  (refCid, ref) <- fetchByKey @LandProperty.R (request.propertyKey)
  cid <- exercise ref.cid LandProperty.SetLandAccessByRoad with newLandAccessByRoad = request.newLandAccessByRoad
  exercise refCid LandProperty.SetCid with newCid = cid
  pure()

data UpdateLandViableConstructionTypes = UpdateLandViableConstructionTypes
  with
    operator: Party
    user: Party
    propertyKey: PropertyKey
    newLandViableConstructionTypes: [ViableConstructionTypes]

updateLandViableConstructionTypesAux: UpdateLandViableConstructionTypes -> Update ()
updateLandViableConstructionTypesAux request = do
  (refCid, ref) <- fetchByKey @LandProperty.R (request.propertyKey)
  cid <- exercise ref.cid LandProperty.SetLandViableConstructionTypes with newLandViableConstructionTypes = request.newLandViableConstructionTypes
  exercise refCid LandProperty.SetCid with newCid = cid
  pure()

data UpdateLandInstalledEquipment = UpdateLandInstalledEquipment
  with
    operator: Party
    user: Party
    propertyKey: PropertyKey
    newLandInstalledEquipment: Text

updateLandInstalledEquipmentAux: UpdateLandInstalledEquipment -> Update ()
updateLandInstalledEquipmentAux request = do
  (refCid, ref) <- fetchByKey @LandProperty.R (request.propertyKey)
  cid <- exercise ref.cid LandProperty.SetLandInstalledEquipment with newLandInstalledEquipment = request.newLandInstalledEquipment
  exercise refCid LandProperty.SetCid with newCid = cid
  pure()

data UpdateLandAdditionalInformation = UpdateLandAdditionalInformation
  with
    operator: Party
    user: Party
    propertyKey: PropertyKey
    newLandAdditionalInformation: Text

updateLandAdditionalInformationAux: UpdateLandAdditionalInformation -> Update ()
updateLandAdditionalInformationAux request = do
  (refCid, ref) <- fetchByKey @LandProperty.R (request.propertyKey)
  cid <- exercise ref.cid LandProperty.SetLandAdditionalInformation with newLandAdditionalInformation = request.newLandAdditionalInformation
  exercise refCid LandProperty.SetCid with newCid = cid
  pure()

data UpdateLandDescription = UpdateLandDescription
  with
    operator: Party
    user: Party
    propertyKey: PropertyKey
    newLandDescription: Text

updateLandDescriptionAux: UpdateLandDescription -> Update ()
updateLandDescriptionAux request = do
  (refCid, ref) <- fetchByKey @LandProperty.R (request.propertyKey)
  cid <- exercise ref.cid LandProperty.SetLandDescription with newLandDescription = request.newLandDescription
  exercise refCid LandProperty.SetCid with newCid = cid
  pure()


----------------------------------------------------------

data CreateResidencePropertyRequest = CreateResidencePropertyRequest
  with
    operator: Party
    user: Party
    id: Id
    residenceInstrument : InstrumentKey
    residencePrice : Decimal
    propertyAddress: Text
    propertyPostalCode : Text
    propertyDistrict : Text
    propertyCounty : Text
    grossArea: Decimal
    usableArea: Decimal
    bedrooms: Int
    bathrooms: Int
    floors: Int
    residenceType: ResidenceType
    backyard: Text --m^2, frontwards, backwards...
    parking: Parking
    buildDate: Date
    orientation: Orientation
    installedEquipment: Text
    additionalInformation: Text 
    description: Text
    observers : PartiesMap
    permission: Permission

requestCreateResidencePropertyAux : CreateResidencePropertyRequest -> Update (ContractId RequestCreateResidenceProperty.I)
requestCreateResidencePropertyAux request = do
  (_, credential) <-  fetchByKey @Credential (request.operator, request.user)
  permission <- UserUtil.hasPermission credential.roles request.permission
  assertMsg "You do not have permission to request the creation of a Residence Property" permission 
  toInterfaceContractId <$> create RequestCreateResidenceProperty with 
    operator = request.operator
    user = request.user
    id = request.id
    residenceInstrument = request.residenceInstrument
    residencePrice = request.residencePrice
    propertyAddress = request.propertyAddress
    propertyPostalCode= request.propertyPostalCode
    propertyDistrict= request.propertyDistrict
    propertyCounty= request.propertyCounty
    grossArea = request.grossArea
    usableArea = request.usableArea
    bedrooms = request.bedrooms
    bathrooms = request.bathrooms
    floors = request.floors
    residenceType = request.residenceType
    backyard = request.backyard
    parking = request.parking
    buildDate = request.buildDate
    orientation = request.orientation
    installedEquipment = request.installedEquipment
    additionalInformation = request.additionalInformation
    description = request.description
    observers = request.observers

data CreateResidenceProperty = CreateResidenceProperty
  with
    operator : Party
    user : Party
    createResidencePropertyRequest: ContractId RequestCreateResidenceProperty.I
    residencePropertyFactoryCid: ContractId ResidenceProperty.Factory 

createResidencePropertyAux : CreateResidenceProperty -> Update (InstrumentKey, PropertyKey)
createResidencePropertyAux request = do
  RequestCreateResidenceProperty.View{id,residenceInstrument,residencePrice,propertyAddress,propertyPostalCode,propertyDistrict,propertyCounty,grossArea,usableArea,bedrooms,bathrooms,floors,residenceType,backyard,parking,buildDate,orientation,installedEquipment,additionalInformation,description,observers} <- view <$> fetchAndRemove request.createResidencePropertyRequest
  let residenceProperty = PropertyKey with operator = request.operator, user = request.user, id = id
  exercise request.residencePropertyFactoryCid ResidenceProperty.Create with instrument = residenceInstrument, propertyKey = residenceProperty, ..
  pure (residenceInstrument, residenceProperty)

data UpdateResidenceInstrumentKey = UpdateResidenceInstrumentKey
  with
    operator: Party
    user: Party
    propertyKey: PropertyKey
    newResidenceInstrumentKey: InstrumentKey

updateResidenceInstrumentKeyAux: UpdateResidenceInstrumentKey -> Update ()
updateResidenceInstrumentKeyAux request = do
  (refCid, ref) <- fetchByKey @ResidenceProperty.R (request.propertyKey)
  cid <- exercise ref.cid ResidenceProperty.SetResidenceInstrumentKey with newResidenceInstrumentKey = request.newResidenceInstrumentKey
  exercise refCid ResidenceProperty.SetCid with newCid = cid
  pure()

data UpdateResidencePrice = UpdateResidencePrice
  with
    operator: Party
    user: Party
    propertyKey: PropertyKey
    newResidencePrice: Decimal

updateResidencePriceAux: UpdateResidencePrice -> Update ()
updateResidencePriceAux request = do
  (refCid, ref) <- fetchByKey @ResidenceProperty.R (request.propertyKey)
  cid <- exercise ref.cid ResidenceProperty.SetResidencePrice with newResidencePrice = request.newResidencePrice
  exercise refCid ResidenceProperty.SetCid with newCid = cid
  pure()

data UpdateResidencePropertyAddress = UpdateResidencePropertyAddress
  with
    operator: Party
    user: Party
    propertyKey: PropertyKey
    newResidencePropertyAddress: Text

data UpdateResidencePropertyPostalCode = UpdateResidencePropertyPostalCode
  with
    operator: Party
    user: Party
    propertyKey: PropertyKey
    newResidencePropertyPostalCode: Text

data UpdateResidencePropertyDistrict = UpdateResidencePropertyDistrict
  with
    operator: Party
    user: Party
    propertyKey: PropertyKey
    newResidencePropertyDistrict: Text

data UpdateResidencePropertyCounty = UpdateResidencePropertyCounty
  with
    operator: Party
    user: Party
    propertyKey: PropertyKey
    newResidencePropertyCounty: Text

data UpdateResidenceGrossArea = UpdateResidenceGrossArea
  with
    operator: Party
    user: Party
    propertyKey: PropertyKey
    newResidenceGrossArea: Decimal

data UpdateResidenceUsableArea = UpdateResidenceUsableArea
  with
    operator: Party
    user: Party
    propertyKey: PropertyKey
    newResidenceUsableArea: Decimal

data UpdateResidenceBedrooms = UpdateResidenceBedrooms
  with
    operator: Party
    user: Party
    propertyKey: PropertyKey
    newResidenceBedrooms: Int

data UpdateResidenceBathrooms = UpdateResidenceBathrooms
  with
    operator: Party
    user: Party
    propertyKey: PropertyKey
    newResidenceBathrooms: Int

data UpdateResidenceFloors = UpdateResidenceFloors
  with
    operator: Party
    user: Party
    propertyKey: PropertyKey
    newResidenceFloors: Int

data UpdateResidenceType = UpdateResidenceType
  with
    operator: Party
    user: Party
    propertyKey: PropertyKey
    newResidenceType: ResidenceType

data UpdateResidenceBackyard = UpdateResidenceBackyard
  with
    operator: Party
    user: Party
    propertyKey: PropertyKey
    newResidenceBackyardDescription: Text

data UpdateResidenceParking = UpdateResidenceParking
  with
    operator: Party
    user: Party
    propertyKey: PropertyKey
    newResidenceParking: Parking

data UpdateResidenceBuildDate = UpdateResidenceBuildDate
  with
    operator: Party
    user: Party
    propertyKey: PropertyKey
    newResidenceBuildDate: Date

data UpdateResidenceOrientation = UpdateResidenceOrientation
  with
    operator: Party
    user: Party
    propertyKey: PropertyKey
    newResidenceOrientation: Orientation

data UpdateResidenceInstalledEquipment = UpdateResidenceInstalledEquipment
  with
    operator: Party
    user: Party
    propertyKey: PropertyKey
    newResidenceInstalledEquipment: Text

data UpdateResidenceAdditionalInformation = UpdateResidenceAdditionalInformation
  with
    operator: Party
    user: Party
    propertyKey: PropertyKey
    newResidenceAdditionalInformation: Text

data UpdateResidenceDescription = UpdateResidenceDescription
  with
    operator: Party
    user: Party
    propertyKey: PropertyKey
    newResidenceDescription: Text

updateResidencePropertyAddressAux: UpdateResidencePropertyAddress -> Update ()
updateResidencePropertyAddressAux request = do
  (refCid, ref) <- fetchByKey @ResidenceProperty.R (request.propertyKey)
  cid <- exercise ref.cid ResidenceProperty.SetResidencePropertyAddress with newResidencePropertyAddress = request.newResidencePropertyAddress
  exercise refCid ResidenceProperty.SetCid with newCid = cid
  pure()

updateResidencePropertyPostalCodeAux: UpdateResidencePropertyPostalCode -> Update ()
updateResidencePropertyPostalCodeAux request = do
  (refCid, ref) <- fetchByKey @ResidenceProperty.R (request.propertyKey)
  cid <- exercise ref.cid ResidenceProperty.SetResidencePropertyPostalCode with newResidencePropertyPostalCode = request.newResidencePropertyPostalCode
  exercise refCid ResidenceProperty.SetCid with newCid = cid
  pure()

updateResidencePropertyDistrictAux: UpdateResidencePropertyDistrict -> Update ()
updateResidencePropertyDistrictAux request = do
  (refCid, ref) <- fetchByKey @ResidenceProperty.R (request.propertyKey)
  cid <- exercise ref.cid ResidenceProperty.SetResidencePropertyDistrict with newResidencePropertyDistrict = request.newResidencePropertyDistrict
  exercise refCid ResidenceProperty.SetCid with newCid = cid
  pure()

updateResidencePropertyCountyAux: UpdateResidencePropertyCounty -> Update ()
updateResidencePropertyCountyAux request = do
  (refCid, ref) <- fetchByKey @ResidenceProperty.R (request.propertyKey)
  cid <- exercise ref.cid ResidenceProperty.SetResidencePropertyCounty with newResidencePropertyCounty = request.newResidencePropertyCounty
  exercise refCid ResidenceProperty.SetCid with newCid = cid
  pure()

updateResidenceGrossAreaAux: UpdateResidenceGrossArea -> Update ()
updateResidenceGrossAreaAux request = do
  (refCid, ref) <- fetchByKey @ResidenceProperty.R (request.propertyKey)
  cid <- exercise ref.cid ResidenceProperty.SetResidenceGrossArea with newResidenceGrossArea = request.newResidenceGrossArea
  exercise refCid ResidenceProperty.SetCid with newCid = cid
  pure()

updateResidenceUsableAreaAux: UpdateResidenceUsableArea -> Update ()
updateResidenceUsableAreaAux request = do
  (refCid, ref) <- fetchByKey @ResidenceProperty.R (request.propertyKey)
  cid <- exercise ref.cid ResidenceProperty.SetResidenceUsableArea with newResidenceUsableArea = request.newResidenceUsableArea
  exercise refCid ResidenceProperty.SetCid with newCid = cid
  pure()

updateResidenceBedroomsAux: UpdateResidenceBedrooms -> Update ()
updateResidenceBedroomsAux request = do
  (refCid, ref) <- fetchByKey @ResidenceProperty.R (request.propertyKey)
  cid <- exercise ref.cid ResidenceProperty.SetResidenceBedrooms with newResidenceBedrooms = request.newResidenceBedrooms
  exercise refCid ResidenceProperty.SetCid with newCid = cid
  pure()

updateResidenceBathroomsAux: UpdateResidenceBathrooms -> Update ()
updateResidenceBathroomsAux request = do
  (refCid, ref) <- fetchByKey @ResidenceProperty.R (request.propertyKey)
  cid <- exercise ref.cid ResidenceProperty.SetResidenceBathrooms with newResidenceBathrooms = request.newResidenceBathrooms
  exercise refCid ResidenceProperty.SetCid with newCid = cid
  pure()

updateResidenceFloorsAux: UpdateResidenceFloors -> Update ()
updateResidenceFloorsAux request = do
  (refCid, ref) <- fetchByKey @ResidenceProperty.R (request.propertyKey)
  cid <- exercise ref.cid ResidenceProperty.SetResidenceFloors with newResidenceFloors = request.newResidenceFloors
  exercise refCid ResidenceProperty.SetCid with newCid = cid
  pure()

updateResidenceTypeAux: UpdateResidenceType -> Update ()
updateResidenceTypeAux request = do
  (refCid, ref) <- fetchByKey @ResidenceProperty.R (request.propertyKey)
  cid <- exercise ref.cid ResidenceProperty.SetResidenceType with newResidenceType = request.newResidenceType
  exercise refCid ResidenceProperty.SetCid with newCid = cid
  pure()

updateResidenceBackyardAux: UpdateResidenceBackyard -> Update ()
updateResidenceBackyardAux request = do
  (refCid, ref) <- fetchByKey @ResidenceProperty.R (request.propertyKey)
  cid <- exercise ref.cid ResidenceProperty.SetResidenceBackyard with newResidenceBackyard = request.newResidenceBackyardDescription
  exercise refCid ResidenceProperty.SetCid with newCid = cid
  pure()

updateResidenceParkingAux: UpdateResidenceParking -> Update ()
updateResidenceParkingAux request = do
  (refCid, ref) <- fetchByKey @ResidenceProperty.R (request.propertyKey)
  cid <- exercise ref.cid ResidenceProperty.SetResidenceParking with newResidenceParking = request.newResidenceParking
  exercise refCid ResidenceProperty.SetCid with newCid = cid
  pure()

updateResidenceBuildDateAux: UpdateResidenceBuildDate -> Update ()
updateResidenceBuildDateAux request = do
  (refCid, ref) <- fetchByKey @ResidenceProperty.R (request.propertyKey)
  cid <- exercise ref.cid ResidenceProperty.SetResidenceBuildDate with newResidenceBuildDate = request.newResidenceBuildDate
  exercise refCid ResidenceProperty.SetCid with newCid = cid
  pure()

updateResidenceOrientationAux: UpdateResidenceOrientation -> Update ()
updateResidenceOrientationAux request = do
  (refCid, ref) <- fetchByKey @ResidenceProperty.R (request.propertyKey)
  cid <- exercise ref.cid ResidenceProperty.SetResidenceOrientation with newOrientation = request.newResidenceOrientation
  exercise refCid ResidenceProperty.SetCid with newCid = cid
  pure()

updateResidenceInstalledEquipmentAux: UpdateResidenceInstalledEquipment -> Update ()
updateResidenceInstalledEquipmentAux request = do
  (refCid, ref) <- fetchByKey @ResidenceProperty.R (request.propertyKey)
  cid <- exercise ref.cid ResidenceProperty.SetResidenceInstalledEquipment with newResidenceInstalledEquipment = request.newResidenceInstalledEquipment
  exercise refCid ResidenceProperty.SetCid with newCid = cid
  pure()

updateResidenceAdditionalInformationAux: UpdateResidenceAdditionalInformation -> Update ()
updateResidenceAdditionalInformationAux request = do
  (refCid, ref) <- fetchByKey @ResidenceProperty.R (request.propertyKey)
  cid <- exercise ref.cid ResidenceProperty.SetResidenceAdditionalInformation with newResidenceAdditionalInformation = request.newResidenceAdditionalInformation
  exercise refCid ResidenceProperty.SetCid with newCid = cid
  pure()

updateResidenceDescriptionAux: UpdateResidenceDescription -> Update ()
updateResidenceDescriptionAux request = do
  (refCid, ref) <- fetchByKey @ResidenceProperty.R (request.propertyKey)
  cid <- exercise ref.cid ResidenceProperty.SetResidenceDescription with newResidenceDescription = request.newResidenceDescription
  exercise refCid ResidenceProperty.SetCid with newCid = cid
  pure()

------------------------------------------------------------------------------

data CreateGaragePropertyRequest = CreateGaragePropertyRequest
  with
    operator: Party
    user: Party
    id: Id
    garageInstrument : InstrumentKey
    garagePrice : Decimal
    propertyAddress: Text
    propertyPostalCode : Text
    propertyDistrict : Text
    propertyCounty : Text
    garageArea: Decimal
    garageType: GarageType
    vehicleCapacity: Int
    installedEquipment: Text
    additionalInformation: Text
    description: Text
    observers : PartiesMap
    permission: Permission

requestCreateGaragePropertyAux : CreateGaragePropertyRequest -> Update (ContractId RequestCreateGarageProperty.I)
requestCreateGaragePropertyAux request = do
  (_, credential) <-  fetchByKey @Credential (request.operator, request.user)
  permission <- UserUtil.hasPermission credential.roles request.permission
  assertMsg "You do not have permission to request the creation of a Garage Property" permission 
  toInterfaceContractId <$> create RequestCreateGarageProperty with 
    operator = request.operator
    user = request.user
    id = request.id
    garageInstrument = request.garageInstrument
    garagePrice = request.garagePrice
    propertyAddress = request.propertyAddress
    propertyPostalCode= request.propertyPostalCode
    propertyDistrict= request.propertyDistrict
    propertyCounty= request.propertyCounty
    garageArea = request.garageArea
    garageType = request.garageType
    vehicleCapacity = request.vehicleCapacity
    installedEquipment = request.installedEquipment
    additionalInformation = request.additionalInformation
    description = request.description
    observers = request.observers

data CreateGarageProperty = CreateGarageProperty
  with
    operator : Party
    user : Party
    createGaragePropertyRequest: ContractId RequestCreateGarageProperty.I
    garagePropertyFactoryCid: ContractId GarageProperty.Factory 

createGaragePropertyAux : CreateGarageProperty -> Update (InstrumentKey, PropertyKey)
createGaragePropertyAux request = do
  RequestCreateGarageProperty.View{id,garageInstrument,garagePrice,propertyAddress,propertyPostalCode,propertyDistrict,propertyCounty,garageArea,garageType, vehicleCapacity,installedEquipment,additionalInformation,description,observers} <- view <$> fetchAndRemove request.createGaragePropertyRequest
  let garageProperty = PropertyKey with operator = request.operator, user = request.user, id = id
  exercise request.garagePropertyFactoryCid GarageProperty.Create with instrument = garageInstrument, propertyKey = garageProperty, ..
  pure (garageInstrument, garageProperty)

data UpdateGarageInstrumentKey = UpdateGarageInstrumentKey
  with
    operator: Party
    user: Party
    propertyKey: PropertyKey
    newGarageInstrumentKey: InstrumentKey

updateGarageInstrumentKeyAux: UpdateGarageInstrumentKey -> Update ()
updateGarageInstrumentKeyAux request = do
  (refCid, ref) <- fetchByKey @GarageProperty.R (request.propertyKey)
  cid <- exercise ref.cid GarageProperty.SetGarageInstrumentKey with newGarageInstrumentKey = request.newGarageInstrumentKey
  exercise refCid GarageProperty.SetCid with newCid = cid
  pure()

data UpdateGaragePrice = UpdateGaragePrice
  with
    operator: Party
    user: Party
    propertyKey: PropertyKey
    newGaragePrice: Decimal

updateGaragePriceAux: UpdateGaragePrice -> Update ()
updateGaragePriceAux request = do
  (refCid, ref) <- fetchByKey @GarageProperty.R (request.propertyKey)
  cid <- exercise ref.cid GarageProperty.SetGaragePrice with newGaragePrice = request.newGaragePrice
  exercise refCid GarageProperty.SetCid with newCid = cid
  pure()

data UpdateGaragePropertyAddress = UpdateGaragePropertyAddress
  with
    operator: Party
    user: Party
    propertyKey: PropertyKey
    newGaragePropertyAddress: Text

data UpdateGaragePropertyPostalCode = UpdateGaragePropertyPostalCode
  with
    operator: Party
    user: Party
    propertyKey: PropertyKey
    newGaragePropertyPostalCode: Text

data UpdateGaragePropertyDistrict = UpdateGaragePropertyDistrict
  with
    operator: Party
    user: Party
    propertyKey: PropertyKey
    newGaragePropertyDistrict: Text

data UpdateGaragePropertyCounty = UpdateGaragePropertyCounty
  with
    operator: Party
    user: Party
    propertyKey: PropertyKey
    newGaragePropertyCounty: Text

data UpdateGarageArea = UpdateGarageArea
  with
    operator: Party
    user: Party
    propertyKey: PropertyKey
    newGarageArea: Decimal

data UpdateGarageType = UpdateGarageType
  with
    operator: Party
    user: Party
    propertyKey: PropertyKey
    newGarageType: GarageType

data UpdateVehicleCapacity = UpdateVehicleCapacity
  with
    operator: Party
    user: Party
    propertyKey: PropertyKey
    newVehicleCapacity: Int

data UpdateGarageInstalledEquipment = UpdateGarageInstalledEquipment
  with
    operator: Party
    user: Party
    propertyKey: PropertyKey
    newGarageInstalledEquipment: Text

data UpdateGarageAdditionalInformation = UpdateGarageAdditionalInformation
  with
    operator: Party
    user: Party
    propertyKey: PropertyKey
    newGarageAdditionalInformation: Text

data UpdateGarageDescription = UpdateGarageDescription
  with
    operator: Party
    user: Party
    propertyKey: PropertyKey
    newGarageDescription: Text

updateGaragePropertyAddressAux: UpdateGaragePropertyAddress -> Update ()
updateGaragePropertyAddressAux request = do
  (refCid, ref) <- fetchByKey @GarageProperty.R (request.propertyKey)
  cid <- exercise ref.cid GarageProperty.SetGaragePropertyAddress with newGaragePropertyAddress = request.newGaragePropertyAddress
  exercise refCid GarageProperty.SetCid with newCid = cid
  pure()

updateGaragePropertyPostalCodeAux: UpdateGaragePropertyPostalCode -> Update ()
updateGaragePropertyPostalCodeAux request = do
  (refCid, ref) <- fetchByKey @GarageProperty.R (request.propertyKey)
  cid <- exercise ref.cid GarageProperty.SetGaragePropertyPostalCode with newGaragePropertyPostalCode = request.newGaragePropertyPostalCode
  exercise refCid GarageProperty.SetCid with newCid = cid
  pure()

updateGaragePropertyDistrictAux: UpdateGaragePropertyDistrict -> Update ()
updateGaragePropertyDistrictAux request = do
  (refCid, ref) <- fetchByKey @GarageProperty.R (request.propertyKey)
  cid <- exercise ref.cid GarageProperty.SetGaragePropertyDistrict with newGaragePropertyDistrict = request.newGaragePropertyDistrict
  exercise refCid GarageProperty.SetCid with newCid = cid
  pure()

updateGaragePropertyCountyAux: UpdateGaragePropertyCounty -> Update ()
updateGaragePropertyCountyAux request = do
  (refCid, ref) <- fetchByKey @GarageProperty.R (request.propertyKey)
  cid <- exercise ref.cid GarageProperty.SetGaragePropertyCounty with newGaragePropertyCounty = request.newGaragePropertyCounty
  exercise refCid GarageProperty.SetCid with newCid = cid
  pure()

updateGarageAreaAux: UpdateGarageArea -> Update ()
updateGarageAreaAux request = do
  (refCid, ref) <- fetchByKey @GarageProperty.R (request.propertyKey)
  cid <- exercise ref.cid GarageProperty.SetGarageArea with newGarageArea = request.newGarageArea
  exercise refCid GarageProperty.SetCid with newCid = cid
  pure()

updateGarageTypeAux: UpdateGarageType -> Update ()
updateGarageTypeAux request = do
  (refCid, ref) <- fetchByKey @GarageProperty.R (request.propertyKey)
  cid <- exercise ref.cid GarageProperty.SetGarageType with newGarageType = request.newGarageType
  exercise refCid GarageProperty.SetCid with newCid = cid
  pure()

updateVehicleCapacityAux: UpdateVehicleCapacity -> Update ()
updateVehicleCapacityAux request = do
  (refCid, ref) <- fetchByKey @GarageProperty.R (request.propertyKey)
  cid <- exercise ref.cid GarageProperty.SetVehicleCapacity with newVehicleCapacity = request.newVehicleCapacity
  exercise refCid GarageProperty.SetCid with newCid = cid
  pure()

updateGarageInstalledEquipmentAux: UpdateGarageInstalledEquipment -> Update ()
updateGarageInstalledEquipmentAux request = do
  (refCid, ref) <- fetchByKey @GarageProperty.R (request.propertyKey)
  cid <- exercise ref.cid GarageProperty.SetGarageInstalledEquipment with newGarageInstalledEquipment = request.newGarageInstalledEquipment
  exercise refCid GarageProperty.SetCid with newCid = cid
  pure()

updateGarageAdditionalInformationAux: UpdateGarageAdditionalInformation -> Update ()
updateGarageAdditionalInformationAux request = do
  (refCid, ref) <- fetchByKey @GarageProperty.R (request.propertyKey)
  cid <- exercise ref.cid GarageProperty.SetGarageAdditionalInformation with newGarageAdditionalInformation = request.newGarageAdditionalInformation
  exercise refCid GarageProperty.SetCid with newCid = cid
  pure()

updateGarageDescriptionAux: UpdateGarageDescription -> Update ()
updateGarageDescriptionAux request = do
  (refCid, ref) <- fetchByKey @GarageProperty.R (request.propertyKey)
  cid <- exercise ref.cid GarageProperty.SetGarageDescription with newGarageDescription = request.newGarageDescription
  exercise refCid GarageProperty.SetCid with newCid = cid
  pure()

----------------------------------------------------------

data CreateWarehousePropertyRequest = CreateWarehousePropertyRequest
  with
    operator: Party
    user: Party
    id: Id
    warehouseInstrument: InstrumentKey
    warehousePrice : Decimal
    propertyAddress: Text
    propertyPostalCode : Text
    propertyDistrict : Text
    propertyCounty : Text
    warehouseType: WarehouseType 
    grossArea: Decimal
    usableArea: Decimal
    floors: Int
    buildDate: Date
    installedEquipment: Text
    additionalInformation: Text
    description: Text
    observers : PartiesMap
    permission: Permission

requestCreateWarehousePropertyAux : CreateWarehousePropertyRequest -> Update (ContractId RequestCreateWarehouseProperty.I)
requestCreateWarehousePropertyAux request = do
  (_, credential) <-  fetchByKey @Credential (request.operator, request.user)
  permission <- UserUtil.hasPermission credential.roles request.permission
  assertMsg "You do not have permission to request the creation of a Warehouse Property" permission 
  toInterfaceContractId <$> create RequestCreateWarehouseProperty with 
    operator = request.operator
    user = request.user
    id = request.id
    warehouseInstrument = request.warehouseInstrument
    warehousePrice = request.warehousePrice
    propertyAddress = request.propertyAddress
    propertyPostalCode= request.propertyPostalCode
    propertyDistrict= request.propertyDistrict
    propertyCounty= request.propertyCounty
    warehouseType = request.warehouseType
    grossArea = request.grossArea
    usableArea = request.usableArea
    floors = request.floors
    buildDate = request.buildDate
    installedEquipment = request.installedEquipment
    additionalInformation = request.additionalInformation
    description = request.description
    observers = request.observers

data CreateWarehouseProperty = CreateWarehouseProperty
  with
    operator : Party
    user : Party
    createWarehousePropertyRequest: ContractId RequestCreateWarehouseProperty.I
    warehousePropertyFactoryCid: ContractId WarehouseProperty.Factory 

createWarehousePropertyAux : CreateWarehouseProperty -> Update (InstrumentKey, PropertyKey)
createWarehousePropertyAux request = do
  RequestCreateWarehouseProperty.View{id,warehouseInstrument,warehousePrice,propertyAddress,propertyPostalCode,propertyDistrict,propertyCounty,warehouseType,grossArea,usableArea,floors,buildDate,installedEquipment,additionalInformation,description,observers} <- view <$> fetchAndRemove request.createWarehousePropertyRequest
  let warehouseProperty = PropertyKey with operator = request.operator, user = request.user, id = id
  exercise request.warehousePropertyFactoryCid WarehouseProperty.Create with instrument = warehouseInstrument, propertyKey = warehouseProperty, ..
  pure (warehouseInstrument, warehouseProperty)

data UpdateWarehouseInstrumentKey = UpdateWarehouseInstrumentKey
  with
    operator: Party
    user: Party
    propertyKey: PropertyKey
    newWarehouseInstrumentKey: InstrumentKey

updateWarehouseInstrumentKeyAux: UpdateWarehouseInstrumentKey -> Update ()
updateWarehouseInstrumentKeyAux request = do
  (refCid, ref) <- fetchByKey @WarehouseProperty.R (request.propertyKey)
  cid <- exercise ref.cid WarehouseProperty.SetWarehouseInstrumentKey with newWarehouseInstrumentKey = request.newWarehouseInstrumentKey
  exercise refCid WarehouseProperty.SetCid with newCid = cid
  pure()

data UpdateWarehousePrice = UpdateWarehousePrice
  with
    operator: Party
    user: Party
    propertyKey: PropertyKey
    newWarehousePrice: Decimal

updateWarehousePriceAux: UpdateWarehousePrice -> Update ()
updateWarehousePriceAux request = do
  (refCid, ref) <- fetchByKey @WarehouseProperty.R (request.propertyKey)
  cid <- exercise ref.cid WarehouseProperty.SetWarehousePrice with newWarehousePrice = request.newWarehousePrice
  exercise refCid WarehouseProperty.SetCid with newCid = cid
  pure()

data UpdateWarehousePropertyAddress = UpdateWarehousePropertyAddress
  with
    operator: Party
    user: Party
    propertyKey: PropertyKey
    newWarehousePropertyAddress: Text

data UpdateWarehousePropertyPostalCode = UpdateWarehousePropertyPostalCode
  with
    operator: Party
    user: Party
    propertyKey: PropertyKey
    newWarehousePropertyPostalCode: Text

data UpdateWarehousePropertyDistrict = UpdateWarehousePropertyDistrict
  with
    operator: Party
    user: Party
    propertyKey: PropertyKey
    newWarehousePropertyDistrict: Text

data UpdateWarehousePropertyCounty = UpdateWarehousePropertyCounty
  with
    operator: Party
    user: Party
    propertyKey: PropertyKey
    newWarehousePropertyCounty: Text

data UpdateWarehouseType = UpdateWarehouseType
  with
    operator: Party
    user: Party
    propertyKey: PropertyKey
    newWarehouseType: WarehouseType

data UpdateWarehouseGrossArea = UpdateWarehouseGrossArea
  with
    operator: Party
    user: Party
    propertyKey: PropertyKey
    newWarehouseGrossArea: Decimal

data UpdateWarehouseUsableArea = UpdateWarehouseUsableArea
  with
    operator: Party
    user: Party
    propertyKey: PropertyKey
    newWarehouseUsableArea: Decimal

data UpdateWarehouseFloors = UpdateWarehouseFloors
  with
    operator: Party
    user: Party
    propertyKey: PropertyKey
    newWarehouseFloors: Int

data UpdateWarehouseBuildDate = UpdateWarehouseBuildDate
  with
    operator: Party
    user: Party
    propertyKey: PropertyKey
    newWarehouseBuildDate: Date

data UpdateWarehouseInstalledEquipment = UpdateWarehouseInstalledEquipment
  with
    operator: Party
    user: Party
    propertyKey: PropertyKey
    newWarehouseInstalledEquipment: Text

data UpdateWarehouseAdditionalInformation = UpdateWarehouseAdditionalInformation
  with
    operator: Party
    user: Party
    propertyKey: PropertyKey
    newWarehouseAdditionalInformation: Text

data UpdateWarehouseDescription = UpdateWarehouseDescription
  with
    operator: Party
    user: Party
    propertyKey: PropertyKey
    newWarehouseDescription: Text

updateWarehousePropertyAddressAux: UpdateWarehousePropertyAddress -> Update ()
updateWarehousePropertyAddressAux request = do
  (refCid, ref) <- fetchByKey @WarehouseProperty.R (request.propertyKey)
  cid <- exercise ref.cid WarehouseProperty.SetWarehousePropertyAddress with newWarehousePropertyAddress = request.newWarehousePropertyAddress
  exercise refCid WarehouseProperty.SetCid with newCid = cid
  pure()

updateWarehousePropertyPostalCodeAux: UpdateWarehousePropertyPostalCode -> Update ()
updateWarehousePropertyPostalCodeAux request = do
  (refCid, ref) <- fetchByKey @WarehouseProperty.R (request.propertyKey)
  cid <- exercise ref.cid WarehouseProperty.SetWarehousePropertyPostalCode with newWarehousePropertyPostalCode = request.newWarehousePropertyPostalCode
  exercise refCid WarehouseProperty.SetCid with newCid = cid
  pure()

updateWarehousePropertyDistrictAux: UpdateWarehousePropertyDistrict -> Update ()
updateWarehousePropertyDistrictAux request = do
  (refCid, ref) <- fetchByKey @WarehouseProperty.R (request.propertyKey)
  cid <- exercise ref.cid WarehouseProperty.SetWarehousePropertyDistrict with newWarehousePropertyDistrict = request.newWarehousePropertyDistrict
  exercise refCid WarehouseProperty.SetCid with newCid = cid
  pure()

updateWarehousePropertyCountyAux: UpdateWarehousePropertyCounty -> Update ()
updateWarehousePropertyCountyAux request = do
  (refCid, ref) <- fetchByKey @WarehouseProperty.R (request.propertyKey)
  cid <- exercise ref.cid WarehouseProperty.SetWarehousePropertyCounty with newWarehousePropertyCounty = request.newWarehousePropertyCounty
  exercise refCid WarehouseProperty.SetCid with newCid = cid
  pure()

updateWarehouseTypeAux: UpdateWarehouseType -> Update ()
updateWarehouseTypeAux request = do
  (refCid, ref) <- fetchByKey @WarehouseProperty.R (request.propertyKey)
  cid <- exercise ref.cid WarehouseProperty.SetWarehouseType with newWarehouseType = request.newWarehouseType
  exercise refCid WarehouseProperty.SetCid with newCid = cid
  pure()

updateWarehouseGrossAreaAux: UpdateWarehouseGrossArea -> Update ()
updateWarehouseGrossAreaAux request = do
  (refCid, ref) <- fetchByKey @WarehouseProperty.R (request.propertyKey)
  cid <- exercise ref.cid WarehouseProperty.SetWarehouseGrossArea with newWarehouseGrossArea = request.newWarehouseGrossArea
  exercise refCid WarehouseProperty.SetCid with newCid = cid
  pure()

updateWarehouseUsableAreaAux: UpdateWarehouseUsableArea -> Update ()
updateWarehouseUsableAreaAux request = do
  (refCid, ref) <- fetchByKey @WarehouseProperty.R (request.propertyKey)
  cid <- exercise ref.cid WarehouseProperty.SetWarehouseUsableArea with newWarehouseUsableArea = request.newWarehouseUsableArea
  exercise refCid WarehouseProperty.SetCid with newCid = cid
  pure()

updateWarehouseFloorsAux: UpdateWarehouseFloors -> Update ()
updateWarehouseFloorsAux request = do
  (refCid, ref) <- fetchByKey @WarehouseProperty.R (request.propertyKey)
  cid <- exercise ref.cid WarehouseProperty.SetWarehouseFloors with newWarehouseFloors = request.newWarehouseFloors
  exercise refCid WarehouseProperty.SetCid with newCid = cid
  pure()

updateWarehouseBuildDateAux: UpdateWarehouseBuildDate -> Update ()
updateWarehouseBuildDateAux request = do
  (refCid, ref) <- fetchByKey @WarehouseProperty.R (request.propertyKey)
  cid <- exercise ref.cid WarehouseProperty.SetWarehouseBuildDate with newWarehouseBuildDate = request.newWarehouseBuildDate
  exercise refCid WarehouseProperty.SetCid with newCid = cid
  pure()

updateWarehouseInstalledEquipmentAux: UpdateWarehouseInstalledEquipment -> Update ()
updateWarehouseInstalledEquipmentAux request = do
  (refCid, ref) <- fetchByKey @WarehouseProperty.R (request.propertyKey)
  cid <- exercise ref.cid WarehouseProperty.SetWarehouseInstalledEquipment with newWarehouseInstalledEquipment = request.newWarehouseInstalledEquipment
  exercise refCid WarehouseProperty.SetCid with newCid = cid
  pure()

updateWarehouseAdditionalInformationAux: UpdateWarehouseAdditionalInformation -> Update ()
updateWarehouseAdditionalInformationAux request = do
  (refCid, ref) <- fetchByKey @WarehouseProperty.R (request.propertyKey)
  cid <- exercise ref.cid WarehouseProperty.SetWarehouseAdditionalInformation with newWarehouseAdditionalInformation = request.newWarehouseAdditionalInformation
  exercise refCid WarehouseProperty.SetCid with newCid = cid
  pure()

updateWarehouseDescriptionAux: UpdateWarehouseDescription -> Update ()
updateWarehouseDescriptionAux request = do
  (refCid, ref) <- fetchByKey @WarehouseProperty.R (request.propertyKey)
  cid <- exercise ref.cid WarehouseProperty.SetWarehouseDescription with newWarehouseDescription = request.newWarehouseDescription
  exercise refCid WarehouseProperty.SetCid with newCid = cid
  pure()