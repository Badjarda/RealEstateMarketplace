module App.PropertyManager.Service where

import Interface.PropertyManager.Service qualified as Service(I, R, O, View(..), OView(..), RView(..), RequestCreateApartmentProperty(..), CreateApartmentProperty(..), UpdateApartment(..), RequestCreateLandProperty(..), CreateLandProperty(..), UpdateLand(..), RequestCreateResidenceProperty(..), CreateResidenceProperty(..), UpdateResidence(..), RequestCreateGarageProperty(..), CreateGarageProperty(..), UpdateGarage(..), RequestCreateWarehouseProperty(..), CreateWarehouseProperty(..), UpdateWarehouse(..), Accept(..), Decline(..), Withdraw(..), Approve(..), Reject(..), Cancel(..))

import Interface.PropertyManager.Property.ApartmentProperty.Factory qualified as ApartmentProperty(Factory(..))
import Interface.PropertyManager.Property.LandProperty.Factory qualified as LandProperty(Factory(..))
import Interface.PropertyManager.Property.ResidenceProperty.Factory qualified as ResidenceProperty(Factory(..))
import Interface.PropertyManager.Property.GarageProperty.Factory qualified as GarageProperty(Factory(..))
import Interface.PropertyManager.Property.WarehouseProperty.Factory qualified as WarehouseProperty(Factory(..))

import Interface.Base.Service qualified as Base (I, View(..))
import Interface.RoleManager.UserRole.Permission

import App.PropertyManager.Util (CreateApartmentPropertyRequest(..), CreateApartmentProperty(..), UpdateApartment(..), requestCreateApartmentPropertyAux, createApartmentPropertyAux, updateApartmentAux, CreateResidencePropertyRequest(..), CreateResidenceProperty(..), UpdateResidence(..), requestCreateResidencePropertyAux, createResidencePropertyAux, updateResidenceAux, CreateLandPropertyRequest(..), CreateLandProperty(..), UpdateLand(..), requestCreateLandPropertyAux, createLandPropertyAux, updateLandAux, CreateGarageProperty(..), CreateGaragePropertyRequest(..), UpdateGarage(..), requestCreateGaragePropertyAux, createGaragePropertyAux, updateGarageAux, CreateWarehouseProperty(..), CreateWarehousePropertyRequest(..), UpdateWarehouse(..), requestCreateWarehousePropertyAux, createWarehousePropertyAux, updateWarehouseAux)

type T = Service

template Service 
  with
    operator: Party
    user: Party
    apartmentPropertyFactoryCid: ContractId ApartmentProperty.Factory
    landPropertyFactoryCid: ContractId LandProperty.Factory
    residencePropertyFactoryCid: ContractId ResidenceProperty.Factory
    garagePropertyFactoryCid: ContractId GarageProperty.Factory
    warehousePropertyFactoryCid: ContractId WarehouseProperty.Factory
  where
  signatory operator, user

  key (operator, user) : (Party, Party)
  maintainer key._1

  interface instance Base.I for Service where
    view = Base.View with operator; user
    terminate = pure ()

  interface instance Service.I for Service where
    view = Service.View with apartmentPropertyFactoryCid, landPropertyFactoryCid, residencePropertyFactoryCid, garagePropertyFactoryCid, warehousePropertyFactoryCid

    asBase = toInterface @Base.I this
 
    requestCreateApartmentProperty Service.RequestCreateApartmentProperty{id,apartmentInstrument,apartmentPrice,propertyAddress,propertyPostalCode,propertyDistrict,propertyCounty,grossArea,usableArea,bedrooms,bathrooms,floor,parkingSpaces,elevator,buildDate,installedEquipment,additionalInformation,description,photoReferences,observers} = do
      let requestCreateApartmentPropertyParams = CreateApartmentPropertyRequest with permission = MANAGE_ROLE, ..
      requestCreateApartmentPropertyAux requestCreateApartmentPropertyParams

    createApartmentProperty Service.CreateApartmentProperty{createApartmentPropertyRequest} = do
      let createApartmentPropertyParams = CreateApartmentProperty with ..
      createApartmentPropertyAux createApartmentPropertyParams
    
    updateApartment Service.UpdateApartment{propertyKey, newApartmentPrice,newApartmentPropertyAddress,newApartmentPropertyPostalCode,newApartmentPropertyDistrict,newApartmentPropertyCounty,newApartmentGrossArea,newApartmentUsableArea,newApartmentBedrooms,newApartmentBathrooms,newApartmentFloor,newApartmentParkingSpaces,newApartmentElevator,newApartmentBuildDate,newApartmentInstalledEquipment,newApartmentAdditionalInformation,newApartmentDescription,newApartmentPhotoReferences} = do
      let requestUpdateApartmentParams = UpdateApartment with ..
      updateApartmentAux requestUpdateApartmentParams

-------------------------------------------------------

    requestCreateLandProperty Service.RequestCreateLandProperty{id,landInstrument,landPrice,propertyAddress,propertyPostalCode,propertyDistrict,propertyCounty,landType,totalLandArea,minimumSurfaceForSale,buildableArea,buildableFloors,accessByRoad,installedEquipment,viableConstructionTypes,additionalInformation,description,photoReferences,observers} = do
      let requestCreateLandPropertyParams = CreateLandPropertyRequest with permission = MANAGE_ROLE, ..
      requestCreateLandPropertyAux requestCreateLandPropertyParams

    createLandProperty Service.CreateLandProperty{createLandPropertyRequest} = do
      let createLandPropertyParams = CreateLandProperty with ..
      createLandPropertyAux createLandPropertyParams
    
    updateLand Service.UpdateLand{propertyKey, newLandPrice,newLandPropertyAddress,newLandPropertyPostalCode,newLandPropertyDistrict,newLandPropertyCounty,newLandType,newLandTotalArea,newLandMinimumSurfaceForSale,newLandBuildableArea,newLandBuildableFloors,newLandAccessByRoad,newLandInstalledEquipment,newLandViableConstructionTypes,newLandAdditionalInformation,newLandDescription,newLandPhotoReferences} = do
      let requestUpdateLandParams = UpdateLand with ..
      updateLandAux requestUpdateLandParams

-------------------------------------------------------
    
    requestCreateResidenceProperty Service.RequestCreateResidenceProperty{id,residenceInstrument,residencePrice,propertyAddress,propertyPostalCode,propertyDistrict,propertyCounty,grossArea,usableArea,bedrooms,bathrooms,floors,residenceType,backyard,parking,buildDate,orientation,installedEquipment,additionalInformation,description,photoReferences,observers} = do
      let requestCreateResidencePropertyParams = CreateResidencePropertyRequest with permission = MANAGE_ROLE, ..
      requestCreateResidencePropertyAux requestCreateResidencePropertyParams

    createResidenceProperty Service.CreateResidenceProperty{createResidencePropertyRequest} = do
      let createResidencePropertyParams = CreateResidenceProperty with ..
      createResidencePropertyAux createResidencePropertyParams
    
    updateResidence Service.UpdateResidence{propertyKey, newResidencePrice,newResidencePropertyAddress,newResidencePropertyPostalCode,newResidencePropertyDistrict,newResidencePropertyCounty,newResidenceGrossArea,newResidenceUsableArea,newResidenceBedrooms,newResidenceBathrooms,newResidenceFloors,newResidenceType,newResidenceBackyard,newResidenceParking,newResidenceBuildDate,newResidenceOrientation,newResidenceInstalledEquipment,newResidenceAdditionalInformation,newResidenceDescription,newResidencePhotoReferences} = do
      let requestUpdateResidenceParams = UpdateResidence with ..
      updateResidenceAux requestUpdateResidenceParams

---------------------

    requestCreateGarageProperty Service.RequestCreateGarageProperty{id,garageInstrument,garagePrice,propertyAddress,propertyPostalCode,propertyDistrict,propertyCounty,garageArea,garageType,vehicleCapacity,installedEquipment,additionalInformation,description,photoReferences,observers} = do
      let requestCreateGaragePropertyParams = CreateGaragePropertyRequest with permission = MANAGE_ROLE, ..
      requestCreateGaragePropertyAux requestCreateGaragePropertyParams

    createGarageProperty Service.CreateGarageProperty{createGaragePropertyRequest} = do
      let createGaragePropertyParams = CreateGarageProperty with ..
      createGaragePropertyAux createGaragePropertyParams
    
    updateGarage Service.UpdateGarage{propertyKey, newGaragePrice,newGaragePropertyAddress,newGaragePropertyPostalCode,newGaragePropertyDistrict,newGaragePropertyCounty,newGarageArea,newGarageType,newGarageVehicleCapacity,newGarageInstalledEquipment,newGarageAdditionalInformation, newGarageDescription,newGaragePhotoReferences} = do
      let requestUpdateGarageParams = UpdateGarage with ..
      updateGarageAux requestUpdateGarageParams
    

-----------------------------------------------------------------------------------------

    requestCreateWarehouseProperty Service.RequestCreateWarehouseProperty{id,warehouseInstrument,warehousePrice,propertyAddress,propertyPostalCode,propertyDistrict,propertyCounty,warehouseType,grossArea,usableArea,floors,buildDate,installedEquipment,additionalInformation,description,photoReferences,observers} = do
      let requestCreateWarehousePropertyParams = CreateWarehousePropertyRequest with permission = MANAGE_ROLE, ..
      requestCreateWarehousePropertyAux requestCreateWarehousePropertyParams

    createWarehouseProperty Service.CreateWarehouseProperty{createWarehousePropertyRequest} = do
      let createWarehousePropertyParams = CreateWarehouseProperty with ..
      createWarehousePropertyAux createWarehousePropertyParams
    
    updateWarehouse Service.UpdateWarehouse{propertyKey, newWarehousePrice,newWarehousePropertyAddress,newWarehousePropertyPostalCode,newWarehousePropertyDistrict,newWarehousePropertyCounty,newWarehouseType,newWarehouseGrossArea,newWarehouseUsableArea,newWarehouseFloors,newWarehouseBuildDate,newWarehouseInstalledEquipment,newWarehouseAdditionalInformation,newWarehouseDescription,newWarehousePhotoReferences} = do
      let requestUpdateWarehouseParams = UpdateWarehouse with ..
      updateWarehouseAux requestUpdateWarehouseParams


template Offer
  with
    operator : Party
    user : Party
    apartmentPropertyFactoryCid: ContractId ApartmentProperty.Factory
    landPropertyFactoryCid: ContractId LandProperty.Factory
    residencePropertyFactoryCid: ContractId ResidenceProperty.Factory
    garagePropertyFactoryCid: ContractId GarageProperty.Factory
    warehousePropertyFactoryCid: ContractId WarehouseProperty.Factory
  where
  signatory operator
  observer user

  interface instance Service.O for Offer where
    view = Service.OView with operator, user, apartmentPropertyFactoryCid, landPropertyFactoryCid, residencePropertyFactoryCid, garagePropertyFactoryCid, warehousePropertyFactoryCid

    accept Service.Accept = do
      toInterfaceContractId <$> create Service with operator, user, apartmentPropertyFactoryCid, landPropertyFactoryCid, residencePropertyFactoryCid, garagePropertyFactoryCid,warehousePropertyFactoryCid

    decline Service.Decline{} = do
      pure()

    withdraw Service.Withdraw{} = do
      pure()

template Request
  with
    operator : Party
    user : Party
  where
  signatory user
  observer operator

  interface instance Service.R for Request where
    view = Service.RView with operator,user

    approve Service.Approve{operator, apartmentPropertyFactoryCid, landPropertyFactoryCid, residencePropertyFactoryCid, garagePropertyFactoryCid, warehousePropertyFactoryCid} = do
      toInterfaceContractId <$> create Service with operator, user, apartmentPropertyFactoryCid, landPropertyFactoryCid, residencePropertyFactoryCid, garagePropertyFactoryCid, warehousePropertyFactoryCid

    reject Service.Reject{} = do
      pure()
      
    cancel Service.Cancel{} = do
      pure()
