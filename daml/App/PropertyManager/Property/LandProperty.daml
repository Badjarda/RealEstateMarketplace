module App.PropertyManager.Property.LandProperty where

import DA.Set qualified as Set (fromList, singleton)

import Interface.PropertyManager.Property.LandProperty.LandProperty qualified as LandProperty(I, View(..), GetLandInstrumentKey(..), GetLandPrice(..), GetLandPropertyAddress(..), GetLandPropertyPostalCode(..), GetLandPropertyDistrict(..), GetLandPropertyCounty(..), GetLandType(..), GetTotalLandArea(..), GetLandMinimumSurfaceForSale(..), GetLandBuildableArea(..), GetLandBuildableFloors(..), GetLandAccessByRoad(..), GetLandInstalledEquipment(..), GetLandAdditionalInformation(..), GetLandViableConstructionTypes(..), GetLandDescription(..), GetLandPhotoReferences(..), UpdateLand(..), propertyKey, disclosureUpdateReference, createReference)
import Interface.PropertyManager.Property.LandProperty.Factory qualified as LandPropertyFactory(I, View(..), Create(..))
import Interface.PropertyManager.Property.Common (LandType, ViableConstructionTypes)

import Daml.Finance.Interface.Types.Common.Types (Id, PartiesMap, InstrumentKey)
import Daml.Finance.Interface.Util.Disclosure qualified as Disclosure (I, View(..), flattenObservers)
import Daml.Finance.Util.Disclosure(addObserversImpl, removeObserversImpl, setObserversImpl)

template LandProperty
  with
    operator: Party
    user: Party
    id: Id
    instrument: InstrumentKey
    landPrice: Decimal
    propertyAddress: Text
    propertyPostalCode : Text
    propertyDistrict : Text
    propertyCounty : Text
    landType: LandType
    totalLandArea: Decimal
    minimumSurfaceForSale: Decimal
    buildableArea: Decimal
    buildableFloors: Int
    accessByRoad: Bool
    installedEquipment: Text
    viableConstructionTypes: [ViableConstructionTypes]
    additionalInformation: Text
    description: Text
    photoReferences: [Text]
    observers: PartiesMap
  where
    signatory operator, user

    key (operator, user, id) : (Party, Party, Id)
  
    maintainer key._2

    interface instance LandProperty.I for LandProperty where
      view = LandProperty.View with ..

      getKey = LandProperty.propertyKey this

      getLandInstrumentKey LandProperty.GetLandInstrumentKey{} = do 
        pure instrument

      getLandPrice LandProperty.GetLandPrice{} = do 
        pure landPrice

      getLandPropertyAddress LandProperty.GetLandPropertyAddress{} = do 
        pure propertyAddress
      
      getLandPropertyPostalCode LandProperty.GetLandPropertyPostalCode{} = do 
        pure propertyPostalCode

      getLandPropertyDistrict LandProperty.GetLandPropertyDistrict{} = do 
        pure propertyDistrict

      getLandPropertyCounty LandProperty.GetLandPropertyCounty{} = do 
        pure propertyCounty

      getLandType LandProperty.GetLandType{} = do 
        pure landType

      getTotalLandArea LandProperty.GetTotalLandArea{} = do 
        pure totalLandArea

      getLandMinimumSurfaceForSale LandProperty.GetLandMinimumSurfaceForSale{} = do 
        pure minimumSurfaceForSale

      getLandBuildableArea LandProperty.GetLandBuildableArea{} = do 
        pure buildableArea

      getLandBuildableFloors LandProperty.GetLandBuildableFloors{} = do 
        pure buildableFloors

      getLandAccessByRoad LandProperty.GetLandAccessByRoad{} = do 
        pure accessByRoad

      getLandInstalledEquipment LandProperty.GetLandInstalledEquipment{} = do 
        pure installedEquipment

      getLandAdditionalInformation LandProperty.GetLandAdditionalInformation{} = do 
        pure additionalInformation

      getLandViableConstructionTypes LandProperty.GetLandViableConstructionTypes{} = do 
        pure viableConstructionTypes

      getLandDescription LandProperty.GetLandDescription{} = do 
        pure description 
      
      getLandPhotoReferences LandProperty.GetLandPhotoReferences{} = do 
        pure photoReferences 

      updateLand LandProperty.UpdateLand{newLandPrice,newLandPropertyAddress,newLandPropertyPostalCode,newLandPropertyDistrict,newLandPropertyCounty,newLandType,newLandTotalArea,newLandMinimumSurfaceForSale,newLandBuildableArea,newLandBuildableFloors,newLandAccessByRoad,newLandInstalledEquipment,newLandViableConstructionTypes,newLandAdditionalInformation,newLandDescription,newLandPhotoReferences} = do 
        toInterfaceContractId <$> create this with landPrice=newLandPrice,propertyAddress=newLandPropertyAddress,propertyPostalCode=newLandPropertyPostalCode,propertyDistrict=newLandPropertyDistrict,propertyCounty=newLandPropertyCounty,landType=newLandType,totalLandArea=newLandTotalArea, minimumSurfaceForSale=newLandMinimumSurfaceForSale, accessByRoad=newLandAccessByRoad, installedEquipment=newLandInstalledEquipment, viableConstructionTypes=newLandViableConstructionTypes, additionalInformation=newLandAdditionalInformation,description=newLandDescription, photoReferences=newLandPhotoReferences 

    interface instance Disclosure.I for LandProperty where
      view = Disclosure.View with disclosureControllers = Set.fromList [operator, operator]; observers
      setObservers = setObserversImpl this . Some . LandProperty.disclosureUpdateReference $
        LandProperty.propertyKey this
      addObservers = addObserversImpl this . Some . LandProperty.disclosureUpdateReference $
        LandProperty.propertyKey this
      removeObservers = removeObserversImpl this . Some . LandProperty.disclosureUpdateReference $
        LandProperty.propertyKey this

template Factory
  with
    operator : Party
    observers : PartiesMap
  where
    signatory operator
    observer Disclosure.flattenObservers observers

    interface instance LandPropertyFactory.I for Factory where
      view = LandPropertyFactory.View with operator
      
      create' LandPropertyFactory.Create{instrument, propertyKey, landPrice, propertyAddress, propertyPostalCode, propertyDistrict, propertyCounty, landType, totalLandArea, minimumSurfaceForSale, buildableArea, buildableFloors, accessByRoad, installedEquipment, viableConstructionTypes, additionalInformation, description, photoReferences, observers} =
        do
          cid <- toInterfaceContractId <$> create LandProperty with
            operator = propertyKey.operator
            user = propertyKey.user
            id = propertyKey.id, ..
          LandProperty.createReference propertyKey.operator cid
          pure cid

    interface instance Disclosure.I for Factory where
      view = Disclosure.View with disclosureControllers = Set.singleton operator; observers
      setObservers = setObserversImpl @Factory @Disclosure.I this None
      addObservers = addObserversImpl @Factory @Disclosure.I this None
      removeObservers = removeObserversImpl @Factory @Disclosure.I this None
