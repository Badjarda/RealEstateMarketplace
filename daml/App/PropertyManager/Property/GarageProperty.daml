module App.PropertyManager.Property.GarageProperty where

import DA.Set qualified as Set (fromList, singleton)

import Interface.PropertyManager.Property.GarageProperty.GarageProperty qualified as GarageProperty(I, View(..), GetGarageInstrumentKey(..), GetGaragePrice(..), GetGaragePropertyAddress(..), GetGaragePropertyPostalCode(..), GetGaragePropertyDistrict(..), GetGaragePropertyCounty(..), GetGarageType(..), GetGarageArea(..), GetVehicleCapacity(..), GetGarageInstalledEquipment(..), GetGarageAdditionalInformation(..), GetGarageDescription(..), GetGaragePhotoReferences(..), UpdateGarage(..), propertyKey, disclosureUpdateReference, createReference)
import Interface.PropertyManager.Property.GarageProperty.Factory qualified as GaragePropertyFactory(I, View(..), Create(..))
import Interface.PropertyManager.Property.Common (GarageType)

import Daml.Finance.Interface.Types.Common.Types (Id, PartiesMap, InstrumentKey)
import Daml.Finance.Interface.Util.Disclosure qualified as Disclosure (I, View(..), flattenObservers)
import Daml.Finance.Util.Disclosure(addObserversImpl, removeObserversImpl, setObserversImpl)

template GarageProperty
  with
    operator: Party
    user: Party
    id: Id
    instrument: InstrumentKey
    garagePrice : Decimal
    propertyAddress: Text
    propertyPostalCode : Text
    propertyDistrict : Text
    propertyCounty : Text
    garageArea: Decimal
    garageType: GarageType
    vehicleCapacity: Int
    installedEquipment: Text
    additionalInformation: Text
    description: Text
    photoReferences: [Text]
    observers: PartiesMap
  where
    signatory operator, user

    key (operator, user, id) : (Party, Party, Id)
  
    maintainer key._2

    interface instance GarageProperty.I for GarageProperty where
      view = GarageProperty.View with ..

      getKey = GarageProperty.propertyKey this

      getGarageInstrumentKey GarageProperty.GetGarageInstrumentKey{} = do 
        pure instrument
      
      getGaragePrice GarageProperty.GetGaragePrice{} = do 
        pure garagePrice

      getGaragePropertyAddress GarageProperty.GetGaragePropertyAddress{} = do 
        pure propertyAddress
      
      getGaragePropertyPostalCode GarageProperty.GetGaragePropertyPostalCode{} = do 
        pure propertyPostalCode

      getGaragePropertyDistrict GarageProperty.GetGaragePropertyDistrict{} = do 
        pure propertyDistrict

      getGaragePropertyCounty GarageProperty.GetGaragePropertyCounty{} = do 
        pure propertyCounty

      getGarageType GarageProperty.GetGarageType{} = do 
        pure garageType

      getGarageArea GarageProperty.GetGarageArea{} = do 
        pure garageArea

      getVehicleCapacity GarageProperty.GetVehicleCapacity{} = do 
        pure vehicleCapacity

      getGarageInstalledEquipment GarageProperty.GetGarageInstalledEquipment{} = do 
        pure installedEquipment

      getGarageAdditionalInformation GarageProperty.GetGarageAdditionalInformation{} = do 
        pure additionalInformation

      getGarageDescription GarageProperty.GetGarageDescription{} = do 
        pure description 

      getGaragePhotoReferences GarageProperty.GetGaragePhotoReferences{} = do 
        pure photoReferences 

      updateGarage GarageProperty.UpdateGarage{newGaragePrice,newGaragePropertyAddress,newGaragePropertyPostalCode,newGaragePropertyDistrict,newGaragePropertyCounty,newGarageArea,newGarageType,newGarageVehicleCapacity,newGarageInstalledEquipment,newGarageAdditionalInformation, newGarageDescription,newGaragePhotoReferences} = do 
        toInterfaceContractId <$> create this with garagePrice = newGaragePrice, propertyAddress=newGaragePropertyAddress,propertyPostalCode=newGaragePropertyPostalCode,propertyDistrict=newGaragePropertyDistrict, propertyCounty=newGaragePropertyCounty,garageArea=newGarageArea,garageType=newGarageType,vehicleCapacity=newGarageVehicleCapacity,installedEquipment=newGarageInstalledEquipment,additionalInformation=newGarageAdditionalInformation, description=newGarageDescription, photoReferences=newGaragePhotoReferences

    interface instance Disclosure.I for GarageProperty where
      view = Disclosure.View with disclosureControllers = Set.fromList [operator, operator]; observers
      setObservers = setObserversImpl this . Some . GarageProperty.disclosureUpdateReference $
        GarageProperty.propertyKey this
      addObservers = addObserversImpl this . Some . GarageProperty.disclosureUpdateReference $
        GarageProperty.propertyKey this
      removeObservers = removeObserversImpl this . Some . GarageProperty.disclosureUpdateReference $
        GarageProperty.propertyKey this

template Factory
  with
    operator : Party
    observers : PartiesMap
  where
    signatory operator
    observer Disclosure.flattenObservers observers

    interface instance GaragePropertyFactory.I for Factory where
      view = GaragePropertyFactory.View with operator
      
      create' GaragePropertyFactory.Create{instrument, propertyKey, garagePrice, propertyAddress, propertyPostalCode, propertyDistrict, propertyCounty, garageType, garageArea, vehicleCapacity, installedEquipment, additionalInformation, description, photoReferences, observers} =
        do
          cid <- toInterfaceContractId <$> create GarageProperty with
            operator = propertyKey.operator
            user = propertyKey.user
            id = propertyKey.id, ..
          GarageProperty.createReference propertyKey.operator cid
          pure cid

    interface instance Disclosure.I for Factory where
      view = Disclosure.View with disclosureControllers = Set.singleton operator; observers
      setObservers = setObserversImpl @Factory @Disclosure.I this None
      addObservers = addObserversImpl @Factory @Disclosure.I this None
      removeObservers = removeObserversImpl @Factory @Disclosure.I this None
