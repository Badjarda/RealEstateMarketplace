module App.PropertyManager.Property.WarehouseProperty where

import DA.Set qualified as Set (fromList, singleton)

import Interface.PropertyManager.Property.WarehouseProperty.WarehouseProperty qualified as WarehouseProperty(I, View(..), GetWarehouseInstrumentKey(..), GetWarehousePrice(..), GetWarehousePropertyAddress(..), GetWarehousePropertyPostalCode(..), GetWarehousePropertyDistrict(..), GetWarehousePropertyCounty(..), GetWarehouseType(..), GetWarehouseGrossArea(..), GetWarehouseUsableArea(..), GetWarehouseFloors(..), GetWarehouseBuildDate(..), GetWarehouseInstalledEquipment(..), GetWarehouseAdditionalInformation(..), GetWarehouseDescription(..), GetWarehousePhotoReferences(..), UpdateWarehouse(..), propertyKey, disclosureUpdateReference, createReference)
import Interface.PropertyManager.Property.WarehouseProperty.Factory qualified as WarehousePropertyFactory(I, View(..), Create(..))
import Interface.PropertyManager.Property.Common (WarehouseType)

import Daml.Finance.Interface.Types.Common.Types (Id, PartiesMap, InstrumentKey)
import Daml.Finance.Interface.Util.Disclosure qualified as Disclosure (I, View(..), flattenObservers)
import Daml.Finance.Util.Disclosure(addObserversImpl, removeObserversImpl, setObserversImpl)

template WarehouseProperty
  with
    operator: Party
    user: Party
    id: Id
    instrument: InstrumentKey
    warehousePrice: Decimal
    propertyAddress: Text
    propertyPostalCode : Text
    propertyDistrict : Text
    propertyCounty : Text
    warehouseType: WarehouseType 
    grossArea: Decimal
    usableArea: Decimal
    floors: Int
    buildDate: Date
    installedEquipment: Text
    additionalInformation: Text
    description: Text
    photoReferences: [Text]
    observers: PartiesMap
  where
    signatory operator, user

    key (operator, user, id) : (Party, Party, Id)
  
    maintainer key._2

    interface instance WarehouseProperty.I for WarehouseProperty where
      view = WarehouseProperty.View with ..

      getKey = WarehouseProperty.propertyKey this

      getWarehouseInstrumentKey WarehouseProperty.GetWarehouseInstrumentKey{} = do 
        pure instrument
      
      getWarehousePrice WarehouseProperty.GetWarehousePrice{} = do 
        pure warehousePrice

      getWarehousePropertyAddress WarehouseProperty.GetWarehousePropertyAddress{} = do 
        pure propertyAddress
      
      getWarehousePropertyPostalCode WarehouseProperty.GetWarehousePropertyPostalCode{} = do 
        pure propertyPostalCode

      getWarehousePropertyDistrict WarehouseProperty.GetWarehousePropertyDistrict{} = do 
        pure propertyDistrict

      getWarehousePropertyCounty WarehouseProperty.GetWarehousePropertyCounty{} = do 
        pure propertyCounty

      getWarehouseType WarehouseProperty.GetWarehouseType{} = do 
        pure warehouseType

      getWarehouseGrossArea WarehouseProperty.GetWarehouseGrossArea{} = do 
        pure grossArea

      getWarehouseUsableArea WarehouseProperty.GetWarehouseUsableArea{} = do 
        pure usableArea
      
      getWarehouseFloors WarehouseProperty.GetWarehouseFloors{} = do 
        pure floors

      getWarehouseBuildDate WarehouseProperty.GetWarehouseBuildDate{} = do 
        pure buildDate

      getWarehouseInstalledEquipment WarehouseProperty.GetWarehouseInstalledEquipment{} = do 
        pure installedEquipment

      getWarehouseAdditionalInformation WarehouseProperty.GetWarehouseAdditionalInformation{} = do 
        pure additionalInformation

      getWarehouseDescription WarehouseProperty.GetWarehouseDescription{} = do 
        pure description
      
      getWarehousePhotoReferences WarehouseProperty.GetWarehousePhotoReferences{} = do 
        pure photoReferences

      updateWarehouse WarehouseProperty.UpdateWarehouse{newWarehousePrice,newWarehousePropertyAddress,newWarehousePropertyPostalCode,newWarehousePropertyDistrict,newWarehousePropertyCounty,newWarehouseType,newWarehouseGrossArea,newWarehouseUsableArea,newWarehouseFloors,newWarehouseBuildDate,newWarehouseInstalledEquipment,newWarehouseAdditionalInformation,newWarehouseDescription,newWarehousePhotoReferences} = do 
        toInterfaceContractId <$> create this with warehousePrice=newWarehousePrice,propertyAddress=newWarehousePropertyAddress,propertyPostalCode=newWarehousePropertyPostalCode,propertyDistrict=newWarehousePropertyDistrict,propertyCounty=newWarehousePropertyCounty,warehouseType=newWarehouseType,grossArea=newWarehouseGrossArea,usableArea=newWarehouseUsableArea,floors=newWarehouseFloors,buildDate=newWarehouseBuildDate,installedEquipment=newWarehouseInstalledEquipment,additionalInformation=newWarehouseAdditionalInformation,description=newWarehouseDescription,photoReferences=newWarehousePhotoReferences

    interface instance Disclosure.I for WarehouseProperty where
      view = Disclosure.View with disclosureControllers = Set.fromList [operator, operator]; observers
      setObservers = setObserversImpl this . Some . WarehouseProperty.disclosureUpdateReference $
        WarehouseProperty.propertyKey this
      addObservers = addObserversImpl this . Some . WarehouseProperty.disclosureUpdateReference $
        WarehouseProperty.propertyKey this
      removeObservers = removeObserversImpl this . Some . WarehouseProperty.disclosureUpdateReference $
        WarehouseProperty.propertyKey this

template Factory
  with
    operator : Party
    observers : PartiesMap
  where
    signatory operator
    observer Disclosure.flattenObservers observers

    interface instance WarehousePropertyFactory.I for Factory where
      view = WarehousePropertyFactory.View with operator
      
      create' WarehousePropertyFactory.Create{instrument, propertyKey, warehousePrice, propertyAddress, propertyPostalCode, propertyDistrict, propertyCounty, warehouseType, grossArea, usableArea, floors, buildDate, installedEquipment, additionalInformation, description,photoReferences,observers} =
        do
          cid <- toInterfaceContractId <$> create WarehouseProperty with
            operator = propertyKey.operator
            user = propertyKey.user
            id = propertyKey.id, ..
          WarehouseProperty.createReference propertyKey.operator cid
          pure cid

    interface instance Disclosure.I for Factory where
      view = Disclosure.View with disclosureControllers = Set.singleton operator; observers
      setObservers = setObserversImpl @Factory @Disclosure.I this None
      addObservers = addObserversImpl @Factory @Disclosure.I this None
      removeObservers = removeObserversImpl @Factory @Disclosure.I this None
