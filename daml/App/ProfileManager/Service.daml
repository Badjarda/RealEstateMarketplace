module App.ProfileManager.Service where

import Interface.ProfileManager.Service qualified as Service(I, R, O, View(..), OView(..), RView(..),RequestCreateUserProfile(..), UpdateProfile(..), CreateUserProfile(..), Accept(..), Decline(..), Withdraw(..), Approve(..), Reject(..), Cancel(..))
import Interface.ProfileManager.UserProfile.Factory qualified as UserProfile(Factory(..))
import Interface.Base.Service qualified as Base (I, View(..))
import Interface.RoleManager.UserRole.Permission
import App.ProfileManager.Util (CreateUserProfileRequest(..), CreateUserProfile(..), UpdateProfile(..), requestCreateUserProfileAux, createUserProfileAux, updateProfileAux)

type T = Service

template Service 
  with
    operator: Party
    user: Party
    userProfileFactoryCid: ContractId UserProfile.Factory 
  where
  signatory operator, user

  key (operator, user) : (Party, Party)
  maintainer key._1

  interface instance Base.I for Service where
    view = Base.View with operator; user
    terminate = pure ()

  interface instance Service.I for Service where
    view = Service.View with userProfileFactoryCid

    asBase = toInterface @Base.I this

    requestCreateUserProfile Service.RequestCreateUserProfile{id,username,firstName,lastName,fullName,password,birthday,gender,nationality,contactMail,cellphoneNumber,idNumber,taxId,socialSecurityId,photoReferences,observers} = do
      let requestCreateUserProfileParams = CreateUserProfileRequest with permission = MANAGE_ROLE, ..
      requestCreateUserProfileAux requestCreateUserProfileParams

    createUserProfile Service.CreateUserProfile{createUserProfileRequest} = do
      let createUserProfileParams = CreateUserProfile with ..
      createUserProfileAux createUserProfileParams

    updateProfile Service.UpdateProfile{userProfileKey, newUsername,newFirstName,newLastName,newFullName,newPassword,newBirthday,newGender,newNationality,newContactMail,newCellphoneNumber,newIdNumber,newTaxId,newSocialSecurityId,newPhotoReferences} = do
      let requestUpdateProfileParams = UpdateProfile with ..
      updateProfileAux requestUpdateProfileParams

template Offer
  with
    operator : Party
    user : Party
    userProfileFactoryCid: ContractId UserProfile.Factory 
  where
  signatory operator
  observer user

  interface instance Service.O for Offer where
    view = Service.OView with operator, user, userProfileFactoryCid

    accept Service.Accept = do
      toInterfaceContractId <$> create Service with operator, user, userProfileFactoryCid

    decline Service.Decline{} = do
      pure()

    withdraw Service.Withdraw{} = do
      pure()

template Request
  with
    operator : Party
    user : Party
  where
  signatory user
  observer operator

  interface instance Service.R for Request where
    view = Service.RView with operator,user

    approve Service.Approve{operator, userProfileFactoryCid} = do
      toInterfaceContractId <$> create Service with operator, user, userProfileFactoryCid

    reject Service.Reject{} = do
      pure()
      
    cancel Service.Cancel{} = do
      pure()

