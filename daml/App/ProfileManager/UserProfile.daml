module App.ProfileManager.UserProfile where

import DA.Set qualified as Set (fromList, singleton)

import Interface.ProfileManager.UserProfile.UserProfile qualified as UserProfile(I, View(..), GetUsername(..), GetFirstName(..), GetLastName(..), GetFullName(..), GetPassword(..),GetContactMail(..), GetBirthday(..), GetGender(..), GetNationality(..), GetCellphoneNumber(..), GetTaxId(..), GetIdNumber(..), GetSocialSecurityId(..), GetPhotoReferences(..), UpdateProfile(..), userProfileKey, disclosureUpdateReference, createReference)
import Interface.ProfileManager.UserProfile.Factory qualified as UserProfileFactory(I, View(..), Create(..))
import Interface.ProfileManager.UserProfile.Common (Nationality(..), Gender(..))

import Daml.Finance.Interface.Types.Common.Types (Id, PartiesMap)
import Daml.Finance.Interface.Util.Disclosure qualified as Disclosure (I, View(..), flattenObservers)
import Daml.Finance.Util.Disclosure(addObserversImpl, removeObserversImpl, setObserversImpl)


template UserProfile
  with
    operator: Party
    user: Party
    id: Id
    username: Text
    firstName: Text
    lastName: Text
    fullName: Text
    password: Text
    birthday: Date
    gender: Optional Gender
    nationality: Nationality
    contactMail: Text
    cellphoneNumber: Optional Int
    idNumber: Int
    taxId: Int
    socialSecurityId: Int
    photoReferences: [Text]
    observers : PartiesMap
  where
    signatory operator
    observer Disclosure.flattenObservers observers, user

    key (operator, user) : (Party, Party)
  
    maintainer key._1

    interface instance UserProfile.I for UserProfile where
      view = UserProfile.View with ..

      getKey = UserProfile.userProfileKey this

      getUsername UserProfile.GetUsername{} = do 
        pure username

      getFirstName UserProfile.GetFirstName{} = do 
        pure firstName

      getLastName UserProfile.GetLastName{} = do 
        pure lastName

      getFullName UserProfile.GetFullName{} = do 
        pure fullName

      getPassword UserProfile.GetPassword{} = do 
        pure password

      getBirthday UserProfile.GetBirthday{} = do 
        pure birthday

      getGender UserProfile.GetGender{} = do 
        pure gender

      getNationality UserProfile.GetNationality{} = do 
        pure nationality

      getContactMail UserProfile.GetContactMail{} = do 
        pure contactMail
      
      getCellphoneNumber UserProfile.GetCellphoneNumber{} = do 
        pure cellphoneNumber
      
      getIdNumber UserProfile.GetIdNumber{} = do 
        pure idNumber

      getTaxId UserProfile.GetTaxId{} = do 
        pure taxId
      
      getSocialSecurityId UserProfile.GetSocialSecurityId{} = do 
        pure socialSecurityId
      
      getPhotoReferences UserProfile.GetPhotoReferences{} = do 
        pure photoReferences

      updateProfile UserProfile.UpdateProfile{newUsername,newFirstName,newLastName,newFullName,newPassword,newBirthday,newGender,newNationality,newContactMail,newCellphoneNumber,newIdNumber,newTaxId,newSocialSecurityId,newPhotoReferences} = do 
        toInterfaceContractId <$> create this with username=newUsername,firstName=newFirstName,lastName=newLastName,fullName=newFullName,password=newPassword,birthday=newBirthday,gender=newGender,nationality=newNationality,contactMail=newContactMail,cellphoneNumber=newCellphoneNumber,idNumber=newIdNumber,taxId=newTaxId,socialSecurityId=newSocialSecurityId,photoReferences=newPhotoReferences

    interface instance Disclosure.I for UserProfile where
      view = Disclosure.View with disclosureControllers = Set.fromList [operator, operator]; observers
      setObservers = setObserversImpl this . Some . UserProfile.disclosureUpdateReference $
        UserProfile.userProfileKey this
      addObservers = addObserversImpl this . Some . UserProfile.disclosureUpdateReference $
        UserProfile.userProfileKey this
      removeObservers = removeObserversImpl this . Some . UserProfile.disclosureUpdateReference $
        UserProfile.userProfileKey this

template Factory
  with
    operator : Party
    observers : PartiesMap
  where
    signatory operator
    observer Disclosure.flattenObservers observers

    interface instance UserProfileFactory.I for Factory where
      view = UserProfileFactory.View with operator
      
      create' UserProfileFactory.Create{userProfileKey, username, firstName, lastName, fullName, password, birthday, gender, nationality, contactMail, cellphoneNumber, idNumber, taxId, socialSecurityId, photoReferences, observers} =
        do
          cid <- toInterfaceContractId <$> create UserProfile with
            operator = userProfileKey.operator
            user = userProfileKey.user
            id = userProfileKey.id, ..
          UserProfile.createReference userProfileKey.operator cid
          pure cid

    interface instance Disclosure.I for Factory where
      view = Disclosure.View with disclosureControllers = Set.singleton operator; observers
      setObservers = setObserversImpl @Factory @Disclosure.I this None
      addObservers = addObserversImpl @Factory @Disclosure.I this None
      removeObservers = removeObserversImpl @Factory @Disclosure.I this None