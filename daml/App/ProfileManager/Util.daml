module App.ProfileManager.Util where

import Interface.Common.Util (fetchAndRemove)
import Interface.RoleManager.UserRole.Permission
import Interface.Common.Types (UserProfileKey(..))
import Interface.ProfileManager.UserProfile.Common (Nationality(..), Gender(..))
import Interface.ProfileManager.Choices.RequestCreateUserProfile qualified as RequestCreateUserProfile (I, View(..))
import Interface.ProfileManager.UserProfile.Factory qualified as UserRole (Create(..))
import Interface.ProfileManager.UserProfile.UserProfile qualified as UserProfile(R(..), UpdateProfile(..), SetCid(..))

import App.Util qualified as UserUtil (hasPermission)
import App.ProfileManager.Model
import App.Credential.Credential
import Interface.ProfileManager.UserProfile.Factory qualified as UserProfile(Factory(..), Create(..))

import Daml.Finance.Interface.Types.Common.Types (PartiesMap, Id)


data CreateUserProfileRequest = CreateUserProfileRequest
  with
    operator: Party
    user: Party
    id: Id
    username: Text
    firstName: Text
    lastName: Text
    fullName: Text
    password: Text
    birthday: Date
    gender: Optional Gender
    nationality: Nationality
    contactMail: Text
    cellphoneNumber: Optional Int
    idNumber: Int
    taxId: Int
    socialSecurityId: Int
    photoReferences: [Text]
    observers: PartiesMap
    permission: Permission

requestCreateUserProfileAux : CreateUserProfileRequest -> Update (ContractId RequestCreateUserProfile.I)
requestCreateUserProfileAux request = do
  (_, credential) <-  fetchByKey @Credential (request.operator, request.user)
  permission <- UserUtil.hasPermission credential.roles request.permission
  assertMsg "You do not have permission to request the creation of a user role" permission 
  toInterfaceContractId <$> create RequestCreateUserProfile with 
    operator = request.operator
    user = request.user
    id = request.id
    username = request.username
    firstName = request.firstName
    lastName = request.lastName
    fullName = request.fullName
    password = request.password
    birthday = request.birthday
    gender = request.gender
    nationality = request.nationality
    contactMail = request.contactMail
    cellphoneNumber = request.cellphoneNumber
    idNumber = request.idNumber
    taxId = request.taxId
    socialSecurityId = request.socialSecurityId
    photoReferences = request.photoReferences
    observers = request.observers

data CreateUserProfile = CreateUserProfile
  with
    operator : Party
    user : Party
    createUserProfileRequest: ContractId RequestCreateUserProfile.I
    userProfileFactoryCid: ContractId UserProfile.Factory 

createUserProfileAux : CreateUserProfile -> Update (UserProfileKey)
createUserProfileAux request = do
  RequestCreateUserProfile.View{id,username,firstName,lastName,fullName,password,birthday,gender,nationality,contactMail,cellphoneNumber,idNumber,taxId,socialSecurityId,photoReferences,observers} <- view <$> fetchAndRemove request.createUserProfileRequest
  let userProfile = UserProfileKey with operator = request.operator, user = request.user, id = id
  exercise request.userProfileFactoryCid UserProfile.Create with userProfileKey = userProfile, ..
  pure userProfile

data UpdateProfile = UpdateProfile
  with
    operator: Party
    user: Party
    userProfileKey: UserProfileKey
    newUsername : Text
    newFirstName : Text
    newLastName : Text
    newFullName : Text
    newPassword : Text
    newBirthday : Date
    newGender : Optional Gender
    newNationality : Nationality
    newContactMail : Text
    newCellphoneNumber : Optional Int
    newIdNumber : Int
    newTaxId : Int
    newSocialSecurityId : Int
    newPhotoReferences : [Text]

updateProfileAux: UpdateProfile -> Update ()
updateProfileAux request = do
  (refCid, ref) <- fetchByKey @UserProfile.R (request.userProfileKey)
  cid <- exercise ref.cid UserProfile.UpdateProfile with 
    newUsername = request.newUsername,
      newFirstName = request.newFirstName,
      newLastName = request.newLastName,
      newFullName = request.newFullName,
      newPassword = request.newPassword,
      newBirthday = request.newBirthday,
      newGender = request.newGender,
      newNationality = request.newNationality,
      newContactMail = request.newContactMail,
      newCellphoneNumber = request.newCellphoneNumber,
      newIdNumber = request.newIdNumber,
      newTaxId = request.newTaxId,
      newSocialSecurityId = request.newSocialSecurityId,
      newPhotoReferences = request.newPhotoReferences
  exercise refCid UserProfile.SetCid with newCid = cid
  pure()