module Test.Util.Script.Workflow where

import DA.Set (fromList, singleton)
import DA.Optional (fromSome)

import Interface.RoleManager.Service qualified as RoleManagerService (I, CreateUserRole(..), DeleteUserRole(..), AddPermissionToUserRole(..), RemovePermissionInUserRole(..), UpdateUserRole(..))
import Interface.ProfileManager.Service qualified as ProfileManagerService(I, RequestCreateUserProfile(..), CreateUserProfile(..), UpdateProfile(..))
import Interface.PropertyManager.Service qualified as PropertyManagerService (I, RequestCreateApartmentProperty(..), RequestCreateLandProperty(..), RequestCreateResidenceProperty(..), RequestCreateGarageProperty(..), CreateApartmentProperty(..), UpdateApartment(..), CreateLandProperty(..), UpdateLand(..), CreateResidenceProperty(..), UpdateResidence(..), CreateGarageProperty(..), UpdateGarage(..), RequestCreateWarehouseProperty(..), CreateWarehouseProperty(..), UpdateWarehouse(..))
import Interface.Custody.Service qualified as CustodyService (I, OpenAccount(..), RequestOpenAccount(..), RequestDeposit(..), Deposit(..), CloseAccount(..), RequestCloseAccount(..), Withdrawal(..), RequestWithdraw(..), RequestSwap(..), AtomicSwapApartment(..), AtomicSwapLand(..), AtomicSwapGarage(..), AtomicSwapResidence(..), AtomicSwapWarehouse(..))
import Interface.Issuance.Service qualified as IssuanceService (I, RequestIssue(..), Issue(..), RequestDeIssue(..), DeIssue(..))

import Interface.Common.Types (UserRoleKey(..), PropertyKey(..), UserProfileKey(..))
import Interface.ProfileManager.UserProfile.Common (Nationality(..), Gender(..))
import Interface.PropertyManager.Property.Common (WarehouseType(..),GarageType(..), LandType(..), ViableConstructionTypes(..), ResidenceType(..), Parking(..), Orientation(..))
import Interface.RoleManager.UserRole.Permission

import Interface.Issuance.Issuance qualified as Issuance (I)

import App.RoleManager.Service qualified as RoleManagerService (T)
import App.PropertyManager.Service qualified as PropertyManagerService (T)
import App.ProfileManager.Service qualified as ProfileManagerService (T)
import App.Custody.Service qualified as CustodyService (T)
import App.Issuance.Service qualified as IssuanceService (T)

import Daml.Finance.Interface.Holding.Holding qualified as Holding (I)
import Daml.Finance.Interface.Types.Common.Types (AccountKey, Id(..), InstrumentQuantity, PartiesMap, InstrumentKey, HoldingStandard(..), Id)
import Daml.Finance.Instrument.Token.Instrument qualified as Token (Instrument(..))
import Daml.Finance.Interface.Instrument.Base.Instrument qualified as Instrument (GetView(..), I, Reference(..))
import Daml.Finance.Interface.Account.Account qualified as Account (Controllers(..))
import Daml.Finance.Interface.Holding.Transferable qualified as Transferable (I, Transfer(..))
import Daml.Script

-- Custody Service

openAccount : Party -> Party -> Party -> Text -> PartiesMap -> Script (AccountKey)
openAccount operator user public id observers = do
  let controllers = Account.Controllers with outgoing = singleton user; incoming = singleton user
  serviceCid <- toInterfaceContractId @CustodyService.I . fst . fromSome <$> queryContractKey @CustodyService.T user (operator, user)
  openAccountRequestCid <- submitMulti [user] [public] do exerciseCmd serviceCid CustodyService.RequestOpenAccount with id = Id id; description = id; controllers; observers
  submitMulti [operator] [public] do exerciseCmd serviceCid CustodyService.OpenAccount with openAccountRequestCid

closeAccount : Party -> Party -> Party -> AccountKey -> PartiesMap -> Script ()
closeAccount operator user public account observers = do
  serviceCid <- toInterfaceContractId @CustodyService.I . fst . fromSome <$> queryContractKey @CustodyService.T user (operator, user)
  closeAccountRequestCid <- submitMulti [user] [public] do exerciseCmd serviceCid CustodyService.RequestCloseAccount with account
  submitMulti [operator] [public] do exerciseCmd serviceCid CustodyService.CloseAccount with closeAccountRequestCid

deposit : Party -> Party -> Party -> InstrumentQuantity -> AccountKey -> Script (ContractId Holding.I)
deposit operator user public quantity account = do
  serviceCid <- toInterfaceContractId @CustodyService.I . fst . fromSome <$> queryContractKey @CustodyService.T user (operator, user)
  depositRequestCid <- submitMulti [user] [public] do exerciseCmd serviceCid CustodyService.RequestDeposit with quantity; account
  submitMulti [operator] [public] do exerciseCmd serviceCid CustodyService.Deposit with depositRequestCid

withdrawal : Party -> Party -> Party -> ContractId Holding.I -> Script ()
withdrawal operator user public holdingCid = do
  serviceCid <- toInterfaceContractId @CustodyService.I . fst . fromSome <$> queryContractKey @CustodyService.T user (operator, user)
  withdrawRequestCid <- submitMulti [user] [public] do exerciseCmd serviceCid CustodyService.RequestWithdraw with holdingCid
  submitMulti [operator] [user] do exerciseCmd serviceCid CustodyService.Withdrawal with withdrawRequestCid

originateToken : Party -> Party -> PartiesMap -> Time -> Text -> Text -> Script InstrumentKey
originateToken depository issuer observers validAsOf id description = do
  cid <- coerceContractId <$> submitMulti [depository, issuer] [] do
    createCmd Token.Instrument with depository; issuer; id = Id id; version = "0"; observers; validAsOf; description; holdingStandard = TransferableFungible
  createReference cid depository issuer observers

createReference : ContractId Instrument.I -> Party -> Party -> PartiesMap -> Script InstrumentKey
createReference cid depository issuer observers = do
  instrumentView <- submitMulti [depository, issuer] [] do exerciseCmd cid Instrument.GetView with viewer = issuer
  let ref = Instrument.Reference with instrumentView; cid; observers
  submitMulti [depository, issuer] [] do createCmd ref
  pure $ key ref

issue : Party -> Party -> Party -> InstrumentQuantity -> AccountKey -> Script (ContractId Issuance.I, ContractId Holding.I)
issue operator user public quantity account = do
  let
    issuanceId = Id $ "ISSUANCE-" <> show quantity.unit.id
    description = "Issuance of " <> show quantity.amount <> " " <> show quantity.unit.id
  serviceCid <- toInterfaceContractId @IssuanceService.I . fst . fromSome <$> queryContractKey @IssuanceService.T user (operator, user)
  issueRequestCid <- submitMulti [user] [public] do exerciseCmd serviceCid IssuanceService.RequestIssue with issuanceId; description; quantity; account
  submitMulti [operator] [public] do exerciseCmd serviceCid IssuanceService.Issue with issueRequestCid

deIssue : Party -> Party -> Party -> InstrumentQuantity -> ContractId Holding.I -> Script (ContractId Issuance.I)
deIssue operator user public quantity holdingCid = do
  let
    issuanceId = Id $ "ISSUANCE-" <> show quantity.unit.id
    description = "Issuance of " <> show quantity.amount <> " " <> show quantity.unit.id
  serviceCid <- toInterfaceContractId @IssuanceService.I . fst . fromSome <$> queryContractKey @IssuanceService.T user (operator, user)
  deIssueRequestCid <- submitMulti [user] [public] do exerciseCmd serviceCid IssuanceService.RequestDeIssue with issuanceId; holdingCid
  submitMulti [operator] [public] do exerciseCmd serviceCid IssuanceService.DeIssue with deIssueRequestCid

transfer : Party -> AccountKey -> Party -> ContractId Transferable.I -> Script (ContractId Transferable.I)
transfer from toAccount public depositCid = do
  submitMulti [from, toAccount.owner] [public] do exerciseCmd depositCid Transferable.Transfer with actors = fromList [from, toAccount.owner]; newOwnerAccount = toAccount

atomicSwapApartment : Party -> Party -> Party -> Party -> AccountKey -> ContractId Transferable.I -> PropertyKey -> AccountKey -> ContractId Transferable.I -> Decimal -> Script ()
atomicSwapApartment operator seller buyer public sellerAccount transferableHoldingCid propertyKey buyerAccount fungibleHoldingCid fungibleAmount = do
  sellerServiceCid <- toInterfaceContractId @CustodyService.I . fst . fromSome <$> queryContractKey @CustodyService.T seller (operator, seller)
  buyerServiceCid <- toInterfaceContractId @CustodyService.I . fst . fromSome <$> queryContractKey @CustodyService.T buyer (operator, buyer)
  transferRequestCid <- submitMulti [buyer,seller] [public] do exerciseCmd buyerServiceCid CustodyService.RequestSwap with seller, sellerAccount, buyerAccount, fungibleHoldingCid, fungibleAmount, transferableHoldingCid
  submitMulti [seller,buyer] [public] do exerciseCmd sellerServiceCid CustodyService.AtomicSwapApartment with seller, buyer, sellerAccount, propertyKey, transferRequestCid
  pure()

atomicSwapLand : Party -> Party -> Party -> Party -> AccountKey -> ContractId Transferable.I -> PropertyKey -> AccountKey -> ContractId Transferable.I -> Decimal -> Script ()
atomicSwapLand operator seller buyer public sellerAccount transferableHoldingCid propertyKey buyerAccount fungibleHoldingCid fungibleAmount = do
  sellerServiceCid <- toInterfaceContractId @CustodyService.I . fst . fromSome <$> queryContractKey @CustodyService.T seller (operator, seller)
  buyerServiceCid <- toInterfaceContractId @CustodyService.I . fst . fromSome <$> queryContractKey @CustodyService.T buyer (operator, buyer)
  transferRequestCid <- submitMulti [buyer,seller] [public] do exerciseCmd buyerServiceCid CustodyService.RequestSwap with seller, sellerAccount, buyerAccount, fungibleHoldingCid, fungibleAmount, transferableHoldingCid
  submitMulti [seller,buyer] [public] do exerciseCmd sellerServiceCid CustodyService.AtomicSwapLand with seller, buyer, sellerAccount, propertyKey, transferRequestCid
  pure()

atomicSwapGarage : Party -> Party -> Party -> Party -> AccountKey -> ContractId Transferable.I -> PropertyKey -> AccountKey -> ContractId Transferable.I -> Decimal -> Script ()
atomicSwapGarage operator seller buyer public sellerAccount transferableHoldingCid propertyKey buyerAccount fungibleHoldingCid fungibleAmount = do
  sellerServiceCid <- toInterfaceContractId @CustodyService.I . fst . fromSome <$> queryContractKey @CustodyService.T seller (operator, seller)
  buyerServiceCid <- toInterfaceContractId @CustodyService.I . fst . fromSome <$> queryContractKey @CustodyService.T buyer (operator, buyer)
  transferRequestCid <- submitMulti [buyer,seller] [public] do exerciseCmd buyerServiceCid CustodyService.RequestSwap with seller, sellerAccount, buyerAccount, fungibleHoldingCid, fungibleAmount, transferableHoldingCid
  submitMulti [seller,buyer] [public] do exerciseCmd sellerServiceCid CustodyService.AtomicSwapGarage with seller, buyer, sellerAccount, propertyKey, transferRequestCid
  pure()

atomicSwapResidence : Party -> Party -> Party -> Party -> AccountKey -> ContractId Transferable.I -> PropertyKey -> AccountKey -> ContractId Transferable.I -> Decimal -> Script ()
atomicSwapResidence operator seller buyer public sellerAccount transferableHoldingCid propertyKey buyerAccount fungibleHoldingCid fungibleAmount = do
  sellerServiceCid <- toInterfaceContractId @CustodyService.I . fst . fromSome <$> queryContractKey @CustodyService.T seller (operator, seller)
  buyerServiceCid <- toInterfaceContractId @CustodyService.I . fst . fromSome <$> queryContractKey @CustodyService.T buyer (operator, buyer)
  transferRequestCid <- submitMulti [buyer,seller] [public] do exerciseCmd buyerServiceCid CustodyService.RequestSwap with seller, sellerAccount, buyerAccount, fungibleHoldingCid, fungibleAmount, transferableHoldingCid
  submitMulti [seller,buyer] [public] do exerciseCmd sellerServiceCid CustodyService.AtomicSwapResidence with seller, buyer, sellerAccount, propertyKey, transferRequestCid
  pure()

atomicSwapWarehouse : Party -> Party -> Party -> Party -> AccountKey -> ContractId Transferable.I -> PropertyKey -> AccountKey -> ContractId Transferable.I -> Decimal -> Script ()
atomicSwapWarehouse operator seller buyer public sellerAccount transferableHoldingCid propertyKey buyerAccount fungibleHoldingCid fungibleAmount = do
  sellerServiceCid <- toInterfaceContractId @CustodyService.I . fst . fromSome <$> queryContractKey @CustodyService.T seller (operator, seller)
  buyerServiceCid <- toInterfaceContractId @CustodyService.I . fst . fromSome <$> queryContractKey @CustodyService.T buyer (operator, buyer)
  transferRequestCid <- submitMulti [buyer,seller] [public] do exerciseCmd buyerServiceCid CustodyService.RequestSwap with seller, sellerAccount, buyerAccount, fungibleHoldingCid, fungibleAmount, transferableHoldingCid
  submitMulti [seller,buyer] [public] do exerciseCmd sellerServiceCid CustodyService.AtomicSwapWarehouse with seller, buyer, sellerAccount, propertyKey, transferRequestCid
  pure()

-- UserRoleManager Service

createUserRole : Party -> Party -> Party -> Id -> Text -> [Permission] -> PartiesMap -> Script (UserRoleKey)
createUserRole operator user public id description permissions observers = do
  serviceCid <- toInterfaceContractId @RoleManagerService.I . fst . fromSome <$> queryContractKey @RoleManagerService.T user (operator, user)
  submitMulti [operator] [public] do exerciseCmd serviceCid RoleManagerService.CreateUserRole with ..

deleteUserRole : Party -> Party -> Party -> UserRoleKey -> Script ()
deleteUserRole operator user public userRole = do
  serviceCid <- toInterfaceContractId @RoleManagerService.I . fst . fromSome <$> queryContractKey @RoleManagerService.T user (operator, user)
  submitMulti [operator] [public] do exerciseCmd serviceCid RoleManagerService.DeleteUserRole with ..

addPermissionToUserRole : Party -> Party -> Party -> UserRoleKey -> Permission -> Script ()
addPermissionToUserRole operator user public userRole permission = do
  serviceCid <- toInterfaceContractId @RoleManagerService.I . fst . fromSome <$> queryContractKey @RoleManagerService.T user (operator, user)
  submitMulti [operator] [public] do exerciseCmd serviceCid RoleManagerService.AddPermissionToUserRole with ..

removePermissionInUserRole : Party -> Party -> Party -> UserRoleKey -> Permission -> Script ()
removePermissionInUserRole operator user public userRole permission = do
  serviceCid <- toInterfaceContractId @RoleManagerService.I . fst . fromSome <$> queryContractKey @RoleManagerService.T user (operator, user)
  submitMulti [operator] [public] do exerciseCmd serviceCid RoleManagerService.RemovePermissionInUserRole with ..

updateUserRole : Party -> Party -> Party -> UserRoleKey -> [Permission] -> Script ()
updateUserRole operator user public userRole permissions = do
  serviceCid <- toInterfaceContractId @RoleManagerService.I . fst . fromSome <$> queryContractKey @RoleManagerService.T user (operator, user)
  submitMulti [operator] [public] do exerciseCmd serviceCid RoleManagerService.UpdateUserRole with ..

addPermissionToUserRoleFail : Party -> Party -> Party -> UserRoleKey -> Permission -> Script ()
addPermissionToUserRoleFail operator user public userRole permission  = do
  serviceCid <- toInterfaceContractId @RoleManagerService.I . fst . fromSome <$> queryContractKey @RoleManagerService.T user (operator, user)
  submitMultiMustFail [operator] [public] do exerciseCmd serviceCid RoleManagerService.AddPermissionToUserRole with ..

removePermissionInUserRoleFail : Party -> Party -> Party -> UserRoleKey -> Permission -> Script ()
removePermissionInUserRoleFail operator user public userRole permission = do
  serviceCid <- toInterfaceContractId @RoleManagerService.I . fst . fromSome <$> queryContractKey @RoleManagerService.T user (operator, user)
  submitMultiMustFail [operator] [public] do exerciseCmd serviceCid RoleManagerService.RemovePermissionInUserRole with ..

-- User Profile Service

createUserProfile : Party -> Party -> Party -> PartiesMap -> Id -> Text -> Text -> Text -> Text -> Text -> Date -> Optional Gender -> Nationality -> Text -> Optional Int -> Int -> Int -> Int -> [Text] -> Script(UserProfileKey)
createUserProfile operator user public observers id username firstName lastName fullName password birthday gender nationality contactMail cellphoneNumber idNumber taxId socialSecurityId photoReferences = do
  serviceCid <- toInterfaceContractId @ProfileManagerService.I . fst . fromSome <$> queryContractKey @ProfileManagerService.T user (operator, user)
  createUserProfileRequestCid <- submitMulti [user] [public] do exerciseCmd serviceCid ProfileManagerService.RequestCreateUserProfile with ..
  submitMulti [operator] [public] do exerciseCmd serviceCid ProfileManagerService.CreateUserProfile with createUserProfileRequest = createUserProfileRequestCid

updateUserProfile : Party -> Party -> Party -> UserProfileKey -> Text -> Text -> Text -> Text -> Text -> Date -> Optional Gender -> Nationality -> Text -> Optional Int -> Int -> Int -> Int -> [Text] -> Script()
updateUserProfile operator user public userProfileKey newUsername newFirstName newLastName newFullName newPassword newBirthday newGender newNationality newContactMail newCellphoneNumber newIdNumber newTaxId newSocialSecurityId newPhotoReferences = do
  serviceCid <- toInterfaceContractId @ProfileManagerService.I . fst . fromSome <$> queryContractKey @ProfileManagerService.T user (operator, user)
  submitMulti [user] [public] do exerciseCmd serviceCid ProfileManagerService.UpdateProfile with ..

------ Apartment Property Manager

createApartmentProperty : Party -> Party -> Party -> PartiesMap -> Id -> InstrumentKey -> Decimal -> Text -> Text -> Text -> Text -> Decimal -> Decimal -> Int -> Int -> Int -> Int -> Bool -> Date -> Text -> Text -> Text -> [Text] -> Script(InstrumentKey, PropertyKey)
createApartmentProperty operator user public observers id apartmentInstrument apartmentPrice propertyAddress propertyPostalCode propertyDistrict propertyCounty grossArea usableArea bedrooms bathrooms floor parkingSpaces elevator buildDate installedEquipment additionalInformation description photoReferences = do
  serviceCid <- toInterfaceContractId @PropertyManagerService.I . fst . fromSome <$> queryContractKey @PropertyManagerService.T user (operator, user)
  createApartmentPropertyRequestCid <- submitMulti [user] [public] do exerciseCmd serviceCid PropertyManagerService.RequestCreateApartmentProperty with ..
  submitMulti [operator] [public] do exerciseCmd serviceCid PropertyManagerService.CreateApartmentProperty with createApartmentPropertyRequest = createApartmentPropertyRequestCid

updateApartment : Party -> Party -> Party -> PropertyKey -> Decimal -> Text -> Text -> Text -> Text -> Decimal -> Decimal -> Int -> Int -> Int -> Int -> Bool -> Date -> Text -> Text -> Text -> [Text] -> Script()
updateApartment operator user public propertyKey newApartmentPrice newApartmentPropertyAddress newApartmentPropertyPostalCode newApartmentPropertyDistrict newApartmentPropertyCounty newApartmentGrossArea newApartmentUsableArea newApartmentBedrooms newApartmentBathrooms newApartmentFloor newApartmentParkingSpaces newApartmentElevator newApartmentBuildDate newApartmentInstalledEquipment newApartmentAdditionalInformation newApartmentDescription newApartmentPhotoReferences = do
  serviceCid <- toInterfaceContractId @PropertyManagerService.I . fst . fromSome <$> queryContractKey @PropertyManagerService.T user (operator, user)
  submitMulti [user] [public] do exerciseCmd serviceCid PropertyManagerService.UpdateApartment with ..

------ Land Property Manager

createLandProperty : Party -> Party -> Party -> PartiesMap -> Id -> InstrumentKey -> Decimal -> Text -> Text -> Text -> Text -> LandType -> Decimal -> Decimal -> Decimal -> Int -> Bool -> Text -> [ViableConstructionTypes] -> Text -> Text -> [Text] -> Script(InstrumentKey, PropertyKey)
createLandProperty operator user public observers id landInstrument landPrice propertyAddress propertyPostalCode propertyDistrict propertyCounty landType totalLandArea minimumSurfaceForSale buildableArea buildableFloors accessByRoad installedEquipment viableConstructionTypes additionalInformation description photoReferences = do
  serviceCid <- toInterfaceContractId @PropertyManagerService.I . fst . fromSome <$> queryContractKey @PropertyManagerService.T user (operator, user)
  createLandPropertyRequestCid <- submitMulti [user] [public] do exerciseCmd serviceCid PropertyManagerService.RequestCreateLandProperty with ..
  submitMulti [operator] [public] do exerciseCmd serviceCid PropertyManagerService.CreateLandProperty with createLandPropertyRequest = createLandPropertyRequestCid

updateLand : Party -> Party -> Party -> PropertyKey -> Decimal -> Text -> Text -> Text -> Text -> LandType -> Decimal -> Decimal -> Decimal -> Int -> Bool -> Text -> [ViableConstructionTypes] -> Text -> Text -> [Text] -> Script()
updateLand operator user public propertyKey newLandPrice newLandPropertyAddress newLandPropertyPostalCode newLandPropertyDistrict newLandPropertyCounty newLandType newLandTotalArea newLandMinimumSurfaceForSale newLandBuildableArea newLandBuildableFloors newLandAccessByRoad newLandInstalledEquipment newLandViableConstructionTypes newLandAdditionalInformation newLandDescription newLandPhotoReferences = do
  serviceCid <- toInterfaceContractId @PropertyManagerService.I . fst . fromSome <$> queryContractKey @PropertyManagerService.T user (operator, user)
  submitMulti [user] [public] do exerciseCmd serviceCid PropertyManagerService.UpdateLand with ..


---- Residence Property Manager

createResidenceProperty : Party -> Party -> Party -> PartiesMap -> Id -> InstrumentKey -> Decimal -> Text -> Text -> Text -> Text -> Decimal -> Decimal -> Int -> Int -> Int -> ResidenceType -> Text -> Parking -> Date -> Orientation -> Text -> Text -> Text -> [Text] -> Script(InstrumentKey, PropertyKey)
createResidenceProperty operator user public observers id residenceInstrument residencePrice propertyAddress propertyPostalCode propertyDistrict propertyCounty grossArea usableArea bedrooms bathrooms floors residenceType backyard parking buildDate orientation installedEquipment additionalInformation description photoReferences = do
  serviceCid <- toInterfaceContractId @PropertyManagerService.I . fst . fromSome <$> queryContractKey @PropertyManagerService.T user (operator, user)
  createResidencePropertyRequestCid <- submitMulti [user] [public] do exerciseCmd serviceCid PropertyManagerService.RequestCreateResidenceProperty with ..
  submitMulti [operator] [public] do exerciseCmd serviceCid PropertyManagerService.CreateResidenceProperty with createResidencePropertyRequest = createResidencePropertyRequestCid

updateResidence : Party -> Party -> Party -> PropertyKey -> Decimal -> Text -> Text -> Text -> Text -> Decimal -> Decimal -> Int -> Int -> Int -> ResidenceType -> Text -> Parking -> Date -> Orientation -> Text -> Text -> Text -> [Text] -> Script()
updateResidence operator user public propertyKey newResidencePrice newResidencePropertyAddress newResidencePropertyPostalCode newResidencePropertyDistrict newResidencePropertyCounty newResidenceGrossArea newResidenceUsableArea newResidenceBedrooms newResidenceBathrooms newResidenceFloors newResidenceType newResidenceBackyard newResidenceParking newResidenceBuildDate newResidenceOrientation newResidenceInstalledEquipment newResidenceAdditionalInformation newResidenceDescription newResidencePhotoReferences = do
  serviceCid <- toInterfaceContractId @PropertyManagerService.I . fst . fromSome <$> queryContractKey @PropertyManagerService.T user (operator, user)
  submitMulti [user] [public] do exerciseCmd serviceCid PropertyManagerService.UpdateResidence with ..


---- Garage Property Manager

createGarageProperty : Party -> Party -> Party -> PartiesMap -> Id -> InstrumentKey -> Decimal -> Text -> Text -> Text -> Text -> GarageType -> Decimal -> Int -> Text -> Text -> Text -> [Text] -> Script(InstrumentKey, PropertyKey)
createGarageProperty operator user public observers id garageInstrument garagePrice propertyAddress propertyPostalCode propertyDistrict propertyCounty garageType garageArea vehicleCapacity installedEquipment additionalInformation description photoReferences = do
  serviceCid <- toInterfaceContractId @PropertyManagerService.I . fst . fromSome <$> queryContractKey @PropertyManagerService.T user (operator, user)
  createGaragePropertyRequestCid <- submitMulti [user] [public] do exerciseCmd serviceCid PropertyManagerService.RequestCreateGarageProperty with ..
  submitMulti [operator] [public] do exerciseCmd serviceCid PropertyManagerService.CreateGarageProperty with createGaragePropertyRequest = createGaragePropertyRequestCid

updateGarage : Party -> Party -> Party -> PropertyKey -> Decimal -> Text -> Text -> Text -> Text -> GarageType -> Decimal -> Int -> Text -> Text -> Text -> [Text] -> Script()
updateGarage operator user public propertyKey newGaragePrice newGaragePropertyAddress newGaragePropertyPostalCode newGaragePropertyDistrict newGaragePropertyCounty newGarageType newGarageArea newGarageVehicleCapacity newGarageInstalledEquipment newGarageAdditionalInformation newGarageDescription newGaragePhotoReferences = do
  serviceCid <- toInterfaceContractId @PropertyManagerService.I . fst . fromSome <$> queryContractKey @PropertyManagerService.T user (operator, user)
  submitMulti [user] [public] do exerciseCmd serviceCid PropertyManagerService.UpdateGarage with ..


----------------------------------------------------------------------------------------------

---- Warehouse Property Manager

createWarehouseProperty : Party -> Party -> Party -> PartiesMap -> Id -> InstrumentKey -> Decimal -> Text -> Text -> Text -> Text -> WarehouseType -> Decimal -> Decimal -> Int -> Date -> Text -> Text -> Text -> [Text] -> Script(InstrumentKey, PropertyKey)
createWarehouseProperty operator user public observers id warehouseInstrument warehousePrice propertyAddress propertyPostalCode propertyDistrict propertyCounty warehouseType grossArea usableArea floors buildDate installedEquipment additionalInformation description photoReferences = do
  serviceCid <- toInterfaceContractId @PropertyManagerService.I . fst . fromSome <$> queryContractKey @PropertyManagerService.T user (operator, user)
  createWarehousePropertyRequestCid <- submitMulti [user] [public] do exerciseCmd serviceCid PropertyManagerService.RequestCreateWarehouseProperty with ..
  submitMulti [operator] [public] do exerciseCmd serviceCid PropertyManagerService.CreateWarehouseProperty with createWarehousePropertyRequest = createWarehousePropertyRequestCid

updateWarehouse : Party -> Party -> Party -> PropertyKey -> Decimal -> Text -> Text -> Text -> Text -> WarehouseType -> Decimal -> Decimal -> Int -> Date -> Text -> Text -> Text -> [Text] -> Script()
updateWarehouse operator user public propertyKey newWarehousePrice newWarehousePropertyAddress newWarehousePropertyPostalCode newWarehousePropertyDistrict newWarehousePropertyCounty newWarehouseType newWarehouseGrossArea newWarehouseUsableArea newWarehouseFloors newWarehouseBuildDate newWarehouseInstalledEquipment newWarehouseAdditionalInformation newWarehouseDescription newWarehousePhotoReferences = do
  serviceCid <- toInterfaceContractId @PropertyManagerService.I . fst . fromSome <$> queryContractKey @PropertyManagerService.T user (operator, user)
  submitMulti [user] [public] do exerciseCmd serviceCid PropertyManagerService.UpdateWarehouse with ..