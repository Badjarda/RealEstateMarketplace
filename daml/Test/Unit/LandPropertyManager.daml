module Test.Unit.LandPropertyManager where

import Prelude hiding (Scenario)
import Daml.Script
import DA.Map (fromList)
import DA.Set (singleton)

import Interface.PropertyManager.Property.Common (LandType(..), ViableConstructionTypes(..))

import Test.Util.Update.Service (createPropertyManagerService)
import Test.Util.Update.Role (createOperatorRole, createRoleUser)
import Test.Util.Update.Workflow (createInitialUserRole)
import Test.Util.Script.Workflow (createLandProperty, updateLandPropertyAddress, updateLandPropertyPostalCode, updateLandPropertyDistrict, updateLandPropertyCounty, updateLandType, updateTotalLandArea, updateMinimumSurfaceForSale, updateBuildableArea, updateBuildableFloors, updateAccessByRoad, updateLandInstalledEquipment, updateViableConstructionTypes, updateLandAdditionalInformation, updateLandDescription)
import Test.Types (Fixture(..))

import Daml.Finance.Interface.Types.Common.Types (Id(..), InstrumentKey(..), HoldingStandard(..))


template Scenario
  with
    parties : [Party]
  where
    signatory parties

    nonconsuming choice Setup : Fixture
      controller parties
      do
        let [marketplace, user, public] = parties

        -- Create Roles

        createOperatorRole marketplace
        userRole <- createInitialUserRole marketplace public
        createRoleUser marketplace user userRole

        -- Create Services

        createPropertyManagerService marketplace user

        pure Fixture with instruments = []; accounts = []; holdings = []; services = []; roles = []

testCreateLandProperty : Script ()
testCreateLandProperty = do
  parties@[marketplace, user, public] <-
    mapA allocateParty ["Marketplace", "User", "Public"]
  Fixture{instruments; accounts; holdings; roles} <- submitMulti parties [] do createAndExerciseCmd (Scenario with parties) Setup

  let 
      single_observers = singleton marketplace
      observers = fromList [("Default", single_observers)]
      id = Id "Custom Land Property"
      instrument = InstrumentKey with issuer=marketplace; depository=user; id = Id "LandPropertyInstrumentKey"; version = "0"; holdingStandard = Transferable

  (_,propertyKey) <- createLandProperty marketplace user public observers id instrument "RandomPropertyAddress" "RandomPropertyPostalCode" "RandomPropertyDistrict" "RandomPropertyCounty" Urban 1000.0 900.0 800.0 3 True "Installed Equipment" [Building, Residence] "Additional Information" "Description"

  pure()

testCreateAndModifyLandPropertyAddress : Script ()
testCreateAndModifyLandPropertyAddress = do
  parties@[marketplace, user, public] <-
    mapA allocateParty ["Marketplace", "User", "Public"]
  Fixture{instruments; accounts; holdings; roles} <- submitMulti parties [] do createAndExerciseCmd (Scenario with parties) Setup

  let 
      single_observers = singleton marketplace
      observers = fromList [("Default", single_observers)]
      id = Id "Custom Land Property"
      instrument = InstrumentKey with issuer=marketplace; depository=user; id = Id "LandPropertyInstrumentKey"; version = "0"; holdingStandard = Transferable

  (_,propertyKey) <- createLandProperty marketplace user public observers id instrument "RandomPropertyAddress" "RandomPropertyPostalCode" "RandomPropertyDistrict" "RandomPropertyCounty" Urban 1000.0 900.0 800.0 3 True "Installed Equipment" [Building, Residence] "Additional Information" "Description"
  updateLandPropertyAddress marketplace user public propertyKey "Updated Property Address"

  pure()

testCreateAndModifyLandPropertyPostalCode : Script ()
testCreateAndModifyLandPropertyPostalCode = do
  parties@[marketplace, user, public] <-
    mapA allocateParty ["Marketplace", "User", "Public"]
  Fixture{instruments; accounts; holdings; roles} <- submitMulti parties [] do createAndExerciseCmd (Scenario with parties) Setup

  let 
      single_observers = singleton marketplace
      observers = fromList [("Default", single_observers)]
      id = Id "Custom Land Property"
      instrument = InstrumentKey with issuer=marketplace; depository=user; id = Id "LandPropertyInstrumentKey"; version = "0"; holdingStandard = Transferable

  (_,propertyKey) <- createLandProperty marketplace user public observers id instrument "RandomPropertyAddress" "RandomPropertyPostalCode" "RandomPropertyDistrict" "RandomPropertyCounty" Urban 1000.0 900.0 800.0 3 True "Installed Equipment" [Building, Residence] "Additional Information" "Description"
  updateLandPropertyPostalCode marketplace user public propertyKey "Updated Property Postal Code"

  pure()

testCreateAndModifyLandPropertyDistrict : Script ()
testCreateAndModifyLandPropertyDistrict = do
  parties@[marketplace, user, public] <-
    mapA allocateParty ["Marketplace", "User", "Public"]
  Fixture{instruments; accounts; holdings; roles} <- submitMulti parties [] do createAndExerciseCmd (Scenario with parties) Setup

  let 
      single_observers = singleton marketplace
      observers = fromList [("Default", single_observers)]
      id = Id "Custom Land Property"
      instrument = InstrumentKey with issuer=marketplace; depository=user; id = Id "LandPropertyInstrumentKey"; version = "0"; holdingStandard = Transferable

  (_,propertyKey) <- createLandProperty marketplace user public observers id instrument "RandomPropertyAddress" "RandomPropertyPostalCode" "RandomPropertyDistrict" "RandomPropertyCounty" Urban 1000.0 900.0 800.0 3 True "Installed Equipment" [Building, Residence] "Additional Information" "Description"
  updateLandPropertyDistrict marketplace user public propertyKey "Updated Property District"

  pure()

testCreateAndModifyLandPropertyCounty : Script ()
testCreateAndModifyLandPropertyCounty = do
  parties@[marketplace, user, public] <-
    mapA allocateParty ["Marketplace", "User", "Public"]
  Fixture{instruments; accounts; holdings; roles} <- submitMulti parties [] do createAndExerciseCmd (Scenario with parties) Setup

  let 
      single_observers = singleton marketplace
      observers = fromList [("Default", single_observers)]
      id = Id "Custom Land Property"
      instrument = InstrumentKey with issuer=marketplace; depository=user; id = Id "LandPropertyInstrumentKey"; version = "0"; holdingStandard = Transferable

  (_,propertyKey) <- createLandProperty marketplace user public observers id instrument "RandomPropertyAddress" "RandomPropertyPostalCode" "RandomPropertyDistrict" "RandomPropertyCounty" Urban 1000.0 900.0 800.0 3 True "Installed Equipment" [Building, Residence] "Additional Information" "Description"
  updateLandPropertyCounty marketplace user public propertyKey "Updated Property County"

  pure()

testCreateAndModifyLandType : Script ()
testCreateAndModifyLandType = do
  parties@[marketplace, user, public] <-
    mapA allocateParty ["Marketplace", "User", "Public"]
  Fixture{instruments; accounts; holdings; roles} <- submitMulti parties [] do createAndExerciseCmd (Scenario with parties) Setup

  let 
      single_observers = singleton marketplace
      observers = fromList [("Default", single_observers)]
      id = Id "Custom Land Property"
      instrument = InstrumentKey with issuer=marketplace; depository=user; id = Id "LandPropertyInstrumentKey"; version = "0"; holdingStandard = Transferable

  (_,propertyKey) <- createLandProperty marketplace user public observers id instrument "RandomPropertyAddress" "RandomPropertyPostalCode" "RandomPropertyDistrict" "RandomPropertyCounty" Urban 1000.0 900.0 800.0 3 True "Installed Equipment" [Building, Residence] "Additional Information" "Description"
  updateLandType marketplace user public propertyKey Rustic

  pure()

testCreateAndModifyTotalLandArea : Script ()
testCreateAndModifyTotalLandArea = do
  parties@[marketplace, user, public] <-
    mapA allocateParty ["Marketplace", "User", "Public"]
  Fixture{instruments; accounts; holdings; roles} <- submitMulti parties [] do createAndExerciseCmd (Scenario with parties) Setup

  let 
      single_observers = singleton marketplace
      observers = fromList [("Default", single_observers)]
      id = Id "Custom Land Property"
      instrument = InstrumentKey with issuer=marketplace; depository=user; id = Id "LandPropertyInstrumentKey"; version = "0"; holdingStandard = Transferable

  (_,propertyKey) <- createLandProperty marketplace user public observers id instrument "RandomPropertyAddress" "RandomPropertyPostalCode" "RandomPropertyDistrict" "RandomPropertyCounty" Urban 1000.0 900.0 800.0 3 True "Installed Equipment" [Building, Residence] "Additional Information" "Description"
  updateTotalLandArea marketplace user public propertyKey 1200.0

  pure()

testCreateAndModifyMinimumSurfaceForSale : Script ()
testCreateAndModifyMinimumSurfaceForSale = do
  parties@[marketplace, user, public] <-
    mapA allocateParty ["Marketplace", "User", "Public"]
  Fixture{instruments; accounts; holdings; roles} <- submitMulti parties [] do createAndExerciseCmd (Scenario with parties) Setup

  let 
      single_observers = singleton marketplace
      observers = fromList [("Default", single_observers)]
      id = Id "Custom Land Property"
      instrument = InstrumentKey with issuer=marketplace; depository=user; id = Id "LandPropertyInstrumentKey"; version = "0"; holdingStandard = Transferable

  (_,propertyKey) <- createLandProperty marketplace user public observers id instrument "RandomPropertyAddress" "RandomPropertyPostalCode" "RandomPropertyDistrict" "RandomPropertyCounty" Urban 1000.0 900.0 800.0 3 True "Installed Equipment" [Building, Residence] "Additional Information" "Description"
  updateMinimumSurfaceForSale marketplace user public propertyKey 950.0

  pure()

testCreateAndModifyBuildableArea : Script ()
testCreateAndModifyBuildableArea = do
  parties@[marketplace, user, public] <-
    mapA allocateParty ["Marketplace", "User", "Public"]
  Fixture{instruments; accounts; holdings; roles} <- submitMulti parties [] do createAndExerciseCmd (Scenario with parties) Setup

  let 
      single_observers = singleton marketplace
      observers = fromList [("Default", single_observers)]
      id = Id "Custom Land Property"
      instrument = InstrumentKey with issuer=marketplace; depository=user; id = Id "LandPropertyInstrumentKey"; version = "0"; holdingStandard = Transferable

  (_,propertyKey) <- createLandProperty marketplace user public observers id instrument "RandomPropertyAddress" "RandomPropertyPostalCode" "RandomPropertyDistrict" "RandomPropertyCounty" Urban 1000.0 900.0 800.0 3 True "Installed Equipment" [Building, Residence] "Additional Information" "Description"
  updateBuildableArea marketplace user public propertyKey 850.0

  pure()

testCreateAndModifyBuildableFloors : Script ()
testCreateAndModifyBuildableFloors = do
  parties@[marketplace, user, public] <-
    mapA allocateParty ["Marketplace", "User", "Public"]
  Fixture{instruments; accounts; holdings; roles} <- submitMulti parties [] do createAndExerciseCmd (Scenario with parties) Setup

  let 
      single_observers = singleton marketplace
      observers = fromList [("Default", single_observers)]
      id = Id "Custom Land Property"
      instrument = InstrumentKey with issuer=marketplace; depository=user; id = Id "LandPropertyInstrumentKey"; version = "0"; holdingStandard = Transferable

  (_,propertyKey) <- createLandProperty marketplace user public observers id instrument "RandomPropertyAddress" "RandomPropertyPostalCode" "RandomPropertyDistrict" "RandomPropertyCounty" Urban 1000.0 900.0 800.0 3 True "Installed Equipment" [Building, Residence] "Additional Information" "Description"
  updateBuildableFloors marketplace user public propertyKey 4

  pure()

testCreateAndModifyAccessByRoad : Script ()
testCreateAndModifyAccessByRoad = do
  parties@[marketplace, user, public] <-
    mapA allocateParty ["Marketplace", "User", "Public"]
  Fixture{instruments; accounts; holdings; roles} <- submitMulti parties [] do createAndExerciseCmd (Scenario with parties) Setup

  let 
      single_observers = singleton marketplace
      observers = fromList [("Default", single_observers)]
      id = Id "Custom Land Property"
      instrument = InstrumentKey with issuer=marketplace; depository=user; id = Id "LandPropertyInstrumentKey"; version = "0"; holdingStandard = Transferable

  (_,propertyKey) <- createLandProperty marketplace user public observers id instrument "RandomPropertyAddress" "RandomPropertyPostalCode" "RandomPropertyDistrict" "RandomPropertyCounty" Urban 1000.0 900.0 800.0 3 True "Installed Equipment" [Building, Residence] "Additional Information" "Description"
  updateAccessByRoad marketplace user public propertyKey False

  pure()

testCreateAndModifyLandInstalledEquipment : Script ()
testCreateAndModifyLandInstalledEquipment = do
  parties@[marketplace, user, public] <-
    mapA allocateParty ["Marketplace", "User", "Public"]
  Fixture{instruments; accounts; holdings; roles} <- submitMulti parties [] do createAndExerciseCmd (Scenario with parties) Setup

  let 
      single_observers = singleton marketplace
      observers = fromList [("Default", single_observers)]
      id = Id "Custom Land Property"
      instrument = InstrumentKey with issuer=marketplace; depository=user; id = Id "LandPropertyInstrumentKey"; version = "0"; holdingStandard = Transferable

  (_,propertyKey) <- createLandProperty marketplace user public observers id instrument "RandomPropertyAddress" "RandomPropertyPostalCode" "RandomPropertyDistrict" "RandomPropertyCounty" Urban 1000.0 900.0 800.0 3 True "Installed Equipment" [Building, Residence] "Additional Information" "Description"
  updateLandInstalledEquipment marketplace user public propertyKey "Updated Installed Equipment"

  pure()

testCreateAndModifyViableConstructionTypes : Script ()
testCreateAndModifyViableConstructionTypes = do
  parties@[marketplace, user, public] <-
    mapA allocateParty ["Marketplace", "User", "Public"]
  Fixture{instruments; accounts; holdings; roles} <- submitMulti parties [] do createAndExerciseCmd (Scenario with parties) Setup

  let 
      single_observers = singleton marketplace
      observers = fromList [("Default", single_observers)]
      id = Id "Custom Land Property"
      instrument = InstrumentKey with issuer=marketplace; depository=user; id = Id "LandPropertyInstrumentKey"; version = "0"; holdingStandard = Transferable

  (_,propertyKey) <- createLandProperty marketplace user public observers id instrument "RandomPropertyAddress" "RandomPropertyPostalCode" "RandomPropertyDistrict" "RandomPropertyCounty" Urban 1000.0 900.0 800.0 3 True "Installed Equipment" [Building, Residence] "Additional Information" "Description"
  updateViableConstructionTypes marketplace user public propertyKey [PublicInfrastructure]

  pure()

testCreateAndModifyLandAdditionalInformation : Script ()
testCreateAndModifyLandAdditionalInformation = do
  parties@[marketplace, user, public] <-
    mapA allocateParty ["Marketplace", "User", "Public"]
  Fixture{instruments; accounts; holdings; roles} <- submitMulti parties [] do createAndExerciseCmd (Scenario with parties) Setup

  let 
      single_observers = singleton marketplace
      observers = fromList [("Default", single_observers)]
      id = Id "Custom Land Property"
      instrument = InstrumentKey with issuer=marketplace; depository=user; id = Id "LandPropertyInstrumentKey"; version = "0"; holdingStandard = Transferable

  (_,propertyKey) <- createLandProperty marketplace user public observers id instrument "RandomPropertyAddress" "RandomPropertyPostalCode" "RandomPropertyDistrict" "RandomPropertyCounty" Urban 1000.0 900.0 800.0 3 True "Installed Equipment" [Building, Residence] "Additional Information" "Description"
  updateLandAdditionalInformation marketplace user public propertyKey "Updated Additional Information"

  pure()

testCreateAndModifyLandDescription : Script ()
testCreateAndModifyLandDescription = do
  parties@[marketplace, user, public] <-
    mapA allocateParty ["Marketplace", "User", "Public"]
  Fixture{instruments; accounts; holdings; roles} <- submitMulti parties [] do createAndExerciseCmd (Scenario with parties) Setup

  let 
      single_observers = singleton marketplace
      observers = fromList [("Default", single_observers)]
      id = Id "Custom Land Property"
      instrument = InstrumentKey with issuer=marketplace; depository=user; id = Id "LandPropertyInstrumentKey"; version = "0"; holdingStandard = Transferable

  (_,propertyKey) <- createLandProperty marketplace user public observers id instrument "RandomPropertyAddress" "RandomPropertyPostalCode" "RandomPropertyDistrict" "RandomPropertyCounty" Urban 1000.0 900.0 800.0 3 True "Installed Equipment" [Building, Residence] "Additional Information" "Description"
  updateLandDescription marketplace user public propertyKey "Updated Description"

  pure()

