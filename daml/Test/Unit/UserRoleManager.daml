module Test.Unit.UserRoleManager where

import Prelude hiding (Scenario)
import Daml.Script
import DA.Map (fromList)
import DA.Set (singleton)

import Test.Util.Update.Role (createOperatorRole, createRoleUser)
import Test.Util.Update.Workflow (createInitialUserRole)
import Test.Util.Script.Workflow (createUserRole, deleteUserRole, addPermissionToUserRole, removePermissionInUserRole, updateUserRole, removePermissionInUserRoleFail, addPermissionToUserRoleFail)
import Test.Util.Update.Service (createRoleManagerService)
import Interface.RoleManager.UserRole.Permission
import Test.Types (Fixture(..))

import Daml.Finance.Interface.Types.Common.Types (Id(..))


template Scenario
  with
    parties : [Party]
  where
    signatory parties

    nonconsuming choice Setup : Fixture
      controller parties
      do
        let [marketplace, user, public] = parties

        -- Create Roles

        createOperatorRole marketplace
        userRole <- createInitialUserRole marketplace public
        createRoleUser marketplace user userRole

        createRoleManagerService marketplace user

        pure Fixture with instruments = []; accounts = []; holdings = []; services = []; roles = []

testCreateUserRole : Script ()
testCreateUserRole = do
  parties@[marketplace, user, public] <-
    mapA allocateParty ["Marketplace", "User", "Public"]
  Fixture{instruments; accounts; holdings; roles} <- submitMulti parties [] do createAndExerciseCmd (Scenario with parties) Setup
  
  let 
    single_observers = singleton marketplace
    observers = fromList [("Default", single_observers)]
    id = Id "Custom Role"

  userRoleKey <- createUserRole marketplace user public id "User Role Description" [MANAGE_ROLE] observers

  pure()

testDeleteUserRole : Script ()
testDeleteUserRole = do
  parties@[marketplace, user, public] <-
    mapA allocateParty ["Marketplace", "User", "Public"]
  Fixture{instruments; accounts; holdings; roles} <- submitMulti parties [] do createAndExerciseCmd (Scenario with parties) Setup
  
  let 
    single_observers = singleton marketplace
    observers = fromList [("Default", single_observers)]
    id = Id "Custom Role"

  userRoleKey <- createUserRole marketplace user public id "User Role Description" [MANAGE_ROLE] observers

  deleteUserRole marketplace user public userRoleKey

  pure()

testAddPermissionToUserRole : Script ()
testAddPermissionToUserRole = do
  parties@[marketplace, user, public] <-
    mapA allocateParty ["Marketplace", "User", "Public"]
  Fixture{instruments; accounts; holdings; roles} <- submitMulti parties [] do createAndExerciseCmd (Scenario with parties) Setup
  
  let 
    single_observers = singleton marketplace
    observers = fromList [("Default", single_observers)]
    id = Id "Custom Role"

  userRoleKey <- createUserRole marketplace user public id "User Role Description" [MANAGE_ROLE] observers

  addPermissionToUserRole marketplace user public userRoleKey MANAGE_TRANSACTION

  pure()

testRemovePermissionInUserRole : Script ()
testRemovePermissionInUserRole = do
  parties@[marketplace, user, public] <-
    mapA allocateParty ["Marketplace", "User", "Public"]
  Fixture{instruments; accounts; holdings; roles} <- submitMulti parties [] do createAndExerciseCmd (Scenario with parties) Setup
  
  let 
    single_observers = singleton marketplace
    observers = fromList [("Default", single_observers)]
    id = Id "Custom Role"

  userRoleKey <- createUserRole marketplace user public id "User Role Description" [MANAGE_ROLE] observers

  addPermissionToUserRole marketplace user public userRoleKey MANAGE_TRANSACTION

  removePermissionInUserRole marketplace user public userRoleKey MANAGE_TRANSACTION

  pure()

testUpdateUserRole : Script ()
testUpdateUserRole = do
  parties@[marketplace, user, public] <-
    mapA allocateParty ["Marketplace", "User", "Public"]
  Fixture{instruments; accounts; holdings; roles} <- submitMulti parties [] do createAndExerciseCmd (Scenario with parties) Setup
  
  let 
    single_observers = singleton marketplace
    observers = fromList [("Default", single_observers)]
    id = Id "Custom Role"

  userRoleKey <- createUserRole marketplace user public id "User Role Description" [MANAGE_ROLE] observers

  updateUserRole marketplace user public userRoleKey [MANAGE_ROLE, MANAGE_ALL_MARKETPLACE_TRANSACTIONS, MANAGE_PERMISSION]

  pure()

testAddExistentPermissionToUserRole : Script ()
testAddExistentPermissionToUserRole = do
  parties@[marketplace, user, public] <-
    mapA allocateParty ["Marketplace", "User", "Public"]
  Fixture{instruments; accounts; holdings; roles} <- submitMulti parties [] do createAndExerciseCmd (Scenario with parties) Setup
  
  let 
    single_observers = singleton marketplace
    observers = fromList [("Default", single_observers)]
    id = Id "Custom Role"

  userRoleKey <- createUserRole marketplace user public id "User Role Description" [MANAGE_ROLE] observers

  addPermissionToUserRoleFail marketplace user public userRoleKey MANAGE_ROLE

  pure()

testRemovePermissionInUserRoleWithOnePermission : Script ()
testRemovePermissionInUserRoleWithOnePermission = do
  parties@[marketplace, user, public] <-
    mapA allocateParty ["Marketplace", "User", "Public"]
  Fixture{instruments; accounts; holdings; roles} <- submitMulti parties [] do createAndExerciseCmd (Scenario with parties) Setup
  
  let 
    single_observers = singleton marketplace
    observers = fromList [("Default", single_observers)]
    id = Id "Custom Role"

  userRoleKey <- createUserRole marketplace user public id "User Role Description" [MANAGE_ROLE] observers

  removePermissionInUserRoleFail marketplace user public userRoleKey MANAGE_ROLE

  pure()

testRemovePermissionInUserRoleWithNonExistentPermission : Script ()
testRemovePermissionInUserRoleWithNonExistentPermission = do
  parties@[marketplace, user, public] <-
    mapA allocateParty ["Marketplace", "User", "Public"]
  Fixture{instruments; accounts; holdings; roles} <- submitMulti parties [] do createAndExerciseCmd (Scenario with parties) Setup
  
  let 
    single_observers = singleton marketplace
    observers = fromList [("Default", single_observers)]
    id = Id "Custom Role"

  userRoleKey <- createUserRole marketplace user public id "User Role Description" [MANAGE_ROLE] observers

  removePermissionInUserRoleFail marketplace user public userRoleKey MANAGE_TRANSACTION

  pure()
