module Test.Unit.ApartmentPropertyManager where

import Prelude hiding (Scenario)
import Daml.Script
import DA.Map (fromList)
import DA.Set (singleton)
import DA.Date

import Test.Util.Update.Service (createPropertyManagerService)
import Test.Util.Update.Role (createOperatorRole, createRoleUser)
import Test.Util.Update.Workflow (createInitialUserRole)
import Test.Util.Script.Workflow (createApartmentProperty, updateApartment)
import Test.Types (Fixture(..))

import Daml.Finance.Interface.Types.Common.Types (HoldingStandard(..), Id(..), InstrumentKey(..))


template Scenario
  with
    parties : [Party]
  where
    signatory parties

    nonconsuming choice Setup : Fixture
      controller parties
      do
        let [marketplace, user, public] = parties

        -- Create Roles

        createOperatorRole marketplace
        userRole <- createInitialUserRole marketplace public
        createRoleUser marketplace user userRole

        -- Create Services

        createPropertyManagerService marketplace user

        pure Fixture with instruments = []; accounts = []; holdings = []; services = []; roles = []


testCreateApartmentProperty : Script ()
testCreateApartmentProperty = do
  parties@[marketplace, user, public] <-
    mapA allocateParty ["Marketplace", "User", "Public"]
  Fixture{instruments; accounts; holdings; roles} <- submitMulti parties [] do createAndExerciseCmd (Scenario with parties) Setup
  
  let 
      single_observers = singleton marketplace
      observers = fromList [("Default", single_observers)]
      id = Id "Custom Apartment Property"
      instrument = InstrumentKey with issuer=marketplace; depository=user; id = Id "ApartmentPropertyInstrumentKey"; version = "0"; holdingStandard = Transferable

  (_,propertyKey) <- createApartmentProperty marketplace user public observers id instrument 200000.0 "RandomPropertyAddress" "RandomPropertyPostalCode" "RandomPropertyDistrict" "RandomPropertyCounty" 100.0 100.0 2 2 1 1 True (date 2024 Apr 04) "Installed Equipment" "Additional Information" "Description" [""]
  
  pure()

testCreateAndModifyApartment : Script ()
testCreateAndModifyApartment = do
  parties@[marketplace, user, public] <-
    mapA allocateParty ["Marketplace", "User", "Public"]
  Fixture{instruments; accounts; holdings; roles} <- submitMulti parties [] do createAndExerciseCmd (Scenario with parties) Setup

  let 
      single_observers = singleton marketplace
      observers = fromList [("Default", single_observers)]
      id = Id "Custom Apartment Property"
      instrument = InstrumentKey with issuer=marketplace; depository=user; id = Id "ApartmentPropertyInstrumentKey"; version = "0"; holdingStandard = Transferable

  (_,propertyKey) <- createApartmentProperty marketplace user public observers id instrument 200000.0 "RandomPropertyAddress" "RandomPropertyPostalCode" "RandomPropertyDistrict" "RandomPropertyCounty" 100.0 100.0 2 2 1 1 True (date 2024 Apr 04) "Installed Equipment" "Additional Information" "Description" [""]
  updateApartment marketplace user public propertyKey 1111111.11 "EditPropertyAddress" "EditPropertyPostalCode" "EditPropertyDistrict" "EditPropertyCounty" 121.0 121.0 11 11 1 11 False (date 2024 May 04) "Edit Installed Equipment" "Edit Additional Information" "Edit Description" ["1", "2", "3"]

  pure()