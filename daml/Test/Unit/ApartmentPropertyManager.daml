module Test.Unit.ApartmentPropertyManager where

import Prelude hiding (Scenario)
import Daml.Script
import DA.Map (fromList)
import DA.Set (singleton)
import DA.Date

import Test.Util.Update.Service (createPropertyManagerService)
import Test.Util.Update.Role (createOperatorRole, createRoleUser)
import Test.Util.Update.Workflow (createInitialUserRole)
import Test.Util.Script.Workflow (createApartmentProperty, updateApartmentPrice, updateApartmentPropertyAddress, updateApartmentPropertyPostalCode, updateApartmentPropertyDistrict, updateApartmentPropertyCounty, updateApartmentGrossArea, updateApartmentUsableArea, updateApartmentBedrooms, updateApartmentBathrooms, updateFloor, updateParkingSpaces, updateElevator, updateApartmentBuildDate, updateApartmentInstalledEquipment, updateApartmentAdditionalInformation, updateApartmentDescription)
import Test.Types (Fixture(..))

import Daml.Finance.Interface.Types.Common.Types (HoldingStandard(..), Id(..), InstrumentKey(..))


template Scenario
  with
    parties : [Party]
  where
    signatory parties

    nonconsuming choice Setup : Fixture
      controller parties
      do
        let [marketplace, user, public] = parties

        -- Create Roles

        createOperatorRole marketplace
        userRole <- createInitialUserRole marketplace public
        createRoleUser marketplace user userRole

        -- Create Services

        createPropertyManagerService marketplace user

        pure Fixture with instruments = []; accounts = []; holdings = []; services = []; roles = []


testCreateApartmentProperty : Script ()
testCreateApartmentProperty = do
  parties@[marketplace, user, public] <-
    mapA allocateParty ["Marketplace", "User", "Public"]
  Fixture{instruments; accounts; holdings; roles} <- submitMulti parties [] do createAndExerciseCmd (Scenario with parties) Setup
  
  let 
      single_observers = singleton marketplace
      observers = fromList [("Default", single_observers)]
      id = Id "Custom Apartment Property"
      instrument = InstrumentKey with issuer=marketplace; depository=user; id = Id "ApartmentPropertyInstrumentKey"; version = "0"; holdingStandard = Transferable

  (_,propertyKey) <- createApartmentProperty marketplace user public observers id instrument 200000.0 "RandomPropertyAddress" "RandomPropertyPostalCode" "RandomPropertyDistrict" "RandomPropertyCounty" 100.0 100.0 2 2 1 1 True (date 2024 Apr 04) "Installed Equipment" "Additional Information" "Description"
  
  pure()

testCreateAndModifyApartmentPrice : Script ()
testCreateAndModifyApartmentPrice = do
  parties@[marketplace, user, public] <-
    mapA allocateParty ["Marketplace", "User", "Public"]
  Fixture{instruments; accounts; holdings; roles} <- submitMulti parties [] do createAndExerciseCmd (Scenario with parties) Setup

  let 
      single_observers = singleton marketplace
      observers = fromList [("Default", single_observers)]
      id = Id "Custom Apartment Property"
      instrument = InstrumentKey with issuer=marketplace; depository=user; id = Id "ApartmentPropertyInstrumentKey"; version = "0"; holdingStandard = Transferable
      newPrice = 1000000.0

  (_,propertyKey) <- createApartmentProperty marketplace user public observers id instrument 200000.0 "RandomPropertyAddress" "RandomPropertyPostalCode" "RandomPropertyDistrict" "RandomPropertyCounty" 100.0 100.0 2 2 1 1 True (date 2024 Apr 04) "Installed Equipment" "Additional Information" "Description"
  updateApartmentPrice marketplace user public propertyKey newPrice

  pure()

testCreateAndModifyApartmentPropertyAddress : Script ()
testCreateAndModifyApartmentPropertyAddress = do
  parties@[marketplace, user, public] <-
    mapA allocateParty ["Marketplace", "User", "Public"]
  Fixture{instruments; accounts; holdings; roles} <- submitMulti parties [] do createAndExerciseCmd (Scenario with parties) Setup

  let 
      single_observers = singleton marketplace
      observers = fromList [("Default", single_observers)]
      id = Id "Custom Apartment Property"
      instrument = InstrumentKey with issuer=marketplace; depository=user; id = Id "ApartmentPropertyInstrumentKey"; version = "0"; holdingStandard = Transferable

  (_,propertyKey) <- createApartmentProperty marketplace user public observers id instrument 200000.0 "RandomPropertyAddress" "RandomPropertyPostalCode" "RandomPropertyDistrict" "RandomPropertyCounty" 100.0 100.0 2 2 1 1 True (date 2024 Apr 04) "Installed Equipment" "Additional Information" "Description"
  updateApartmentPropertyAddress marketplace user public propertyKey "Updated Property Address"

  pure()

testCreateAndModifyApartmentPropertyPostalCode : Script ()
testCreateAndModifyApartmentPropertyPostalCode = do
  parties@[marketplace, user, public] <-
    mapA allocateParty ["Marketplace", "User", "Public"]
  Fixture{instruments; accounts; holdings; roles} <- submitMulti parties [] do createAndExerciseCmd (Scenario with parties) Setup

  let 
      single_observers = singleton marketplace
      observers = fromList [("Default", single_observers)]
      id = Id "Custom Apartment Property"
      instrument = InstrumentKey with issuer=marketplace; depository=user; id = Id "ApartmentPropertyInstrumentKey"; version = "0"; holdingStandard = Transferable

  (_,propertyKey) <- createApartmentProperty marketplace user public observers id instrument 200000.0 "RandomPropertyAddress" "RandomPropertyPostalCode" "RandomPropertyDistrict" "RandomPropertyCounty" 100.0 100.0 2 2 1 1 True (date 2024 Apr 04) "Installed Equipment" "Additional Information" "Description"
  updateApartmentPropertyPostalCode marketplace user public propertyKey "Updated Property Postal Code"

  pure()

testCreateAndModifyApartmentPropertyDistrict : Script ()
testCreateAndModifyApartmentPropertyDistrict = do
  parties@[marketplace, user, public] <-
    mapA allocateParty ["Marketplace", "User", "Public"]
  Fixture{instruments; accounts; holdings; roles} <- submitMulti parties [] do createAndExerciseCmd (Scenario with parties) Setup

  let 
      single_observers = singleton marketplace
      observers = fromList [("Default", single_observers)]
      id = Id "Custom Apartment Property"
      instrument = InstrumentKey with issuer=marketplace; depository=user; id = Id "ApartmentPropertyInstrumentKey"; version = "0"; holdingStandard = Transferable

  (_,propertyKey) <- createApartmentProperty marketplace user public observers id instrument 200000.0 "RandomPropertyAddress" "RandomPropertyPostalCode" "RandomPropertyDistrict" "RandomPropertyCounty" 100.0 100.0 2 2 1 1 True (date 2024 Apr 04) "Installed Equipment" "Additional Information" "Description"
  updateApartmentPropertyDistrict marketplace user public propertyKey "Updated Property District"

  pure()

testCreateAndModifyApartmentPropertyCounty : Script ()
testCreateAndModifyApartmentPropertyCounty = do
  parties@[marketplace, user, public] <-
    mapA allocateParty ["Marketplace", "User", "Public"]
  Fixture{instruments; accounts; holdings; roles} <- submitMulti parties [] do createAndExerciseCmd (Scenario with parties) Setup

  let 
      single_observers = singleton marketplace
      observers = fromList [("Default", single_observers)]
      id = Id "Custom Apartment Property"
      instrument = InstrumentKey with issuer=marketplace; depository=user; id = Id "ApartmentPropertyInstrumentKey"; version = "0"; holdingStandard = Transferable

  (_,propertyKey) <- createApartmentProperty marketplace user public observers id instrument 200000.0 "RandomPropertyAddress" "RandomPropertyPostalCode" "RandomPropertyDistrict" "RandomPropertyCounty" 100.0 100.0 2 2 1 1 True (date 2024 Apr 04) "Installed Equipment" "Additional Information" "Description"
  updateApartmentPropertyCounty marketplace user public propertyKey "Updated Property County"

  pure()

testCreateAndModifyApartmentPropertyGrossArea : Script ()
testCreateAndModifyApartmentPropertyGrossArea = do
  parties@[marketplace, user, public] <-
    mapA allocateParty ["Marketplace", "User", "Public"]
  Fixture{instruments; accounts; holdings; roles} <- submitMulti parties [] do createAndExerciseCmd (Scenario with parties) Setup

  let 
      single_observers = singleton marketplace
      observers = fromList [("Default", single_observers)]
      id = Id "Custom Apartment Property"
      instrument = InstrumentKey with issuer=marketplace; depository=user; id = Id "ApartmentPropertyInstrumentKey"; version = "0"; holdingStandard = Transferable

  (_,propertyKey) <- createApartmentProperty marketplace user public observers id instrument 200000.0 "RandomPropertyAddress" "RandomPropertyPostalCode" "RandomPropertyDistrict" "RandomPropertyCounty" 100.0 100.0 2 2 1 1 True (date 2024 Apr 04) "Installed Equipment" "Additional Information" "Description"
  updateApartmentGrossArea marketplace user public propertyKey 120.0

  pure()

testCreateAndModifyApartmentPropertyUsableArea : Script ()
testCreateAndModifyApartmentPropertyUsableArea = do
  parties@[marketplace, user, public] <-
    mapA allocateParty ["Marketplace", "User", "Public"]
  Fixture{instruments; accounts; holdings; roles} <- submitMulti parties [] do createAndExerciseCmd (Scenario with parties) Setup

  let 
      single_observers = singleton marketplace
      observers = fromList [("Default", single_observers)]
      id = Id "Custom Apartment Property"
      instrument = InstrumentKey with issuer=marketplace; depository=user; id = Id "ApartmentPropertyInstrumentKey"; version = "0"; holdingStandard = Transferable

  (_,propertyKey) <- createApartmentProperty marketplace user public observers id instrument 200000.0 "RandomPropertyAddress" "RandomPropertyPostalCode" "RandomPropertyDistrict" "RandomPropertyCounty" 100.0 100.0 2 2 1 1 True (date 2024 Apr 04) "Installed Equipment" "Additional Information" "Description"
  updateApartmentUsableArea marketplace user public propertyKey 110.0

  pure()

testCreateAndModifyApartmentPropertyBedrooms : Script ()
testCreateAndModifyApartmentPropertyBedrooms = do
  parties@[marketplace, user, public] <-
    mapA allocateParty ["Marketplace", "User", "Public"]
  Fixture{instruments; accounts; holdings; roles} <- submitMulti parties [] do createAndExerciseCmd (Scenario with parties) Setup

  let 
      single_observers = singleton marketplace
      observers = fromList [("Default", single_observers)]
      id = Id "Custom Apartment Property"
      instrument = InstrumentKey with issuer=marketplace; depository=user; id = Id "ApartmentPropertyInstrumentKey"; version = "0"; holdingStandard = Transferable

  (_,propertyKey) <- createApartmentProperty marketplace user public observers id instrument 200000.0 "RandomPropertyAddress" "RandomPropertyPostalCode" "RandomPropertyDistrict" "RandomPropertyCounty" 100.0 100.0 2 2 1 1 True (date 2024 Apr 04) "Installed Equipment" "Additional Information" "Description"
  updateApartmentBedrooms marketplace user public propertyKey 3

  pure()

testCreateAndModifyApartmentPropertyBathrooms : Script ()
testCreateAndModifyApartmentPropertyBathrooms = do
  parties@[marketplace, user, public] <-
    mapA allocateParty ["Marketplace", "User", "Public"]
  Fixture{instruments; accounts; holdings; roles} <- submitMulti parties [] do createAndExerciseCmd (Scenario with parties) Setup

  let 
      single_observers = singleton marketplace
      observers = fromList [("Default", single_observers)]
      id = Id "Custom Apartment Property"
      instrument = InstrumentKey with issuer=marketplace; depository=user; id = Id "ApartmentPropertyInstrumentKey"; version = "0"; holdingStandard = Transferable

  (_,propertyKey) <- createApartmentProperty marketplace user public observers id instrument 200000.0 "RandomPropertyAddress" "RandomPropertyPostalCode" "RandomPropertyDistrict" "RandomPropertyCounty" 100.0 100.0 2 2 1 1 True (date 2024 Apr 04) "Installed Equipment" "Additional Information" "Description"
  updateApartmentBathrooms marketplace user public propertyKey 3

  pure()

testCreateAndModifyApartmentPropertyFloor : Script ()
testCreateAndModifyApartmentPropertyFloor = do
  parties@[marketplace, user, public] <-
    mapA allocateParty ["Marketplace", "User", "Public"]
  Fixture{instruments; accounts; holdings; roles} <- submitMulti parties [] do createAndExerciseCmd (Scenario with parties) Setup

  let 
      single_observers = singleton marketplace
      observers = fromList [("Default", single_observers)]
      id = Id "Custom Apartment Property"
      instrument = InstrumentKey with issuer=marketplace; depository=user; id = Id "ApartmentPropertyInstrumentKey"; version = "0"; holdingStandard = Transferable

  (_,propertyKey) <- createApartmentProperty marketplace user public observers id instrument 200000.0 "RandomPropertyAddress" "RandomPropertyPostalCode" "RandomPropertyDistrict" "RandomPropertyCounty" 100.0 100.0 2 2 1 1 True (date 2024 Apr 04) "Installed Equipment" "Additional Information" "Description"
  updateFloor marketplace user public propertyKey 2

  pure()

testCreateAndModifyApartmentPropertyParkingSpaces : Script ()
testCreateAndModifyApartmentPropertyParkingSpaces = do
  parties@[marketplace, user, public] <-
    mapA allocateParty ["Marketplace", "User", "Public"]
  Fixture{instruments; accounts; holdings; roles} <- submitMulti parties [] do createAndExerciseCmd (Scenario with parties) Setup

  let 
      single_observers = singleton marketplace
      observers = fromList [("Default", single_observers)]
      id = Id "Custom Apartment Property"
      instrument = InstrumentKey with issuer=marketplace; depository=user; id = Id "ApartmentPropertyInstrumentKey"; version = "0"; holdingStandard = Transferable

  (_,propertyKey) <- createApartmentProperty marketplace user public observers id instrument 200000.0 "RandomPropertyAddress" "RandomPropertyPostalCode" "RandomPropertyDistrict" "RandomPropertyCounty" 100.0 100.0 2 2 1 1 True (date 2024 Apr 04) "Installed Equipment" "Additional Information" "Description"
  updateParkingSpaces marketplace user public propertyKey 2

  pure()

testCreateAndModifyApartmentPropertyElevator : Script ()
testCreateAndModifyApartmentPropertyElevator = do
  parties@[marketplace, user, public] <-
    mapA allocateParty ["Marketplace", "User", "Public"]
  Fixture{instruments; accounts; holdings; roles} <- submitMulti parties [] do createAndExerciseCmd (Scenario with parties) Setup

  let 
      single_observers = singleton marketplace
      observers = fromList [("Default", single_observers)]
      id = Id "Custom Apartment Property"
      instrument = InstrumentKey with issuer=marketplace; depository=user; id = Id "ApartmentPropertyInstrumentKey"; version = "0"; holdingStandard = Transferable

  (_,propertyKey) <- createApartmentProperty marketplace user public observers id instrument 200000.0 "RandomPropertyAddress" "RandomPropertyPostalCode" "RandomPropertyDistrict" "RandomPropertyCounty" 100.0 100.0 2 2 1 1 True (date 2024 Apr 04) "Installed Equipment" "Additional Information" "Description"
  updateElevator marketplace user public propertyKey False

  pure()

testCreateAndModifyApartmentPropertyBuildDate : Script ()
testCreateAndModifyApartmentPropertyBuildDate = do
  parties@[marketplace, user, public] <-
    mapA allocateParty ["Marketplace", "User", "Public"]
  Fixture{instruments; accounts; holdings; roles} <- submitMulti parties [] do createAndExerciseCmd (Scenario with parties) Setup

  let 
      single_observers = singleton marketplace
      observers = fromList [("Default", single_observers)]
      id = Id "Custom Apartment Property"
      instrument = InstrumentKey with issuer=marketplace; depository=user; id = Id "ApartmentPropertyInstrumentKey"; version = "0"; holdingStandard = Transferable

  (_,propertyKey) <- createApartmentProperty marketplace user public observers id instrument 200000.0 "RandomPropertyAddress" "RandomPropertyPostalCode" "RandomPropertyDistrict" "RandomPropertyCounty" 100.0 100.0 2 2 1 1 True (date 2024 Apr 04) "Installed Equipment" "Additional Information" "Description"
  updateApartmentBuildDate marketplace user public propertyKey (date 2025 Jan 01)

  pure()

testCreateAndModifyApartmentPropertyInstalledEquipment : Script ()
testCreateAndModifyApartmentPropertyInstalledEquipment = do
  parties@[marketplace, user, public] <-
    mapA allocateParty ["Marketplace", "User", "Public"]
  Fixture{instruments; accounts; holdings; roles} <- submitMulti parties [] do createAndExerciseCmd (Scenario with parties) Setup

  let 
      single_observers = singleton marketplace
      observers = fromList [("Default", single_observers)]
      id = Id "Custom Apartment Property"
      instrument = InstrumentKey with issuer=marketplace; depository=user; id = Id "ApartmentPropertyInstrumentKey"; version = "0"; holdingStandard = Transferable

  (_,propertyKey) <- createApartmentProperty marketplace user public observers id instrument 200000.0 "RandomPropertyAddress" "RandomPropertyPostalCode" "RandomPropertyDistrict" "RandomPropertyCounty" 100.0 100.0 2 2 1 1 True (date 2024 Apr 04) "Installed Equipment" "Additional Information" "Description"
  updateApartmentInstalledEquipment marketplace user public propertyKey "Updated Equipment"

  pure()

testCreateAndModifyApartmentPropertyAdditionalInformation : Script ()
testCreateAndModifyApartmentPropertyAdditionalInformation = do
  parties@[marketplace, user, public] <-
    mapA allocateParty ["Marketplace", "User", "Public"]
  Fixture{instruments; accounts; holdings; roles} <- submitMulti parties [] do createAndExerciseCmd (Scenario with parties) Setup

  let 
      single_observers = singleton marketplace
      observers = fromList [("Default", single_observers)]
      id = Id "Custom Apartment Property"
      instrument = InstrumentKey with issuer=marketplace; depository=user; id = Id "ApartmentPropertyInstrumentKey"; version = "0"; holdingStandard = Transferable

  (_,propertyKey) <- createApartmentProperty marketplace user public observers id instrument 200000.0 "RandomPropertyAddress" "RandomPropertyPostalCode" "RandomPropertyDistrict" "RandomPropertyCounty" 100.0 100.0 2 2 1 1 True (date 2024 Apr 04) "Installed Equipment" "Additional Information" "Description"
  updateApartmentAdditionalInformation marketplace user public propertyKey "Updated Information"

  pure()

testCreateAndModifyApartmentPropertyDescription : Script ()
testCreateAndModifyApartmentPropertyDescription = do
  parties@[marketplace, user, public] <-
    mapA allocateParty ["Marketplace", "User", "Public"]
  Fixture{instruments; accounts; holdings; roles} <- submitMulti parties [] do createAndExerciseCmd (Scenario with parties) Setup

  let 
      single_observers = singleton marketplace
      observers = fromList [("Default", single_observers)]
      id = Id "Custom Apartment Property"
      instrument = InstrumentKey with issuer=marketplace; depository=user; id = Id "ApartmentPropertyInstrumentKey"; version = "0"; holdingStandard = Transferable

  (_,propertyKey) <- createApartmentProperty marketplace user public observers id instrument 200000.0 "RandomPropertyAddress" "RandomPropertyPostalCode" "RandomPropertyDistrict" "RandomPropertyCounty" 100.0 100.0 2 2 1 1 True (date 2024 Apr 04) "Installed Equipment" "Additional Information" "Description"
  updateApartmentDescription marketplace user public propertyKey "Updated Description"

  pure()
