module Test.Unit.UserProfile where

import Prelude hiding (Scenario)
import Daml.Script
import DA.Map (fromList)
import DA.Set (singleton)
import DA.Date

import Test.Util.Update.Role (createOperatorRole, createRoleUser)
import Test.Util.Update.Service (createProfileManagerService)
import Test.Util.Update.Workflow (createInitialUserRole)
import Test.Util.Script.Workflow (createUserProfile, updateUserProfileUsername, updateUserProfileFullName, updateUserProfilePassword, updateUserProfileFirstName, updateUserProfileLastName, updateUserProfileContactMail, updateUserProfileBirthday, updateUserProfileGender, updateUserProfileNationality, updateUserProfileCellphoneNumber, updateUserProfileIdNumber, updateUserProfileTaxId, updateUserProfileSocialSecurityId, updateUserProfilePhotoReferences)
import Test.Types (Fixture(..))
import Interface.ProfileManager.UserProfile.Common (Nationality(..), Gender(..))

import Daml.Finance.Interface.Types.Common.Types (Id(..))


template Scenario
  with
    parties : [Party]
  where
    signatory parties

    nonconsuming choice Setup : Fixture
      controller parties
      do
        let [marketplace, user, public] = parties

        createOperatorRole marketplace

        userRole <- createInitialUserRole marketplace public
        createRoleUser marketplace user userRole

        -- Create Services

        createProfileManagerService marketplace user 

        pure Fixture with instruments = []; accounts = []; holdings = []; services = []; roles = []

testCreateUserProfile : Script ()
testCreateUserProfile = do
  parties@[marketplace, user, public] <-
    mapA allocateParty ["Marketplace", "User", "Public"]
  Fixture{instruments; accounts; holdings; roles} <- submitMulti parties [] do createAndExerciseCmd (Scenario with parties) Setup

  let 
      single_observers = singleton marketplace
      observers = fromList [("Default", single_observers)]
      id = Id "Custom User Profile"

  userProfileKey <- createUserProfile marketplace user public observers id "Username" "Duarte" "Costa" "Duarte Ferreira da Costa" "password" (date 2001 Dec 19) (Some Male) Portuguese "duarte.ferreira.costa@tecnico.ulisboa.pt" (Some 912345678) 15122679 21235678 12345678910 [""] 

  pure()

testCreateAndModifyUserProfileUsername : Script ()
testCreateAndModifyUserProfileUsername = do
  parties@[marketplace, user, public] <-
    mapA allocateParty ["Marketplace", "User", "Public"]
  Fixture{instruments; accounts; holdings; roles} <- submitMulti parties [] do createAndExerciseCmd (Scenario with parties) Setup

  let 
      single_observers = singleton marketplace
      observers = fromList [("Default", single_observers)]
      id = Id "Custom User Profile"

  userProfileKey <- createUserProfile marketplace user public observers id "Username" "Duarte" "Costa" "Duarte Ferreira da Costa" "password" (date 2001 Dec 19) (Some Male) Portuguese "duarte.ferreira.costa@tecnico.ulisboa.pt" (Some 912345678) 15122679 21235678 12345678910 [""]
  updateUserProfileUsername marketplace user public userProfileKey "Custom Username"

  pure()

testCreateAndModifyUserProfileFullName : Script ()
testCreateAndModifyUserProfileFullName = do
  parties@[marketplace, user, public] <-
    mapA allocateParty ["Marketplace", "User", "Public"]
  Fixture{instruments; accounts; holdings; roles} <- submitMulti parties [] do createAndExerciseCmd (Scenario with parties) Setup

  let 
      single_observers = singleton marketplace
      observers = fromList [("Default", single_observers)]
      id = Id "Custom User Profile"

  userProfileKey <- createUserProfile marketplace user public observers id "Username" "Duarte" "Costa" "Duarte Ferreira da Costa" "password" (date 2001 Dec 19) (Some Male) Portuguese "duarte.ferreira.costa@tecnico.ulisboa.pt" (Some 912345678) 15122679 21235678 12345678910 [""]
  updateUserProfileFullName marketplace user public userProfileKey "Rui Marvila Teste"

testCreateAndModifyUserProfilePassword : Script ()
testCreateAndModifyUserProfilePassword = do
  parties@[marketplace, user, public] <-
    mapA allocateParty ["Marketplace", "User", "Public"]
  Fixture{instruments; accounts; holdings; roles} <- submitMulti parties [] do createAndExerciseCmd (Scenario with parties) Setup

  let 
      single_observers = singleton marketplace
      observers = fromList [("Default", single_observers)]
      id = Id "Custom User Profile"

  userProfileKey <- createUserProfile marketplace user public observers id "Username" "Duarte" "Costa" "Duarte Ferreira da Costa" "password" (date 2001 Dec 19) (Some Male) Portuguese "duarte.ferreira.costa@tecnico.ulisboa.pt" (Some 912345678) 15122679 21235678 12345678910 [""]
  updateUserProfilePassword marketplace user public userProfileKey "updated_password"

  pure()

testCreateAndModifyUserProfileFirstName : Script ()
testCreateAndModifyUserProfileFirstName = do
  parties@[marketplace, user, public] <-
    mapA allocateParty ["Marketplace", "User", "Public"]
  Fixture{instruments; accounts; holdings; roles} <- submitMulti parties [] do createAndExerciseCmd (Scenario with parties) Setup

  let 
      single_observers = singleton marketplace
      observers = fromList [("Default", single_observers)]
      id = Id "Custom User Profile"

  userProfileKey <- createUserProfile marketplace user public observers id "Username" "Duarte" "Costa" "Duarte Ferreira da Costa" "password" (date 2001 Dec 19) (Some Male) Portuguese "duarte.ferreira.costa@tecnico.ulisboa.pt" (Some 912345678) 15122679 21235678 12345678910 [""]
  updateUserProfileFirstName marketplace user public userProfileKey "Rui"

  pure()

testCreateAndModifyUserProfileLastName : Script ()
testCreateAndModifyUserProfileLastName = do
  parties@[marketplace, user, public] <-
    mapA allocateParty ["Marketplace", "User", "Public"]
  Fixture{instruments; accounts; holdings; roles} <- submitMulti parties [] do createAndExerciseCmd (Scenario with parties) Setup

  let 
      single_observers = singleton marketplace
      observers = fromList [("Default", single_observers)]
      id = Id "Custom User Profile"

  userProfileKey <- createUserProfile marketplace user public observers id "Username" "Duarte" "Costa" "Duarte Ferreira da Costa" "password" (date 2001 Dec 19) (Some Male) Portuguese "duarte.ferreira.costa@tecnico.ulisboa.pt" (Some 912345678) 15122679 21235678 12345678910 [""]
  updateUserProfileLastName marketplace user public userProfileKey "Teste"

  pure()

testCreateAndModifyUserProfileContactMail : Script ()
testCreateAndModifyUserProfileContactMail = do
  parties@[marketplace, user, public] <-
    mapA allocateParty ["Marketplace", "User", "Public"]
  Fixture{instruments; accounts; holdings; roles} <- submitMulti parties [] do createAndExerciseCmd (Scenario with parties) Setup

  let 
      single_observers = singleton marketplace
      observers = fromList [("Default", single_observers)]
      id = Id "Custom User Profile"

  userProfileKey <- createUserProfile marketplace user public observers id "Username" "Duarte" "Costa" "Duarte Ferreira da Costa" "password" (date 2001 Dec 19) (Some Male) Portuguese "duarte.ferreira.costa@tecnico.ulisboa.pt" (Some 912345678) 15122679 21235678 12345678910 [""]
  updateUserProfileContactMail marketplace user public userProfileKey "teste@gmail.com"

  pure()

testCreateAndModifyUserProfileBirthday : Script ()
testCreateAndModifyUserProfileBirthday = do
  parties@[marketplace, user, public] <-
    mapA allocateParty ["Marketplace", "User", "Public"]
  Fixture{instruments; accounts; holdings; roles} <- submitMulti parties [] do createAndExerciseCmd (Scenario with parties) Setup

  let 
      single_observers = singleton marketplace
      observers = fromList [("Default", single_observers)]
      id = Id "Custom User Profile"

  userProfileKey <- createUserProfile marketplace user public observers id "Username" "Duarte" "Costa" "Duarte Ferreira da Costa" "password" (date 2001 Dec 19) (Some Male) Portuguese "duarte.ferreira.costa@tecnico.ulisboa.pt" (Some 912345678) 15122679 21235678 12345678910 [""]
  updateUserProfileBirthday marketplace user public userProfileKey (date 1990 Jan 1)

  pure()

testCreateAndModifyUserProfileGender : Script ()
testCreateAndModifyUserProfileGender = do
  parties@[marketplace, user, public] <-
    mapA allocateParty ["Marketplace", "User", "Public"]
  Fixture{instruments; accounts; holdings; roles} <- submitMulti parties [] do createAndExerciseCmd (Scenario with parties) Setup

  let 
      single_observers = singleton marketplace
      observers = fromList [("Default", single_observers)]
      id = Id "Custom User Profile"

  userProfileKey <- createUserProfile marketplace user public observers id "Username" "Duarte" "Costa" "Duarte Ferreira da Costa" "password" (date 2001 Dec 19) (Some Male) Portuguese "duarte.ferreira.costa@tecnico.ulisboa.pt" (Some 912345678) 15122679 21235678 12345678910 [""]
  updateUserProfileGender marketplace user public userProfileKey (Some Female)

  pure()

testCreateAndModifyUserProfileNationality : Script ()
testCreateAndModifyUserProfileNationality = do
  parties@[marketplace, user, public] <-
    mapA allocateParty ["Marketplace", "User", "Public"]
  Fixture{instruments; accounts; holdings; roles} <- submitMulti parties [] do createAndExerciseCmd (Scenario with parties) Setup

  let 
      single_observers = singleton marketplace
      observers = fromList [("Default", single_observers)]
      id = Id "Custom User Profile"

  userProfileKey <- createUserProfile marketplace user public observers id "Username" "Duarte" "Costa" "Duarte Ferreira da Costa" "password" (date 2001 Dec 19) (Some Male) Portuguese "duarte.ferreira.costa@tecnico.ulisboa.pt" (Some 912345678) 15122679 21235678 12345678910 [""]
  updateUserProfileNationality marketplace user public userProfileKey Russian

  pure()

testCreateAndModifyUserProfileCellphoneNumber : Script ()
testCreateAndModifyUserProfileCellphoneNumber = do
  parties@[marketplace, user, public] <-
    mapA allocateParty ["Marketplace", "User", "Public"]
  Fixture{instruments; accounts; holdings; roles} <- submitMulti parties [] do createAndExerciseCmd (Scenario with parties) Setup

  let 
      single_observers = singleton marketplace
      observers = fromList [("Default", single_observers)]
      id = Id "Custom User Profile"

  userProfileKey <- createUserProfile marketplace user public observers id "Username" "Duarte" "Costa" "Duarte Ferreira da Costa" "password" (date 2001 Dec 19) (Some Male) Portuguese "duarte.ferreira.costa@tecnico.ulisboa.pt" (Some 912345678) 15122679 21235678 12345678910 [""]
  updateUserProfileCellphoneNumber marketplace user public userProfileKey (Some 999999999)

  pure()

testCreateAndModifyUserProfileIdNumber : Script ()
testCreateAndModifyUserProfileIdNumber = do
  parties@[marketplace, user, public] <-
    mapA allocateParty ["Marketplace", "User", "Public"]
  Fixture{instruments; accounts; holdings; roles} <- submitMulti parties [] do createAndExerciseCmd (Scenario with parties) Setup

  let 
      single_observers = singleton marketplace
      observers = fromList [("Default", single_observers)]
      id = Id "Custom User Profile"

  userProfileKey <- createUserProfile marketplace user public observers id "Username" "Duarte" "Costa" "Duarte Ferreira da Costa" "password" (date 2001 Dec 19) (Some Male) Portuguese "duarte.ferreira.costa@tecnico.ulisboa.pt" (Some 912345678) 15122679 21235678 12345678910 [""]
  updateUserProfileIdNumber marketplace user public userProfileKey 1010101010101

  pure()

testCreateAndModifyUserProfileTaxId : Script ()
testCreateAndModifyUserProfileTaxId = do
  parties@[marketplace, user, public] <-
    mapA allocateParty ["Marketplace", "User", "Public"]
  Fixture{instruments; accounts; holdings; roles} <- submitMulti parties [] do createAndExerciseCmd (Scenario with parties) Setup

  let 
      single_observers = singleton marketplace
      observers = fromList [("Default", single_observers)]
      id = Id "Custom User Profile"

  userProfileKey <- createUserProfile marketplace user public observers id "Username" "Duarte" "Costa" "Duarte Ferreira da Costa" "password" (date 2001 Dec 19) (Some Male) Portuguese "duarte.ferreira.costa@tecnico.ulisboa.pt" (Some 912345678) 15122679 21235678 12345678910 [""]
  updateUserProfileTaxId marketplace user public userProfileKey 123456789

  pure()

testCreateAndModifyUserProfileSocialSecurityId : Script ()
testCreateAndModifyUserProfileSocialSecurityId = do
  parties@[marketplace, user, public] <-
    mapA allocateParty ["Marketplace", "User", "Public"]
  Fixture{instruments; accounts; holdings; roles} <- submitMulti parties [] do createAndExerciseCmd (Scenario with parties) Setup

  let 
      single_observers = singleton marketplace
      observers = fromList [("Default", single_observers)]
      id = Id "Custom User Profile"

  userProfileKey <- createUserProfile marketplace user public observers id "Username" "Duarte" "Costa" "Duarte Ferreira da Costa" "password" (date 2001 Dec 19) (Some Male) Portuguese "duarte.ferreira.costa@tecnico.ulisboa.pt" (Some 912345678) 15122679 21235678 12345678910 [""]
  updateUserProfileSocialSecurityId marketplace user public userProfileKey 99999999999

  pure()

testCreateAndModifyUserProfilePhotoReferences : Script ()
testCreateAndModifyUserProfilePhotoReferences = do
  parties@[marketplace, user, public] <-
    mapA allocateParty ["Marketplace", "User", "Public"]
  Fixture{instruments; accounts; holdings; roles} <- submitMulti parties [] do createAndExerciseCmd (Scenario with parties) Setup

  let 
      single_observers = singleton marketplace
      observers = fromList [("Default", single_observers)]
      id = Id "Custom User Profile"

  userProfileKey <- createUserProfile marketplace user public observers id "Username" "Duarte" "Costa" "Duarte Ferreira da Costa" "password" (date 2001 Dec 19) (Some Male) Portuguese "duarte.ferreira.costa@tecnico.ulisboa.pt" (Some 912345678) 15122679 21235678 12345678910 [""]
  updateUserProfilePhotoReferences marketplace user public userProfileKey ["", ""]

  pure()

