module Test.Unit.ResidencePropertyManager where

import Prelude hiding (Scenario)
import Daml.Script
import DA.Map (fromList)
import DA.Set (singleton)
import DA.Date

import Interface.PropertyManager.Property.Common (ResidenceType(..), Parking(..), Orientation(..))
import Test.Util.Update.Service (createPropertyManagerService)
import Test.Util.Update.Role (createOperatorRole, createRoleUser)
import Test.Util.Update.Workflow (createInitialUserRole)
import Test.Util.Script.Workflow (createResidenceProperty, updateResidencePrice, updateResidencePropertyAddress, updateResidencePropertyPostalCode, updateResidencePropertyDistrict, updateResidencePropertyCounty, updateResidenceGrossArea, updateResidenceUsableArea, updateResidenceBedrooms, updateResidenceBathrooms, updateResidenceFloors, updateResidenceType, updateResidenceBackyard, updateResidenceParking, updateResidenceBuildDate, updateResidenceOrientation, updateResidenceInstalledEquipment, updateResidenceAdditionalInformation, updateResidenceDescription)
import Test.Types (Fixture(..))

import Daml.Finance.Interface.Types.Common.Types (Id(..), InstrumentKey(..), HoldingStandard(..))


template Scenario
  with
    parties : [Party]
  where
    signatory parties

    nonconsuming choice Setup : Fixture
      controller parties
      do
        let [marketplace, user, public] = parties

        -- Create Roles

        createOperatorRole marketplace
        userRole <- createInitialUserRole marketplace public
        createRoleUser marketplace user userRole

        -- Create Services

        createPropertyManagerService marketplace user

        pure Fixture with instruments = []; accounts = []; holdings = []; services = []; roles = []

testCreateResidenceProperty : Script ()
testCreateResidenceProperty = do
  parties@[marketplace, user, public] <-
    mapA allocateParty ["Marketplace", "User", "Public"]
  Fixture{instruments; accounts; holdings; roles} <- submitMulti parties [] do createAndExerciseCmd (Scenario with parties) Setup

  let 
      single_observers = singleton marketplace
      observers = fromList [("Default", single_observers)]
      id = Id "Custom Residence Property"
      instrument = InstrumentKey with issuer=marketplace; depository=user; id = Id "ResidencePropertyInstrumentKey"; version = "0"; holdingStandard = Transferable

  (_,propertyKey) <- createResidenceProperty marketplace user public observers id instrument 200000.0 "RandomPropertyAddress" "RandomPropertyPostalCode" "RandomPropertyDistrict" "RandomPropertyCounty" 200.0 150.0 3 2 2 Townhouse "BackyardDescription" PrivateGarage (date 2024 Apr 04) South "InstalledEquipment" "AdditionalInformation" "Description"

  pure()

testModifyResidencePrice : Script ()
testModifyResidencePrice = do
  parties@[marketplace, user, public] <-
    mapA allocateParty ["Marketplace", "User", "Public"]
  Fixture{instruments; accounts; holdings; roles} <- submitMulti parties [] do createAndExerciseCmd (Scenario with parties) Setup

  let 
      single_observers = singleton marketplace
      observers = fromList [("Default", single_observers)]
      id = Id "Custom Residence Property"
      instrument = InstrumentKey with issuer=marketplace; depository=user; id = Id "ResidencePropertyInstrumentKey"; version = "0"; holdingStandard = Transferable

  (_,propertyKey) <- createResidenceProperty marketplace user public observers id instrument 200000.0 "RandomPropertyAddress" "RandomPropertyPostalCode" "RandomPropertyDistrict" "RandomPropertyCounty" 200.0 150.0 3 2 2 Townhouse "BackyardDescription" PrivateGarage (date 2024 Apr 04) South "InstalledEquipment" "AdditionalInformation" "Description"
  updateResidencePrice marketplace user public propertyKey 1000000.0

  pure()

testModifyResidencePropertyAddress : Script ()
testModifyResidencePropertyAddress = do
  parties@[marketplace, user, public] <-
    mapA allocateParty ["Marketplace", "User", "Public"]
  Fixture{instruments; accounts; holdings; roles} <- submitMulti parties [] do createAndExerciseCmd (Scenario with parties) Setup

  let 
      single_observers = singleton marketplace
      observers = fromList [("Default", single_observers)]
      id = Id "Custom Residence Property"
      instrument = InstrumentKey with issuer=marketplace; depository=user; id = Id "ResidencePropertyInstrumentKey"; version = "0"; holdingStandard = Transferable

  (_,propertyKey) <- createResidenceProperty marketplace user public observers id instrument 200000.0 "RandomPropertyAddress" "RandomPropertyPostalCode" "RandomPropertyDistrict" "RandomPropertyCounty" 200.0 150.0 3 2 2 Townhouse "BackyardDescription" PrivateGarage (date 2024 Apr 04) South "InstalledEquipment" "AdditionalInformation" "Description"
  updateResidencePropertyAddress marketplace user public propertyKey "Updated Property Address"

  pure()

testModifyResidencePropertyPostalCode : Script ()
testModifyResidencePropertyPostalCode = do
  parties@[marketplace, user, public] <-
    mapA allocateParty ["Marketplace", "User", "Public"]
  Fixture{instruments; accounts; holdings; roles} <- submitMulti parties [] do createAndExerciseCmd (Scenario with parties) Setup

  let 
      single_observers = singleton marketplace
      observers = fromList [("Default", single_observers)]
      id = Id "Custom Residence Property"
      instrument = InstrumentKey with issuer=marketplace; depository=user; id = Id "ResidencePropertyInstrumentKey"; version = "0"; holdingStandard = Transferable


  (_,propertyKey) <- createResidenceProperty marketplace user public observers id instrument 200000.0 "RandomPropertyAddress" "RandomPropertyPostalCode" "RandomPropertyDistrict" "RandomPropertyCounty" 200.0 150.0 3 2 2 Townhouse "BackyardDescription" PrivateGarage (date 2024 Apr 04) South "InstalledEquipment" "AdditionalInformation" "Description"
  updateResidencePropertyPostalCode marketplace user public propertyKey "Updated Property Postal Code"

  pure()

testModifyResidencePropertyDistrict : Script ()
testModifyResidencePropertyDistrict = do
  parties@[marketplace, user, public] <-
    mapA allocateParty ["Marketplace", "User", "Public"]
  Fixture{instruments; accounts; holdings; roles} <- submitMulti parties [] do createAndExerciseCmd (Scenario with parties) Setup

  let 
      single_observers = singleton marketplace
      observers = fromList [("Default", single_observers)]
      id = Id "Custom Residence Property"
      instrument = InstrumentKey with issuer=marketplace; depository=user; id = Id "ResidencePropertyInstrumentKey"; version = "0"; holdingStandard = Transferable


  (_,propertyKey) <- createResidenceProperty marketplace user public observers id instrument 200000.0 "RandomPropertyAddress" "RandomPropertyPostalCode" "RandomPropertyDistrict" "RandomPropertyCounty" 200.0 150.0 3 2 2 Townhouse "BackyardDescription" PrivateGarage (date 2024 Apr 04) South "InstalledEquipment" "AdditionalInformation" "Description"
  updateResidencePropertyDistrict marketplace user public propertyKey "Updated Property District"

  pure()

testModifyResidencePropertyCounty : Script ()
testModifyResidencePropertyCounty = do
  parties@[marketplace, user, public] <-
    mapA allocateParty ["Marketplace", "User", "Public"]
  Fixture{instruments; accounts; holdings; roles} <- submitMulti parties [] do createAndExerciseCmd (Scenario with parties) Setup

  let 
      single_observers = singleton marketplace
      observers = fromList [("Default", single_observers)]
      id = Id "Custom Residence Property"
      instrument = InstrumentKey with issuer=marketplace; depository=user; id = Id "ResidencePropertyInstrumentKey"; version = "0"; holdingStandard = Transferable


  (_,propertyKey) <- createResidenceProperty marketplace user public observers id instrument 200000.0 "RandomPropertyAddress" "RandomPropertyPostalCode" "RandomPropertyDistrict" "RandomPropertyCounty" 200.0 150.0 3 2 2 Townhouse "BackyardDescription" PrivateGarage (date 2024 Apr 04) South "InstalledEquipment" "AdditionalInformation" "Description"
  updateResidencePropertyCounty marketplace user public propertyKey "Updated Property County"

  pure()

testModifyResidencePropertyGrossArea : Script ()
testModifyResidencePropertyGrossArea = do
  parties@[marketplace, user, public] <-
    mapA allocateParty ["Marketplace", "User", "Public"]
  Fixture{instruments; accounts; holdings; roles} <- submitMulti parties [] do createAndExerciseCmd (Scenario with parties) Setup

  let 
      single_observers = singleton marketplace
      observers = fromList [("Default", single_observers)]
      id = Id "Custom Residence Property"
      instrument = InstrumentKey with issuer=marketplace; depository=user; id = Id "ResidencePropertyInstrumentKey"; version = "0"; holdingStandard = Transferable


  (_,propertyKey) <- createResidenceProperty marketplace user public observers id instrument 200000.0 "RandomPropertyAddress" "RandomPropertyPostalCode" "RandomPropertyDistrict" "RandomPropertyCounty" 200.0 150.0 3 2 2 Townhouse "BackyardDescription" PrivateGarage (date 2024 Apr 04) South "InstalledEquipment" "AdditionalInformation" "Description"
  updateResidenceGrossArea marketplace user public propertyKey 220.0

  pure()

testModifyResidencePropertyUsableArea : Script ()
testModifyResidencePropertyUsableArea = do
  parties@[marketplace, user, public] <-
    mapA allocateParty ["Marketplace", "User", "Public"]
  Fixture{instruments; accounts; holdings; roles} <- submitMulti parties [] do createAndExerciseCmd (Scenario with parties) Setup

  let 
      single_observers = singleton marketplace
      observers = fromList [("Default", single_observers)]
      id = Id "Custom Residence Property"
      instrument = InstrumentKey with issuer=marketplace; depository=user; id = Id "ResidencePropertyInstrumentKey"; version = "0"; holdingStandard = Transferable


  (_,propertyKey) <- createResidenceProperty marketplace user public observers id instrument 200000.0 "RandomPropertyAddress" "RandomPropertyPostalCode" "RandomPropertyDistrict" "RandomPropertyCounty" 200.0 150.0 3 2 2 Townhouse "BackyardDescription" PrivateGarage (date 2024 Apr 04) South "InstalledEquipment" "AdditionalInformation" "Description"
  updateResidenceUsableArea marketplace user public propertyKey 200.0

  pure()

testModifyResidencePropertyBedrooms : Script ()
testModifyResidencePropertyBedrooms = do
  parties@[marketplace, user, public] <-
    mapA allocateParty ["Marketplace", "User", "Public"]
  Fixture{instruments; accounts; holdings; roles} <- submitMulti parties [] do createAndExerciseCmd (Scenario with parties) Setup

  let 
      single_observers = singleton marketplace
      observers = fromList [("Default", single_observers)]
      id = Id "Custom Residence Property"
      instrument = InstrumentKey with issuer=marketplace; depository=user; id = Id "ResidencePropertyInstrumentKey"; version = "0"; holdingStandard = Transferable


  (_,propertyKey) <- createResidenceProperty marketplace user public observers id instrument 200000.0 "RandomPropertyAddress" "RandomPropertyPostalCode" "RandomPropertyDistrict" "RandomPropertyCounty" 200.0 150.0 3 2 2 Townhouse "BackyardDescription" PrivateGarage (date 2024 Apr 04) South "InstalledEquipment" "AdditionalInformation" "Description"
  updateResidenceBedrooms marketplace user public propertyKey 4

  pure()

testModifyResidencePropertyBathrooms : Script ()
testModifyResidencePropertyBathrooms = do
  parties@[marketplace, user, public] <-
    mapA allocateParty ["Marketplace", "User", "Public"]
  Fixture{instruments; accounts; holdings; roles} <- submitMulti parties [] do createAndExerciseCmd (Scenario with parties) Setup

  let 
      single_observers = singleton marketplace
      observers = fromList [("Default", single_observers)]
      id = Id "Custom Residence Property"
      instrument = InstrumentKey with issuer=marketplace; depository=user; id = Id "ResidencePropertyInstrumentKey"; version = "0"; holdingStandard = Transferable


  (_,propertyKey) <- createResidenceProperty marketplace user public observers id instrument 200000.0 "RandomPropertyAddress" "RandomPropertyPostalCode" "RandomPropertyDistrict" "RandomPropertyCounty" 200.0 150.0 3 2 2 Townhouse "BackyardDescription" PrivateGarage (date 2024 Apr 04) South "InstalledEquipment" "AdditionalInformation" "Description"
  updateResidenceBathrooms marketplace user public propertyKey 3

  pure()

testModifyResidencePropertyFloors : Script ()
testModifyResidencePropertyFloors = do
  parties@[marketplace, user, public] <-
    mapA allocateParty ["Marketplace", "User", "Public"]
  Fixture{instruments; accounts; holdings; roles} <- submitMulti parties [] do createAndExerciseCmd (Scenario with parties) Setup

  let 
      single_observers = singleton marketplace
      observers = fromList [("Default", single_observers)]
      id = Id "Custom Residence Property"
      instrument = InstrumentKey with issuer=marketplace; depository=user; id = Id "ResidencePropertyInstrumentKey"; version = "0"; holdingStandard = Transferable


  (_,propertyKey) <- createResidenceProperty marketplace user public observers id instrument 200000.0 "RandomPropertyAddress" "RandomPropertyPostalCode" "RandomPropertyDistrict" "RandomPropertyCounty" 200.0 150.0 3 2 2 Townhouse "BackyardDescription" PrivateGarage (date 2024 Apr 04) South "InstalledEquipment" "AdditionalInformation" "Description"
  updateResidenceFloors marketplace user public propertyKey 4

testModifyResidenceType : Script ()
testModifyResidenceType = do
  parties@[marketplace, user, public] <-
    mapA allocateParty ["Marketplace", "User", "Public"]
  Fixture{instruments; accounts; holdings; roles} <- submitMulti parties [] do createAndExerciseCmd (Scenario with parties) Setup

  let 
      single_observers = singleton marketplace
      observers = fromList [("Default", single_observers)]
      id = Id "Custom Residence Property"
      instrument = InstrumentKey with issuer=marketplace; depository=user; id = Id "ResidencePropertyInstrumentKey"; version = "0"; holdingStandard = Transferable


  (_,propertyKey) <- createResidenceProperty marketplace user public observers id instrument 200000.0 "RandomPropertyAddress" "RandomPropertyPostalCode" "RandomPropertyDistrict" "RandomPropertyCounty" 200.0 150.0 3 2 2 Townhouse "BackyardDescription" PrivateGarage (date 2024 Apr 04) South "InstalledEquipment" "AdditionalInformation" "Description"
  updateResidenceType marketplace user public propertyKey CornerLot

  pure()

testModifyResidencePropertyBackyard : Script ()
testModifyResidencePropertyBackyard = do
  parties@[marketplace, user, public] <-
    mapA allocateParty ["Marketplace", "User", "Public"]
  Fixture{instruments; accounts; holdings; roles} <- submitMulti parties [] do createAndExerciseCmd (Scenario with parties) Setup

  let 
      single_observers = singleton marketplace
      observers = fromList [("Default", single_observers)]
      id = Id "Custom Residence Property"
      instrument = InstrumentKey with issuer=marketplace; depository=user; id = Id "ResidencePropertyInstrumentKey"; version = "0"; holdingStandard = Transferable


  (_,propertyKey) <- createResidenceProperty marketplace user public observers id instrument 200000.0 "RandomPropertyAddress" "RandomPropertyPostalCode" "RandomPropertyDistrict" "RandomPropertyCounty" 200.0 150.0 3 2 2 Townhouse "BackyardDescription" PrivateGarage (date 2024 Apr 04) South "InstalledEquipment" "AdditionalInformation" "Description"
  updateResidenceBackyard marketplace user public propertyKey "Updated Backyard Description"

  pure()

testModifyResidencePropertyParking : Script ()
testModifyResidencePropertyParking = do
  parties@[marketplace, user, public] <-
    mapA allocateParty ["Marketplace", "User", "Public"]
  Fixture{instruments; accounts; holdings; roles} <- submitMulti parties [] do createAndExerciseCmd (Scenario with parties) Setup

  let 
      single_observers = singleton marketplace
      observers = fromList [("Default", single_observers)]
      id = Id "Custom Residence Property"
      instrument = InstrumentKey with issuer=marketplace; depository=user; id = Id "ResidencePropertyInstrumentKey"; version = "0"; holdingStandard = Transferable


  (_,propertyKey) <- createResidenceProperty marketplace user public observers id instrument 200000.0 "RandomPropertyAddress" "RandomPropertyPostalCode" "RandomPropertyDistrict" "RandomPropertyCounty" 200.0 150.0 3 2 2 Townhouse "BackyardDescription" PrivateGarage (date 2024 Apr 04) South "InstalledEquipment" "AdditionalInformation" "Description"
  updateResidenceParking marketplace user public propertyKey Street

  pure()

testModifyResidencePropertyBuildDate : Script ()
testModifyResidencePropertyBuildDate = do
  parties@[marketplace, user, public] <-
    mapA allocateParty ["Marketplace", "User", "Public"]
  Fixture{instruments; accounts; holdings; roles} <- submitMulti parties [] do createAndExerciseCmd (Scenario with parties) Setup

  let 
      single_observers = singleton marketplace
      observers = fromList [("Default", single_observers)]
      id = Id "Custom Residence Property"
      instrument = InstrumentKey with issuer=marketplace; depository=user; id = Id "ResidencePropertyInstrumentKey"; version = "0"; holdingStandard = Transferable


  (_,propertyKey) <- createResidenceProperty marketplace user public observers id instrument 200000.0 "RandomPropertyAddress" "RandomPropertyPostalCode" "RandomPropertyDistrict" "RandomPropertyCounty" 200.0 150.0 3 2 2 Townhouse "BackyardDescription" PrivateGarage (date 2024 Apr 04) South "InstalledEquipment" "AdditionalInformation" "Description"
  updateResidenceBuildDate marketplace user public propertyKey (date 2023 Jan 01)

  pure()

testModifyResidencePropertyOrientation : Script ()
testModifyResidencePropertyOrientation = do
  parties@[marketplace, user, public] <-
    mapA allocateParty ["Marketplace", "User", "Public"]
  Fixture{instruments; accounts; holdings; roles} <- submitMulti parties [] do createAndExerciseCmd (Scenario with parties) Setup

  let 
      single_observers = singleton marketplace
      observers = fromList [("Default", single_observers)]
      id = Id "Custom Residence Property"
      instrument = InstrumentKey with issuer=marketplace; depository=user; id = Id "ResidencePropertyInstrumentKey"; version = "0"; holdingStandard = Transferable


  (_,propertyKey) <- createResidenceProperty marketplace user public observers id instrument 200000.0 "RandomPropertyAddress" "RandomPropertyPostalCode" "RandomPropertyDistrict" "RandomPropertyCounty" 200.0 150.0 3 2 2 Townhouse "BackyardDescription" PrivateGarage (date 2024 Apr 04) South "InstalledEquipment" "AdditionalInformation" "Description"
  updateResidenceOrientation marketplace user public propertyKey North

  pure()

testModifyResidencePropertyInstalledEquipment : Script ()
testModifyResidencePropertyInstalledEquipment = do
  parties@[marketplace, user, public] <-
    mapA allocateParty ["Marketplace", "User", "Public"]
  Fixture{instruments; accounts; holdings; roles} <- submitMulti parties [] do createAndExerciseCmd (Scenario with parties) Setup

  let 
      single_observers = singleton marketplace
      observers = fromList [("Default", single_observers)]
      id = Id "Custom Residence Property"
      instrument = InstrumentKey with issuer=marketplace; depository=user; id = Id "ResidencePropertyInstrumentKey"; version = "0"; holdingStandard = Transferable


  (_,propertyKey) <- createResidenceProperty marketplace user public observers id instrument 200000.0 "RandomPropertyAddress" "RandomPropertyPostalCode" "RandomPropertyDistrict" "RandomPropertyCounty" 200.0 150.0 3 2 2 Townhouse "BackyardDescription" PrivateGarage (date 2024 Apr 04) South "InstalledEquipment" "AdditionalInformation" "Description"
  updateResidenceInstalledEquipment marketplace user public propertyKey "Updated Installed Equipment Description"

  pure()

testModifyResidencePropertyAdditionalInformation : Script ()
testModifyResidencePropertyAdditionalInformation = do
  parties@[marketplace, user, public] <-
    mapA allocateParty ["Marketplace", "User", "Public"]
  Fixture{instruments; accounts; holdings; roles} <- submitMulti parties [] do createAndExerciseCmd (Scenario with parties) Setup

  let 
      single_observers = singleton marketplace
      observers = fromList [("Default", single_observers)]
      id = Id "Custom Residence Property"
      instrument = InstrumentKey with issuer=marketplace; depository=user; id = Id "ResidencePropertyInstrumentKey"; version = "0"; holdingStandard = Transferable


  (_,propertyKey) <- createResidenceProperty marketplace user public observers id instrument 200000.0 "RandomPropertyAddress" "RandomPropertyPostalCode" "RandomPropertyDistrict" "RandomPropertyCounty" 200.0 150.0 3 2 2 Townhouse "BackyardDescription" PrivateGarage (date 2024 Apr 04) South "InstalledEquipment" "AdditionalInformation" "Description"
  updateResidenceAdditionalInformation marketplace user public propertyKey "Updated Additional Information Description"

  pure()

testModifyResidencePropertyDescription : Script ()
testModifyResidencePropertyDescription = do
  parties@[marketplace, user, public] <-
    mapA allocateParty ["Marketplace", "User", "Public"]
  Fixture{instruments; accounts; holdings; roles} <- submitMulti parties [] do createAndExerciseCmd (Scenario with parties) Setup

  let 
      single_observers = singleton marketplace
      observers = fromList [("Default", single_observers)]
      id = Id "Custom Residence Property"
      instrument = InstrumentKey with issuer=marketplace; depository=user; id = Id "ResidencePropertyInstrumentKey"; version = "0"; holdingStandard = Transferable


  (_,propertyKey) <- createResidenceProperty marketplace user public observers id instrument 200000.0 "RandomPropertyAddress" "RandomPropertyPostalCode" "RandomPropertyDistrict" "RandomPropertyCounty" 200.0 150.0 3 2 2 Townhouse "BackyardDescription" PrivateGarage (date 2024 Apr 04) South "InstalledEquipment" "AdditionalInformation" "Description"
  updateResidenceDescription marketplace user public propertyKey "Updated Description"

  pure()
