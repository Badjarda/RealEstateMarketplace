module Test.Unit.WarehousePropertyManager where

import Prelude hiding (Scenario)
import Daml.Script
import DA.Map (fromList)
import DA.Set (singleton)
import DA.Date

import Interface.PropertyManager.Property.Common (WarehouseType(..))
import Test.Util.Update.Service (createPropertyManagerService)
import Test.Util.Update.Role (createOperatorRole, createRoleUser)
import Test.Util.Update.Workflow (createInitialUserRole)
import Test.Util.Script.Workflow (createWarehouseProperty, updateWarehousePropertyAddress, updateWarehousePropertyPostalCode, updateWarehousePropertyDistrict, updateWarehousePropertyCounty, updateWarehouseType, updateWarehouseGrossArea, updateWarehouseUsableArea, updateWarehouseFloors, updateWarehouseBuildDate, updateWarehouseInstalledEquipment, updateWarehouseAdditionalInformation, updateWarehouseDescription)
import Test.Types (Fixture(..))

import Daml.Finance.Interface.Types.Common.Types (Id(..), InstrumentKey(..), HoldingStandard(..))


template Scenario
  with
    parties : [Party]
  where
    signatory parties

    nonconsuming choice Setup : Fixture
      controller parties
      do
        let [marketplace, user, public] = parties

        -- Create Roles

        createOperatorRole marketplace
        userRole <- createInitialUserRole marketplace public
        createRoleUser marketplace user userRole

        -- Create Services

        createPropertyManagerService marketplace user

        pure Fixture with instruments = []; accounts = []; holdings = []; services = []; roles = []

testCreateWarehouseProperty : Script ()
testCreateWarehouseProperty = do
  parties@[marketplace, user, public] <-
    mapA allocateParty ["Marketplace", "User", "Public"]
  Fixture{instruments; accounts; holdings; roles} <- submitMulti parties [] do createAndExerciseCmd (Scenario with parties) Setup

  let 
      single_observers = singleton marketplace
      observers = fromList [("Default", single_observers)]
      id = Id "Custom Warehouse Property"
      instrument = InstrumentKey with issuer=marketplace; depository=user; id = Id "WarehousePropertyInstrumentKey"; version = "0"; holdingStandard = Transferable

  (_,propertyKey) <- createWarehouseProperty marketplace user public observers id instrument"RandomPropertyAddress" "RandomPropertyPostalCode" "RandomPropertyDistrict" "RandomPropertyCounty" StorageRoom 200.0 150.0 1 (date 2024 Apr 04)  "InstalledEquipment" "AdditionalInformation" "Description"

  pure()

testModifyWarehousePropertyAddress : Script ()
testModifyWarehousePropertyAddress = do
  parties@[marketplace, user, public] <-
    mapA allocateParty ["Marketplace", "User", "Public"]
  Fixture{instruments; accounts; holdings; roles} <- submitMulti parties [] do createAndExerciseCmd (Scenario with parties) Setup

  let 
      single_observers = singleton marketplace
      observers = fromList [("Default", single_observers)]
      id = Id "Custom Warehouse Property"
      instrument = InstrumentKey with issuer=marketplace; depository=user; id = Id "WarehousePropertyInstrumentKey"; version = "0"; holdingStandard = Transferable

  (_,propertyKey) <- createWarehouseProperty marketplace user public observers id instrument"RandomPropertyAddress" "RandomPropertyPostalCode" "RandomPropertyDistrict" "RandomPropertyCounty" StorageRoom 200.0 150.0 1 (date 2024 Apr 04)  "InstalledEquipment" "AdditionalInformation" "Description"
  updateWarehousePropertyAddress marketplace user public propertyKey "Updated Property Address"

  pure()

testModifyWarehousePropertyPostalCode : Script ()
testModifyWarehousePropertyPostalCode = do
  parties@[marketplace, user, public] <-
    mapA allocateParty ["Marketplace", "User", "Public"]
  Fixture{instruments; accounts; holdings; roles} <- submitMulti parties [] do createAndExerciseCmd (Scenario with parties) Setup

  let 
      single_observers = singleton marketplace
      observers = fromList [("Default", single_observers)]
      id = Id "Custom Warehouse Property"
      instrument = InstrumentKey with issuer=marketplace; depository=user; id = Id "WarehousePropertyInstrumentKey"; version = "0"; holdingStandard = Transferable

  (_,propertyKey) <- createWarehouseProperty marketplace user public observers id instrument"RandomPropertyAddress" "RandomPropertyPostalCode" "RandomPropertyDistrict" "RandomPropertyCounty" StorageRoom 200.0 150.0 1 (date 2024 Apr 04)  "InstalledEquipment" "AdditionalInformation" "Description"
  updateWarehousePropertyPostalCode marketplace user public propertyKey "Updated Property Postal Code"

  pure()

testModifyWarehousePropertyDistrict : Script ()
testModifyWarehousePropertyDistrict = do
  parties@[marketplace, user, public] <-
    mapA allocateParty ["Marketplace", "User", "Public"]
  Fixture{instruments; accounts; holdings; roles} <- submitMulti parties [] do createAndExerciseCmd (Scenario with parties) Setup

  let 
      single_observers = singleton marketplace
      observers = fromList [("Default", single_observers)]
      id = Id "Custom Warehouse Property"
      instrument = InstrumentKey with issuer=marketplace; depository=user; id = Id "WarehousePropertyInstrumentKey"; version = "0"; holdingStandard = Transferable

  (_,propertyKey) <- createWarehouseProperty marketplace user public observers id instrument"RandomPropertyAddress" "RandomPropertyPostalCode" "RandomPropertyDistrict" "RandomPropertyCounty" StorageRoom 200.0 150.0 1 (date 2024 Apr 04)  "InstalledEquipment" "AdditionalInformation" "Description"
  updateWarehousePropertyDistrict marketplace user public propertyKey "Updated Property District"

  pure()

testModifyWarehousePropertyCounty : Script ()
testModifyWarehousePropertyCounty = do
  parties@[marketplace, user, public] <-
    mapA allocateParty ["Marketplace", "User", "Public"]
  Fixture{instruments; accounts; holdings; roles} <- submitMulti parties [] do createAndExerciseCmd (Scenario with parties) Setup

  let 
      single_observers = singleton marketplace
      observers = fromList [("Default", single_observers)]
      id = Id "Custom Warehouse Property"
      instrument = InstrumentKey with issuer=marketplace; depository=user; id = Id "WarehousePropertyInstrumentKey"; version = "0"; holdingStandard = Transferable

  (_,propertyKey) <- createWarehouseProperty marketplace user public observers id instrument"RandomPropertyAddress" "RandomPropertyPostalCode" "RandomPropertyDistrict" "RandomPropertyCounty" StorageRoom 200.0 150.0 1 (date 2024 Apr 04)  "InstalledEquipment" "AdditionalInformation" "Description"
  updateWarehousePropertyCounty marketplace user public propertyKey "Updated Property County"

  pure()

testModifyWarehouseType : Script ()
testModifyWarehouseType = do
  parties@[marketplace, user, public] <-
    mapA allocateParty ["Marketplace", "User", "Public"]
  Fixture{instruments; accounts; holdings; roles} <- submitMulti parties [] do createAndExerciseCmd (Scenario with parties) Setup

  let 
      single_observers = singleton marketplace
      observers = fromList [("Default", single_observers)]
      id = Id "Custom Warehouse Property"
      instrument = InstrumentKey with issuer=marketplace; depository=user; id = Id "WarehousePropertyInstrumentKey"; version = "0"; holdingStandard = Transferable

  (_,propertyKey) <- createWarehouseProperty marketplace user public observers id instrument"RandomPropertyAddress" "RandomPropertyPostalCode" "RandomPropertyDistrict" "RandomPropertyCounty" StorageRoom 200.0 150.0 1 (date 2024 Apr 04)  "InstalledEquipment" "AdditionalInformation" "Description"
  updateWarehouseType marketplace user public propertyKey BuildingWarehouse

  pure()

testModifyWarehousePropertyGrossArea : Script ()
testModifyWarehousePropertyGrossArea = do
  parties@[marketplace, user, public] <-
    mapA allocateParty ["Marketplace", "User", "Public"]
  Fixture{instruments; accounts; holdings; roles} <- submitMulti parties [] do createAndExerciseCmd (Scenario with parties) Setup

  let 
      single_observers = singleton marketplace
      observers = fromList [("Default", single_observers)]
      id = Id "Custom Warehouse Property"
      instrument = InstrumentKey with issuer=marketplace; depository=user; id = Id "WarehousePropertyInstrumentKey"; version = "0"; holdingStandard = Transferable

  (_,propertyKey) <- createWarehouseProperty marketplace user public observers id instrument"RandomPropertyAddress" "RandomPropertyPostalCode" "RandomPropertyDistrict" "RandomPropertyCounty" StorageRoom 200.0 150.0 1 (date 2024 Apr 04)  "InstalledEquipment" "AdditionalInformation" "Description"
  updateWarehouseGrossArea marketplace user public propertyKey 220.0

  pure()

testModifyWarehousePropertyUsableArea : Script ()
testModifyWarehousePropertyUsableArea = do
  parties@[marketplace, user, public] <-
    mapA allocateParty ["Marketplace", "User", "Public"]
  Fixture{instruments; accounts; holdings; roles} <- submitMulti parties [] do createAndExerciseCmd (Scenario with parties) Setup

  let 
      single_observers = singleton marketplace
      observers = fromList [("Default", single_observers)]
      id = Id "Custom Warehouse Property"
      instrument = InstrumentKey with issuer=marketplace; depository=user; id = Id "WarehousePropertyInstrumentKey"; version = "0"; holdingStandard = Transferable

  (_,propertyKey) <- createWarehouseProperty marketplace user public observers id instrument"RandomPropertyAddress" "RandomPropertyPostalCode" "RandomPropertyDistrict" "RandomPropertyCounty" StorageRoom 200.0 150.0 1 (date 2024 Apr 04)  "InstalledEquipment" "AdditionalInformation" "Description"
  updateWarehouseUsableArea marketplace user public propertyKey 110.0

  pure()

testModifyWarehousePropertyFloors : Script ()
testModifyWarehousePropertyFloors = do
  parties@[marketplace, user, public] <-
    mapA allocateParty ["Marketplace", "User", "Public"]
  Fixture{instruments; accounts; holdings; roles} <- submitMulti parties [] do createAndExerciseCmd (Scenario with parties) Setup

  let 
      single_observers = singleton marketplace
      observers = fromList [("Default", single_observers)]
      id = Id "Custom Warehouse Property"
      instrument = InstrumentKey with issuer=marketplace; depository=user; id = Id "WarehousePropertyInstrumentKey"; version = "0"; holdingStandard = Transferable

  (_,propertyKey) <- createWarehouseProperty marketplace user public observers id instrument"RandomPropertyAddress" "RandomPropertyPostalCode" "RandomPropertyDistrict" "RandomPropertyCounty" StorageRoom 200.0 150.0 1 (date 2024 Apr 04)  "InstalledEquipment" "AdditionalInformation" "Description"
  updateWarehouseFloors marketplace user public propertyKey 2

testModifyWarehousePropertyBuildDate : Script ()
testModifyWarehousePropertyBuildDate = do
  parties@[marketplace, user, public] <-
    mapA allocateParty ["Marketplace", "User", "Public"]
  Fixture{instruments; accounts; holdings; roles} <- submitMulti parties [] do createAndExerciseCmd (Scenario with parties) Setup

  let 
      single_observers = singleton marketplace
      observers = fromList [("Default", single_observers)]
      id = Id "Custom Warehouse Property"
      instrument = InstrumentKey with issuer=marketplace; depository=user; id = Id "WarehousePropertyInstrumentKey"; version = "0"; holdingStandard = Transferable

  (_,propertyKey) <- createWarehouseProperty marketplace user public observers id instrument"RandomPropertyAddress" "RandomPropertyPostalCode" "RandomPropertyDistrict" "RandomPropertyCounty" StorageRoom 200.0 150.0 1 (date 2024 Apr 04)  "InstalledEquipment" "AdditionalInformation" "Description"
  updateWarehouseBuildDate marketplace user public propertyKey (date 2023 Jan 01)

  pure()

testModifyWarehousePropertyInstalledEquipment : Script ()
testModifyWarehousePropertyInstalledEquipment = do
  parties@[marketplace, user, public] <-
    mapA allocateParty ["Marketplace", "User", "Public"]
  Fixture{instruments; accounts; holdings; roles} <- submitMulti parties [] do createAndExerciseCmd (Scenario with parties) Setup

  let 
      single_observers = singleton marketplace
      observers = fromList [("Default", single_observers)]
      id = Id "Custom Warehouse Property"
      instrument = InstrumentKey with issuer=marketplace; depository=user; id = Id "WarehousePropertyInstrumentKey"; version = "0"; holdingStandard = Transferable

  (_,propertyKey) <- createWarehouseProperty marketplace user public observers id instrument"RandomPropertyAddress" "RandomPropertyPostalCode" "RandomPropertyDistrict" "RandomPropertyCounty" StorageRoom 200.0 150.0 1 (date 2024 Apr 04)  "InstalledEquipment" "AdditionalInformation" "Description"
  updateWarehouseInstalledEquipment marketplace user public propertyKey "Updated Installed Equipment Description"

  pure()

testModifyWarehousePropertyAdditionalInformation : Script ()
testModifyWarehousePropertyAdditionalInformation = do
  parties@[marketplace, user, public] <-
    mapA allocateParty ["Marketplace", "User", "Public"]
  Fixture{instruments; accounts; holdings; roles} <- submitMulti parties [] do createAndExerciseCmd (Scenario with parties) Setup

  let 
      single_observers = singleton marketplace
      observers = fromList [("Default", single_observers)]
      id = Id "Custom Warehouse Property"
      instrument = InstrumentKey with issuer=marketplace; depository=user; id = Id "WarehousePropertyInstrumentKey"; version = "0"; holdingStandard = Transferable

  (_,propertyKey) <- createWarehouseProperty marketplace user public observers id instrument"RandomPropertyAddress" "RandomPropertyPostalCode" "RandomPropertyDistrict" "RandomPropertyCounty" StorageRoom 200.0 150.0 1 (date 2024 Apr 04)  "InstalledEquipment" "AdditionalInformation" "Description"
  updateWarehouseAdditionalInformation marketplace user public propertyKey "Updated Additional Information Description"

  pure()

testModifyWarehousePropertyDescription : Script ()
testModifyWarehousePropertyDescription = do
  parties@[marketplace, user, public] <-
    mapA allocateParty ["Marketplace", "User", "Public"]
  Fixture{instruments; accounts; holdings; roles} <- submitMulti parties [] do createAndExerciseCmd (Scenario with parties) Setup

  let 
      single_observers = singleton marketplace
      observers = fromList [("Default", single_observers)]
      id = Id "Custom Warehouse Property"
      instrument = InstrumentKey with issuer=marketplace; depository=user; id = Id "WarehousePropertyInstrumentKey"; version = "0"; holdingStandard = Transferable

  (_,propertyKey) <- createWarehouseProperty marketplace user public observers id instrument"RandomPropertyAddress" "RandomPropertyPostalCode" "RandomPropertyDistrict" "RandomPropertyCounty" StorageRoom 200.0 150.0 1 (date 2024 Apr 04)  "InstalledEquipment" "AdditionalInformation" "Description"
  updateWarehouseDescription marketplace user public propertyKey "Updated Description"

  pure()
