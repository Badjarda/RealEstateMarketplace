module Interface.Custody.Choices.SwapRequest where

import Interface.Common.Removable qualified as Removable (I, Implementation)
import Daml.Finance.Interface.Holding.Transferable qualified as Transferable (I)
import Daml.Finance.Interface.Types.Common.Types (AccountKey)

type I = SwapRequest

type V = View

data View = View
  with
    operator : Party
    buyer : Party
    seller : Party
    sellerAccount: AccountKey
    buyerAccount : AccountKey
    fungibleHoldingCid : ContractId Transferable.I
    fungibleAmount: Decimal
  deriving (Eq, Show)

interface SwapRequest where
  viewtype View

  asRemovable : Removable.I

type Implementation t = (HasToInterface t SwapRequest, Removable.Implementation t)
class (Implementation t) => HasImplementation t
instance HasImplementation SwapRequest
instance HasToInterface SwapRequest Removable.I where _toInterface = asRemovable