module Interface.Issuance.Issuance where

import Interface.Common.Removable qualified as Removable (I, Implementation)
import Daml.Finance.Interface.Types.Common.Types (Id, InstrumentQuantity)

type I = Issuance

type V = View

data View = View
  with
    operator : Party
    user : Party
    id : Id
    description : Text
    quantity : InstrumentQuantity
  deriving (Eq, Show)

interface Issuance where
  viewtype View
  asRemovable : Removable.I

type Implementation t = (HasToInterface t Issuance, Removable.Implementation t)
class (Implementation t) => HasImplementation t
instance HasImplementation Issuance
instance HasToInterface Issuance Removable.I where _toInterface = asRemovable
