{-# LANGUAGE AllowAmbiguousTypes #-}

module Interface.PropertyManager.Property.GarageProperty.GarageProperty where
import Interface.Common.Types (PropertyKey(..))
import Interface.PropertyManager.Property.Common (GarageType)

import Daml.Finance.Interface.Types.Common.Types (Id, PartiesMap, Parties, InstrumentKey)
import Daml.Finance.Interface.Util.Disclosure qualified as Disclosure (AddObservers(..), I, RemoveObservers(..), flattenObservers)
import Daml.Finance.Interface.Util.InterfaceKey (createReferenceHelper, disclosureUpdateReferenceHelper, exerciseInterfaceByKeyHelper)
import Daml.Finance.Interface.Util.InterfaceKey qualified as InterfaceKey (HasInterfaceKey(..))


type I = GarageProperty

type R = Reference

type V = View

data View = View
  with
    operator: Party
    user: Party
    id: Id
    instrument: InstrumentKey
    garagePrice: Decimal
    propertyAddress: Text
    propertyPostalCode : Text
    propertyDistrict : Text
    propertyCounty : Text
    garageArea: Decimal
    garageType: GarageType
    vehicleCapacity: Int
    installedEquipment: Text
    additionalInformation: Text
    description: Text
    photoReferences: [Text]
  deriving (Eq, Show)

toKey : View -> PropertyKey
toKey v = PropertyKey with operator = v.operator, user = v.user, id = v.id

propertyKey : (HasToInterface i GarageProperty) => i -> PropertyKey
propertyKey = toKey . view . toInterface @GarageProperty


interface GarageProperty requires Disclosure.I where
  viewtype V

  getKey : PropertyKey

  updateGarage : UpdateGarage -> Update(ContractId GarageProperty)

  getGarageInstrumentKey : GetGarageInstrumentKey -> Update(InstrumentKey)

  getGaragePrice : GetGaragePrice -> Update(Decimal)

  getGaragePropertyAddress : GetGaragePropertyAddress -> Update(Text)

  getGaragePropertyPostalCode : GetGaragePropertyPostalCode -> Update(Text)

  getGaragePropertyDistrict : GetGaragePropertyDistrict -> Update(Text)

  getGaragePropertyCounty : GetGaragePropertyCounty -> Update(Text)

  getGarageType : GetGarageType -> Update(GarageType)

  getGarageArea : GetGarageArea -> Update(Decimal)

  getVehicleCapacity : GetVehicleCapacity -> Update(Int)

  getGarageInstalledEquipment : GetGarageInstalledEquipment -> Update(Text)

  getGarageAdditionalInformation : GetGarageAdditionalInformation -> Update(Text)

  getGarageDescription : GetGarageDescription -> Update(Text)

  getGaragePhotoReferences : GetGaragePhotoReferences -> Update([Text])

  nonconsuming choice GetView : View
    with
      viewer : Party
    controller viewer
    do
      pure $ view this
  
  choice UpdateGarage: ContractId GarageProperty
    with
      newGaragePrice: Decimal
      newGaragePropertyAddress: Text
      newGaragePropertyPostalCode : Text
      newGaragePropertyDistrict : Text
      newGaragePropertyCounty : Text
      newGarageArea: Decimal
      newGarageType: GarageType
      newGarageVehicleCapacity: Int
      newGarageInstalledEquipment: Text
      newGarageAdditionalInformation: Text 
      newGarageDescription: Text
      newGaragePhotoReferences: [Text]
    controller signatory this
    do
      updateGarage this arg
  
  nonconsuming choice GetGarageInstrumentKey : InstrumentKey
    controller signatory this
    do
      getGarageInstrumentKey this arg

  nonconsuming choice GetGaragePrice : Decimal
    controller signatory this
    do
      getGaragePrice this arg
  
  nonconsuming choice GetGaragePropertyAddress : Text
    controller signatory this
    do
      getGaragePropertyAddress this arg

  nonconsuming choice GetGaragePropertyPostalCode : Text
    controller signatory this
    do
      getGaragePropertyPostalCode this arg
  
  nonconsuming choice GetGaragePropertyDistrict : Text
    controller signatory this
    do
      getGaragePropertyDistrict this arg

  nonconsuming choice GetGaragePropertyCounty : Text
    controller signatory this
    do
      getGaragePropertyCounty this arg

  nonconsuming choice GetGarageType : GarageType
    controller signatory this
    do
      getGarageType this arg

  nonconsuming choice GetGarageArea : Decimal
    controller signatory this
    do
      getGarageArea this arg

  nonconsuming choice GetVehicleCapacity : Int
    controller signatory this
    do
      getVehicleCapacity this arg
  
  nonconsuming choice GetGarageInstalledEquipment : Text
    controller signatory this
    do
      getGarageInstalledEquipment this arg
  
  nonconsuming choice GetGarageAdditionalInformation : Text
    controller signatory this
    do
      getGarageAdditionalInformation this arg

  nonconsuming choice GetGarageDescription : Text
    controller signatory this
    do
      getGarageDescription this arg
  
  nonconsuming choice GetGaragePhotoReferences : [Text]
    controller signatory this
    do
      getGaragePhotoReferences this arg
      
  choice Remove : ()
    controller signatory this
    do
      (refCid, _) <- fetchByKey @Reference $ getKey this
      archive refCid


template Reference
  with
    garagePropertyView : View
    cid : ContractId GarageProperty
    observers : PartiesMap
  where
    signatory garagePropertyView.operator
    observer Disclosure.flattenObservers observers, garagePropertyView.user

    key toKey garagePropertyView : PropertyKey
    maintainer key.operator

    nonconsuming choice GetCid : ContractId GarageProperty
      with
        viewer : Party
      controller viewer
      do
        pure cid

    choice SetCid : ContractId Reference
      with
        newCid : ContractId GarageProperty
      controller signatory this
      do
        create this with cid = newCid

    choice SetObservers : ContractId Reference
      with
        newObservers : PartiesMap
      controller signatory this
      do
        create this with observers = newObservers

disclose : (Text, Parties) -> Party -> Parties -> PropertyKey -> Update (ContractId GarageProperty)
disclose observersToAdd actor disclosers garageProperty =
  fromInterfaceContractId <$>
    exerciseInterfaceByKey @Disclosure.I
      garageProperty
      actor
      Disclosure.AddObservers with disclosers; observersToAdd

undisclose : (Text, Parties) -> Party -> Parties -> PropertyKey ->
  Update (Optional (ContractId GarageProperty))
undisclose observersToRemove actor disclosers garageProperty =
  fmap fromInterfaceContractId <$>
    exerciseInterfaceByKey @Disclosure.I
      garageProperty
      actor
      Disclosure.RemoveObservers with disclosers; observersToRemove

exerciseInterfaceByKey : forall i c r.
    ( HasInterfaceTypeRep i
    , HasExercise i c r
    )
    => PropertyKey -- ^ The GarageProperty key.
    -> Party      -- ^ The actor exercising.
    -> c          -- ^ The choice arguments.
    -> Update r
exerciseInterfaceByKey k actor arg =
  exerciseInterfaceByKeyHelper @Reference @GetCid @SetCid @SetObservers @GetView @i k actor arg

-- | HIDE
-- Create instance of HasInterfaceKey.
instance InterfaceKey.HasInterfaceKey GarageProperty View PropertyKey Reference GetCid SetCid SetObservers
  GetView where
    createReference = Reference
    getCid = GetCid
    setCid = SetCid
    setObservers = SetObservers
    getView = GetView

-- | HIDE
-- Create Reference for the GarageProperty.
createReference : Party -> ContractId GarageProperty -> Update (ContractId Reference)
createReference = createReferenceHelper @Reference @GetCid @SetCid @SetObservers @GetView

-- | HIDE
-- Helper function to update the GarageProperty reference once observers are added to the GarageProperty.
disclosureUpdateReference : PropertyKey -> PartiesMap -> ContractId GarageProperty ->
  Update (ContractId Disclosure.I)
disclosureUpdateReference =
  disclosureUpdateReferenceHelper @Reference @GetCid @SetCid @SetObservers @GetView