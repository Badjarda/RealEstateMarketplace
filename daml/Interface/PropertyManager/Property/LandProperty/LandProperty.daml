{-# LANGUAGE AllowAmbiguousTypes #-}

module Interface.PropertyManager.Property.LandProperty.LandProperty where
import Interface.Common.Types (PropertyKey(..))
import Interface.PropertyManager.Property.Common (LandType, ViableConstructionTypes)

import Daml.Finance.Interface.Types.Common.Types (Id, PartiesMap, Parties, InstrumentKey)
import Daml.Finance.Interface.Util.Disclosure qualified as Disclosure (AddObservers(..), I, RemoveObservers(..), flattenObservers)
import Daml.Finance.Interface.Util.InterfaceKey (createReferenceHelper, disclosureUpdateReferenceHelper, exerciseInterfaceByKeyHelper)
import Daml.Finance.Interface.Util.InterfaceKey qualified as InterfaceKey (HasInterfaceKey(..))


type I = LandProperty

type R = Reference

type V = View

data View = View
  with
    operator: Party
    user: Party
    id: Id
    instrument: InstrumentKey
    landPrice: Decimal
    propertyAddress: Text
    propertyPostalCode : Text
    propertyDistrict : Text
    propertyCounty : Text
    landType: LandType
    totalLandArea: Decimal
    minimumSurfaceForSale: Decimal
    buildableArea: Decimal
    buildableFloors: Int
    accessByRoad: Bool
    installedEquipment: Text
    viableConstructionTypes: [ViableConstructionTypes]
    additionalInformation: Text
    description: Text
    photoReferences: [Text]
  deriving (Eq, Show)

toKey : View -> PropertyKey
toKey v = PropertyKey with operator = v.operator, user = v.user, id = v.id

propertyKey : (HasToInterface i LandProperty) => i -> PropertyKey
propertyKey = toKey . view . toInterface @LandProperty


interface LandProperty requires Disclosure.I where
  viewtype V

  getKey : PropertyKey

  updateLand : UpdateLand -> Update(ContractId LandProperty)

  getLandInstrumentKey : GetLandInstrumentKey -> Update(InstrumentKey)

  getLandPrice : GetLandPrice -> Update(Decimal)

  getLandPropertyAddress : GetLandPropertyAddress -> Update(Text)

  getLandPropertyPostalCode : GetLandPropertyPostalCode -> Update(Text)

  getLandPropertyDistrict : GetLandPropertyDistrict -> Update(Text)

  getLandPropertyCounty : GetLandPropertyCounty -> Update(Text)

  getLandType : GetLandType -> Update(LandType)

  getTotalLandArea : GetTotalLandArea -> Update(Decimal)

  getLandMinimumSurfaceForSale : GetLandMinimumSurfaceForSale -> Update(Decimal)

  getLandBuildableArea : GetLandBuildableArea -> Update(Decimal)

  getLandBuildableFloors : GetLandBuildableFloors -> Update(Int)

  getLandAccessByRoad : GetLandAccessByRoad -> Update(Bool)

  getLandInstalledEquipment : GetLandInstalledEquipment -> Update(Text)

  getLandViableConstructionTypes : GetLandViableConstructionTypes -> Update([ViableConstructionTypes])

  getLandAdditionalInformation : GetLandAdditionalInformation -> Update(Text)

  getLandDescription : GetLandDescription -> Update(Text)

  getLandPhotoReferences : GetLandPhotoReferences -> Update([Text])

  nonconsuming choice GetView : View
    with
      viewer : Party
    controller viewer
    do
      pure $ view this
  
  choice UpdateLand: ContractId LandProperty
    with
      newLandPrice: Decimal
      newLandPropertyAddress: Text
      newLandPropertyPostalCode : Text
      newLandPropertyDistrict : Text
      newLandPropertyCounty : Text
      newLandType: LandType
      newLandTotalArea: Decimal
      newLandMinimumSurfaceForSale: Decimal
      newLandBuildableArea: Decimal
      newLandBuildableFloors: Int
      newLandAccessByRoad: Bool
      newLandInstalledEquipment: Text
      newLandViableConstructionTypes: [ViableConstructionTypes]
      newLandAdditionalInformation: Text 
      newLandDescription: Text
      newLandPhotoReferences: [Text]
    controller signatory this
    do
      updateLand this arg
  
  nonconsuming choice GetLandInstrumentKey : InstrumentKey
    controller signatory this
    do
      getLandInstrumentKey this arg
  
  nonconsuming choice GetLandPrice : Decimal
    controller signatory this
    do
      getLandPrice this arg
  
  nonconsuming choice GetLandPropertyAddress : Text
    controller signatory this
    do
      getLandPropertyAddress this arg

  nonconsuming choice GetLandPropertyPostalCode : Text
    controller signatory this
    do
      getLandPropertyPostalCode this arg
  
  nonconsuming choice GetLandPropertyDistrict : Text
    controller signatory this
    do
      getLandPropertyDistrict this arg

  nonconsuming choice GetLandPropertyCounty : Text
    controller signatory this
    do
      getLandPropertyCounty this arg

  nonconsuming choice GetLandType : LandType
    controller signatory this
    do
      getLandType this arg

  nonconsuming choice GetTotalLandArea : Decimal
    controller signatory this
    do
      getTotalLandArea this arg

  nonconsuming choice GetLandMinimumSurfaceForSale : Decimal
    controller signatory this
    do
      getLandMinimumSurfaceForSale this arg

  nonconsuming choice GetLandBuildableArea : Decimal
    controller signatory this
    do
      getLandBuildableArea this arg

  nonconsuming choice GetLandBuildableFloors : Int
    controller signatory this
    do
      getLandBuildableFloors this arg

  nonconsuming choice GetLandAccessByRoad : Bool
    controller signatory this
    do
      getLandAccessByRoad this arg
  
  nonconsuming choice GetLandInstalledEquipment : Text
    controller signatory this
    do
      getLandInstalledEquipment this arg

  nonconsuming choice GetLandViableConstructionTypes : [ViableConstructionTypes]
    controller signatory this
    do
      getLandViableConstructionTypes this arg
  
  nonconsuming choice GetLandAdditionalInformation : Text
    controller signatory this
    do
      getLandAdditionalInformation this arg

  nonconsuming choice GetLandDescription : Text
    controller signatory this
    do
      getLandDescription this arg
  
  nonconsuming choice GetLandPhotoReferences : [Text]
    controller signatory this
    do
      getLandPhotoReferences this arg
      
  choice Remove : ()
    controller signatory this
    do
      (refCid, _) <- fetchByKey @Reference $ getKey this
      archive refCid


template Reference
  with
    landPropertyView : View
    cid : ContractId LandProperty
    observers : PartiesMap
  where
    signatory landPropertyView.operator
    observer Disclosure.flattenObservers observers, landPropertyView.user

    key toKey landPropertyView : PropertyKey
    maintainer key.operator

    nonconsuming choice GetCid : ContractId LandProperty
      with
        viewer : Party
      controller viewer
      do
        pure cid

    choice SetCid : ContractId Reference
      with
        newCid : ContractId LandProperty
      controller signatory this
      do
        create this with cid = newCid

    choice SetObservers : ContractId Reference
      with
        newObservers : PartiesMap
      controller signatory this
      do
        create this with observers = newObservers

disclose : (Text, Parties) -> Party -> Parties -> PropertyKey -> Update (ContractId LandProperty)
disclose observersToAdd actor disclosers landProperty =
  fromInterfaceContractId <$>
    exerciseInterfaceByKey @Disclosure.I
      landProperty
      actor
      Disclosure.AddObservers with disclosers; observersToAdd

undisclose : (Text, Parties) -> Party -> Parties -> PropertyKey ->
  Update (Optional (ContractId LandProperty))
undisclose observersToRemove actor disclosers landProperty =
  fmap fromInterfaceContractId <$>
    exerciseInterfaceByKey @Disclosure.I
      landProperty
      actor
      Disclosure.RemoveObservers with disclosers; observersToRemove

exerciseInterfaceByKey : forall i c r.
    ( HasInterfaceTypeRep i
    , HasExercise i c r
    )
    => PropertyKey -- ^ The LandProperty key.
    -> Party      -- ^ The actor exercising.
    -> c          -- ^ The choice arguments.
    -> Update r
exerciseInterfaceByKey k actor arg =
  exerciseInterfaceByKeyHelper @Reference @GetCid @SetCid @SetObservers @GetView @i k actor arg

-- | HIDE
-- Create instance of HasInterfaceKey.
instance InterfaceKey.HasInterfaceKey LandProperty View PropertyKey Reference GetCid SetCid SetObservers
  GetView where
    createReference = Reference
    getCid = GetCid
    setCid = SetCid
    setObservers = SetObservers
    getView = GetView

-- | HIDE
-- Create Reference for the LandProperty.
createReference : Party -> ContractId LandProperty -> Update (ContractId Reference)
createReference = createReferenceHelper @Reference @GetCid @SetCid @SetObservers @GetView

-- | HIDE
-- Helper function to update the LandProperty reference once observers are added to the LandProperty.
disclosureUpdateReference : PropertyKey -> PartiesMap -> ContractId LandProperty ->
  Update (ContractId Disclosure.I)
disclosureUpdateReference =
  disclosureUpdateReferenceHelper @Reference @GetCid @SetCid @SetObservers @GetView