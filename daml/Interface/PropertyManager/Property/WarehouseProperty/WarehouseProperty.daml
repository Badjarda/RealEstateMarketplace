{-# LANGUAGE AllowAmbiguousTypes #-}

module Interface.PropertyManager.Property.WarehouseProperty.WarehouseProperty where
import Interface.Common.Types (PropertyKey(..))
import Interface.PropertyManager.Property.Common (WarehouseType(..))

import Daml.Finance.Interface.Types.Common.Types (Id, PartiesMap, Parties, InstrumentKey)
import Daml.Finance.Interface.Util.Disclosure qualified as Disclosure (AddObservers(..), I, RemoveObservers(..), flattenObservers)
import Daml.Finance.Interface.Util.InterfaceKey (createReferenceHelper, disclosureUpdateReferenceHelper, exerciseInterfaceByKeyHelper)
import Daml.Finance.Interface.Util.InterfaceKey qualified as InterfaceKey (HasInterfaceKey(..))


type I = WarehouseProperty

type R = Reference

type V = View

data View = View
  with
    operator: Party
    user: Party
    id: Id
    instrument: InstrumentKey
    warehousePrice: Decimal
    propertyAddress: Text
    propertyPostalCode : Text
    propertyDistrict : Text
    propertyCounty : Text
    warehouseType: WarehouseType 
    grossArea: Decimal
    usableArea: Decimal
    floors: Int
    buildDate: Date
    installedEquipment: Text
    additionalInformation: Text
    description: Text
    photoReferences: [Text]
  deriving (Eq, Show)

toKey : View -> PropertyKey
toKey v = PropertyKey with operator = v.operator, user = v.user, id = v.id

propertyKey : (HasToInterface i WarehouseProperty) => i -> PropertyKey
propertyKey = toKey . view . toInterface @WarehouseProperty


interface WarehouseProperty requires Disclosure.I where
  viewtype V

  getKey : PropertyKey

  updateWarehouse : UpdateWarehouse -> Update(ContractId WarehouseProperty)

  getWarehouseInstrumentKey : GetWarehouseInstrumentKey -> Update(InstrumentKey)

  getWarehousePrice : GetWarehousePrice -> Update(Decimal)

  getWarehousePropertyAddress : GetWarehousePropertyAddress -> Update(Text)

  getWarehousePropertyPostalCode : GetWarehousePropertyPostalCode -> Update(Text)

  getWarehousePropertyDistrict : GetWarehousePropertyDistrict -> Update(Text)

  getWarehousePropertyCounty : GetWarehousePropertyCounty -> Update(Text)

  getWarehouseType : GetWarehouseType -> Update(WarehouseType)

  getWarehouseGrossArea : GetWarehouseGrossArea -> Update(Decimal)

  getWarehouseUsableArea : GetWarehouseUsableArea -> Update(Decimal)

  getWarehouseFloors : GetWarehouseFloors -> Update(Int)

  getWarehouseBuildDate : GetWarehouseBuildDate -> Update(Date)

  getWarehouseInstalledEquipment : GetWarehouseInstalledEquipment -> Update(Text)

  getWarehouseAdditionalInformation : GetWarehouseAdditionalInformation -> Update(Text)

  getWarehouseDescription : GetWarehouseDescription -> Update(Text)

  getWarehousePhotoReferences : GetWarehousePhotoReferences -> Update([Text])

  nonconsuming choice GetView : View
    with
      viewer : Party
    controller viewer
    do
      pure $ view this
  
  nonconsuming choice GetWarehouseInstrumentKey : InstrumentKey
    controller signatory this
    do
      getWarehouseInstrumentKey this arg

  choice UpdateWarehouse: ContractId WarehouseProperty
    with
      newWarehousePrice : Decimal
      newWarehousePropertyAddress : Text
      newWarehousePropertyPostalCode : Text
      newWarehousePropertyDistrict : Text
      newWarehousePropertyCounty : Text
      newWarehouseType : WarehouseType
      newWarehouseGrossArea : Decimal
      newWarehouseUsableArea : Decimal
      newWarehouseFloors : Int
      newWarehouseBuildDate : Date
      newWarehouseInstalledEquipment : Text
      newWarehouseAdditionalInformation : Text
      newWarehouseDescription : Text
      newWarehousePhotoReferences : [Text]
    controller signatory this
    do
      updateWarehouse this arg

  nonconsuming choice GetWarehousePrice : Decimal
    controller signatory this
    do
      getWarehousePrice this arg

  nonconsuming choice GetWarehousePropertyAddress : Text
    controller signatory this
    do
      getWarehousePropertyAddress this arg

  nonconsuming choice GetWarehousePropertyPostalCode : Text
    controller signatory this
    do
      getWarehousePropertyPostalCode this arg
 
  nonconsuming choice GetWarehousePropertyDistrict : Text
    controller signatory this
    do
      getWarehousePropertyDistrict this arg

  nonconsuming choice GetWarehousePropertyCounty : Text
    controller signatory this
    do
      getWarehousePropertyCounty this arg

  nonconsuming choice GetWarehouseType : WarehouseType
    controller signatory this
    do
      getWarehouseType this arg

  nonconsuming choice GetWarehouseGrossArea : Decimal
    controller signatory this
    do
      getWarehouseGrossArea this arg

  nonconsuming choice GetWarehouseUsableArea : Decimal
    controller signatory this
    do
      getWarehouseUsableArea this arg

  nonconsuming choice GetWarehouseFloors : Int
    controller signatory this
    do
      getWarehouseFloors this arg

  nonconsuming choice GetWarehouseBuildDate : Date
    controller signatory this
    do
      getWarehouseBuildDate this arg

  nonconsuming choice GetWarehouseInstalledEquipment : Text
    controller signatory this
    do
      getWarehouseInstalledEquipment this arg
  
  nonconsuming choice GetWarehouseAdditionalInformation : Text
    controller signatory this
    do
      getWarehouseAdditionalInformation this arg

  nonconsuming choice GetWarehouseDescription : Text
    controller signatory this
    do
      getWarehouseDescription this arg
  
  nonconsuming choice GetWarehousePhotoReferences : [Text]
    controller signatory this
    do
      getWarehousePhotoReferences this arg
      
  choice Remove : ()
    controller signatory this
    do
      (refCid, _) <- fetchByKey @Reference $ getKey this
      archive refCid


template Reference
  with
    warehousePropertyView : View
    cid : ContractId WarehouseProperty
    observers : PartiesMap
  where
    signatory warehousePropertyView.operator
    observer Disclosure.flattenObservers observers, warehousePropertyView.user

    key toKey warehousePropertyView : PropertyKey
    maintainer key.operator

    nonconsuming choice GetCid : ContractId WarehouseProperty
      with
        viewer : Party
      controller viewer
      do
        pure cid

    choice SetCid : ContractId Reference
      with
        newCid : ContractId WarehouseProperty
      controller signatory this
      do
        create this with cid = newCid

    choice SetObservers : ContractId Reference
      with
        newObservers : PartiesMap
      controller signatory this
      do
        create this with observers = newObservers

disclose : (Text, Parties) -> Party -> Parties -> PropertyKey -> Update (ContractId WarehouseProperty)
disclose observersToAdd actor disclosers warehouseProperty =
  fromInterfaceContractId <$>
    exerciseInterfaceByKey @Disclosure.I
      warehouseProperty
      actor
      Disclosure.AddObservers with disclosers; observersToAdd

undisclose : (Text, Parties) -> Party -> Parties -> PropertyKey ->
  Update (Optional (ContractId WarehouseProperty))
undisclose observersToRemove actor disclosers warehouseProperty =
  fmap fromInterfaceContractId <$>
    exerciseInterfaceByKey @Disclosure.I
      warehouseProperty
      actor
      Disclosure.RemoveObservers with disclosers; observersToRemove

exerciseInterfaceByKey : forall i c r.
    ( HasInterfaceTypeRep i
    , HasExercise i c r
    )
    => PropertyKey -- ^ The WarehouseProperty key.
    -> Party      -- ^ The actor exercising.
    -> c          -- ^ The choice arguments.
    -> Update r
exerciseInterfaceByKey k actor arg =
  exerciseInterfaceByKeyHelper @Reference @GetCid @SetCid @SetObservers @GetView @i k actor arg

-- | HIDE
-- Create instance of HasInterfaceKey.
instance InterfaceKey.HasInterfaceKey WarehouseProperty View PropertyKey Reference GetCid SetCid SetObservers
  GetView where
    createReference = Reference
    getCid = GetCid
    setCid = SetCid
    setObservers = SetObservers
    getView = GetView

-- | HIDE
-- Create Reference for the WarehouseProperty.
createReference : Party -> ContractId WarehouseProperty -> Update (ContractId Reference)
createReference = createReferenceHelper @Reference @GetCid @SetCid @SetObservers @GetView

-- | HIDE
-- Helper function to update the WarehouseProperty reference once observers are added to the WarehouseProperty.
disclosureUpdateReference : PropertyKey -> PartiesMap -> ContractId WarehouseProperty ->
  Update (ContractId Disclosure.I)
disclosureUpdateReference =
  disclosureUpdateReferenceHelper @Reference @GetCid @SetCid @SetObservers @GetView