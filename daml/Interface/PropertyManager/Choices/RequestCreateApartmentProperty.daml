module Interface.PropertyManager.Choices.RequestCreateApartmentProperty where

import Interface.Common.Removable qualified as Removable (I, Implementation)
import Daml.Finance.Interface.Types.Common.Types (Id,PartiesMap,InstrumentKey)


type I = RequestCreateApartmentProperty

type V = View

data View = View
  with
    operator: Party
    user: Party
    id: Id
    apartmentInstrument: InstrumentKey
    propertyAddress: Text
    propertyPostalCode : Text
    propertyDistrict : Text
    propertyCounty : Text
    grossArea: Decimal
    usableArea: Decimal
    bedrooms: Int
    bathrooms: Int
    floor: Int
    parkingSpaces: Int
    elevator: Bool
    buildDate: Date
    installedEquipment: Text
    additionalInformation: Text --Other relevant informations
    description: Text
    observers : PartiesMap
  deriving (Eq, Show)

interface RequestCreateApartmentProperty where
  viewtype View

  asRemovable : Removable.I

type Implementation t = (HasToInterface t RequestCreateApartmentProperty, Removable.Implementation t)
class (Implementation t) => HasImplementation t
instance HasImplementation RequestCreateApartmentProperty
instance HasToInterface RequestCreateApartmentProperty Removable.I where _toInterface = asRemovable