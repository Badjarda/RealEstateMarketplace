module Interface.PropertyManager.Choices.RequestCreateResidenceProperty where

import Interface.Common.Removable qualified as Removable (I, Implementation)
import Daml.Finance.Interface.Types.Common.Types (InstrumentKey, PartiesMap, Id)
import Interface.PropertyManager.Property.Common (ResidenceType, Parking, Orientation)

type I = RequestCreateResidenceProperty

type V = View

data View = View
  with
    operator: Party
    user: Party
    id: Id
    residenceInstrument: InstrumentKey
    residencePrice: Decimal
    propertyAddress: Text
    propertyPostalCode : Text
    propertyDistrict : Text
    propertyCounty : Text
    grossArea: Decimal
    usableArea: Decimal
    bedrooms: Int
    bathrooms: Int
    floors: Int
    residenceType: ResidenceType 
    backyard: Text --m^2, frontwards, backwards...
    parking: Parking 
    buildDate: Date
    orientation: Orientation
    installedEquipment: Text
    additionalInformation: Text
    description: Text
    photoReferences: [Text]
    observers : PartiesMap
  deriving (Eq, Show)

interface RequestCreateResidenceProperty where
  viewtype View

  asRemovable : Removable.I

type Implementation t = (HasToInterface t RequestCreateResidenceProperty, Removable.Implementation t)
class (Implementation t) => HasImplementation t
instance HasImplementation RequestCreateResidenceProperty
instance HasToInterface RequestCreateResidenceProperty Removable.I where _toInterface = asRemovable