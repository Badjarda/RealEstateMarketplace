{-# LANGUAGE AllowAmbiguousTypes #-}

module Interface.ProfileManager.UserProfile.UserProfile where
import Interface.Common.Types (UserProfileKey(..))
import Interface.ProfileManager.UserProfile.Common (Nationality(..), Gender(..))

import Daml.Finance.Interface.Types.Common.Types (Id, PartiesMap, Parties)
import Daml.Finance.Interface.Util.Disclosure qualified as Disclosure (AddObservers(..), I, RemoveObservers(..), flattenObservers)
import Daml.Finance.Interface.Util.InterfaceKey (createReferenceHelper, disclosureUpdateReferenceHelper, exerciseInterfaceByKeyHelper)
import Daml.Finance.Interface.Util.InterfaceKey qualified as InterfaceKey (HasInterfaceKey(..))


type I = UserProfile

type R = Reference

type V = View

data View = View
  with
    operator: Party
    user: Party
    id: Id
    username: Text
    firstName: Text
    lastName: Text
    fullName: Text
    password: Text
    birthday: Date
    gender: Optional Gender
    nationality: Nationality
    contactMail: Text
    cellphoneNumber: Optional Int
    idNumber: Int
    taxId: Int
    socialSecurityId: Int
    photoReferences: [Text]
  deriving (Eq, Show)

toKey : View -> UserProfileKey
toKey v = UserProfileKey with operator = v.operator, user = v.user, id = v.id

userProfileKey : (HasToInterface i UserProfile) => i -> UserProfileKey
userProfileKey = toKey . view . toInterface @UserProfile


interface UserProfile requires Disclosure.I where
  viewtype V

  getKey : UserProfileKey

  updateProfile : UpdateProfile -> Update(ContractId UserProfile)

  getUsername : GetUsername -> Update (Text)

  getFirstName : GetFirstName -> Update (Text)

  getLastName : GetLastName -> Update (Text)

  getFullName : GetFullName -> Update (Text)

  getPassword : GetPassword -> Update (Text)

  getBirthday : GetBirthday -> Update (Date)

  getGender : GetGender -> Update (Optional Gender)

  getNationality : GetNationality -> Update (Nationality)

  getContactMail : GetContactMail -> Update (Text)

  getCellphoneNumber : GetCellphoneNumber -> Update (Optional Int)

  getIdNumber : GetIdNumber -> Update (Int)

  getTaxId : GetTaxId -> Update (Int)

  getSocialSecurityId : GetSocialSecurityId -> Update (Int)

  getPhotoReferences : GetPhotoReferences -> Update ([Text])

  nonconsuming choice GetView : View
    with
      viewer : Party
    controller viewer
    do
      pure $ view this

   -- Username
  nonconsuming choice GetUsername : Text
    controller signatory this
    do
      getUsername this arg

  choice UpdateProfile : ContractId UserProfile
    with
      newUsername : Text
      newFirstName : Text
      newLastName : Text
      newFullName : Text
      newPassword : Text
      newBirthday : Date
      newGender : Optional Gender
      newNationality : Nationality
      newContactMail : Text
      newCellphoneNumber : Optional Int
      newIdNumber : Int
      newTaxId : Int
      newSocialSecurityId : Int
      newPhotoReferences : [Text]
    controller signatory this
    do
      updateProfile this arg

  -- First Name
  nonconsuming choice GetFirstName : Text
    controller signatory this
    do
      getFirstName this arg

  -- Last Name
  nonconsuming choice GetLastName : Text
    controller signatory this
    do
      getLastName this arg

  -- Full Name
  nonconsuming choice GetFullName : Text
    controller signatory this
    do
      getFullName this arg
  
  -- Password
  nonconsuming choice GetPassword : Text
    controller signatory this
    do
      getPassword this arg

  -- Birthday
  nonconsuming choice GetBirthday : Date
    controller signatory this
    do
      getBirthday this arg

  -- Gender
  nonconsuming choice GetGender : Optional Gender
    controller signatory this
    do
      getGender this arg

  -- Nationality
  nonconsuming choice GetNationality : Nationality
    controller signatory this
    do
      getNationality this arg

  -- Contact Mail
  nonconsuming choice GetContactMail : Text
    controller signatory this
    do
      getContactMail this arg

  -- Cellphone Number
  nonconsuming choice GetCellphoneNumber : Optional Int
    controller signatory this
    do
      getCellphoneNumber this arg

  -- Id Number
  nonconsuming choice GetIdNumber : Int
    controller signatory this
    do
      getIdNumber this arg

  -- Tax ID
  nonconsuming choice GetTaxId : Int
    controller signatory this
    do
      getTaxId this arg

  -- Social Security ID
  nonconsuming choice GetSocialSecurityId : Int
    controller signatory this
    do
      getSocialSecurityId this arg
  
  -- Photo References
  nonconsuming choice GetPhotoReferences : [Text]
    controller signatory this
    do
      getPhotoReferences this arg
      
  choice Remove : ()
    controller signatory this
    do
      (refCid, _) <- fetchByKey @Reference $ getKey this
      archive refCid


template Reference
  with
    userProfileView : View
    cid : ContractId UserProfile
    observers : PartiesMap
  where
    signatory userProfileView.operator
    observer Disclosure.flattenObservers observers, userProfileView.user

    key toKey userProfileView : UserProfileKey
    maintainer key.operator

    nonconsuming choice GetCid : ContractId UserProfile
      with
        viewer : Party
      controller viewer
      do
        pure cid

    choice SetCid : ContractId Reference
      with
        newCid : ContractId UserProfile
      controller signatory this
      do
        create this with cid = newCid

    choice SetObservers : ContractId Reference
      with
        newObservers : PartiesMap
      controller signatory this
      do
        create this with observers = newObservers

disclose : (Text, Parties) -> Party -> Parties -> UserProfileKey -> Update (ContractId UserProfile)
disclose observersToAdd actor disclosers userProfile =
  fromInterfaceContractId <$>
    exerciseInterfaceByKey @Disclosure.I
      userProfile
      actor
      Disclosure.AddObservers with disclosers; observersToAdd

undisclose : (Text, Parties) -> Party -> Parties -> UserProfileKey ->
  Update (Optional (ContractId UserProfile))
undisclose observersToRemove actor disclosers userProfile =
  fmap fromInterfaceContractId <$>
    exerciseInterfaceByKey @Disclosure.I
      userProfile
      actor
      Disclosure.RemoveObservers with disclosers; observersToRemove

exerciseInterfaceByKey : forall i c r.
    ( HasInterfaceTypeRep i
    , HasExercise i c r
    )
    => UserProfileKey -- ^ The UserProfile key.
    -> Party      -- ^ The actor exercising.
    -> c          -- ^ The choice arguments.
    -> Update r
exerciseInterfaceByKey k actor arg =
  exerciseInterfaceByKeyHelper @Reference @GetCid @SetCid @SetObservers @GetView @i k actor arg

-- | HIDE
-- Create instance of HasInterfaceKey.
instance InterfaceKey.HasInterfaceKey UserProfile View UserProfileKey Reference GetCid SetCid SetObservers
  GetView where
    createReference = Reference
    getCid = GetCid
    setCid = SetCid
    setObservers = SetObservers
    getView = GetView

-- | HIDE
-- Create Reference for the UserRole.
createReference : Party -> ContractId UserProfile -> Update (ContractId Reference)
createReference = createReferenceHelper @Reference @GetCid @SetCid @SetObservers @GetView

-- | HIDE
-- Helper function to update the UserRole reference once observers are added to the UserRole.
disclosureUpdateReference : UserProfileKey -> PartiesMap -> ContractId UserProfile ->
  Update (ContractId Disclosure.I)
disclosureUpdateReference =
  disclosureUpdateReferenceHelper @Reference @GetCid @SetCid @SetObservers @GetView