module Interface.ProfileManager.Service where

import Interface.Base.Service qualified as Base (I, Implementation)
import Interface.Common.Types (UserProfileKey(..))
import Interface.ProfileManager.UserProfile.Common (Nationality(..), Gender(..))
import Interface.ProfileManager.Choices.RequestCreateUserProfile qualified as RequestCreateUserProfile(I)
import Interface.ProfileManager.UserProfile.Factory qualified as UserProfile(Factory(..))

import Daml.Finance.Interface.Types.Common.Types (PartiesMap, Id)


type I = Service

type O = Offer

type R = Request

data View = View
    with
        userProfileFactoryCid: ContractId UserProfile.Factory 
    deriving (Eq, Show)

data OView = OView
  with
    operator : Party
    user : Party
    userProfileFactoryCid: ContractId UserProfile.Factory 
  deriving(Eq, Show)

data RView = RView
  with
    operator : Party
    user : Party
  deriving(Eq, Show)

interface Service where
    viewtype View

    asBase : Base.I
    
    requestCreateUserProfile : RequestCreateUserProfile -> Update (ContractId RequestCreateUserProfile.I)
    createUserProfile: CreateUserProfile -> Update (UserProfileKey) 

    updateProfile : UpdateProfile -> Update ()


    nonconsuming choice RequestCreateUserProfile : ContractId RequestCreateUserProfile.I
      with
          id: Id
          username: Text
          firstName: Text
          lastName: Text
          fullName: Text
          password: Text
          birthday: Date
          gender: Optional Gender
          nationality: Nationality
          contactMail: Text
          cellphoneNumber: Optional Int
          idNumber: Int
          taxId: Int
          socialSecurityId: Int
          photoReferences: [Text]
          observers : PartiesMap
      controller (view $ asBase this).user
      do
        requestCreateUserProfile this arg

    nonconsuming choice CreateUserProfile : UserProfileKey
      with
          createUserProfileRequest: ContractId RequestCreateUserProfile.I
      controller (view $ asBase this).operator
      do
        createUserProfile this arg

    nonconsuming choice UpdateProfile : ()
      with
        newUsername : Text
        newFirstName : Text
        newLastName : Text
        newFullName : Text
        newPassword : Text
        newBirthday : Date
        newGender : Optional Gender
        newNationality : Nationality
        newContactMail : Text
        newCellphoneNumber : Optional Int
        newIdNumber : Int
        newTaxId : Int
        newSocialSecurityId : Int
        newPhotoReferences : [Text]
        userProfileKey : UserProfileKey
      controller (view $ asBase this).user
      do
        updateProfile this arg


interface Offer where
  viewtype OView

  accept : Accept -> Update (ContractId Service)
  decline : Decline -> Update ()
  withdraw : Withdraw -> Update ()

  choice Accept : ContractId Service
    controller (view this).user
    do
      accept this arg

  choice Decline : ()
    controller (view this).user
    do
      decline this arg

  choice Withdraw : ()
    controller (view this).operator
    do
      withdraw this arg

interface Request where
  viewtype RView

  cancel : Cancel -> Update ()
  reject : Reject -> Update ()
  approve : Approve -> Update (ContractId Service)

  choice Cancel : ()
    controller (view this).user
    do
      cancel this arg

  choice Reject : ()
    controller (view this).operator
    do
      reject this arg

  choice Approve : ContractId Service
    with
      operator: Party
      userProfileFactoryCid: ContractId UserProfile.Factory 
    controller operator, (view this).operator
    do
      approve this arg


type ImplementationService t = (HasToInterface t Service, Base.Implementation t)
class (ImplementationService t) => HasImplementation t
instance HasImplementation Service
instance HasToInterface Service Base.I where _toInterface = asBase